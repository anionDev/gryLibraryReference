### YamlMime:ManagedReference
items:
- uid: GRYLibrary.Core.Utilities
  commentId: T:GRYLibrary.Core.Utilities
  id: Utilities
  parent: GRYLibrary.Core
  children:
  - GRYLibrary.Core.Utilities.AddMountPointForVolume(System.Guid,System.String)
  - GRYLibrary.Core.Utilities.AppendFileDoesNeedNewLineCharacter(System.String)
  - GRYLibrary.Core.Utilities.AppendFileDoesNotNeedNewLineCharacter(System.String)
  - GRYLibrary.Core.Utilities.ApplyXSLTToXML(System.String,System.String)
  - GRYLibrary.Core.Utilities.ApplyXSLTToXML(System.String,System.String,System.String)
  - GRYLibrary.Core.Utilities.ApplyXSLTToXML(System.String,System.String,System.String,System.Xml.XmlWriterSettings)
  - GRYLibrary.Core.Utilities.ApplyXSLTToXML(System.String,System.String,System.Xml.XmlWriterSettings)
  - GRYLibrary.Core.Utilities.ApplyXSLTToXMLXMLWriterDefaultSettings
  - GRYLibrary.Core.Utilities.ApplyXSLTToXMLXMLWriterDefaultXMLDeclaration
  - GRYLibrary.Core.Utilities.Assert(System.Boolean,System.String)
  - GRYLibrary.Core.Utilities.AtLeastOneFileExistsInFolder(System.String,System.Collections.Generic.IEnumerable{System.String},System.String@)
  - GRYLibrary.Core.Utilities.ByteArrayToHexString(System.Byte[])
  - GRYLibrary.Core.Utilities.ClearFile(System.String)
  - GRYLibrary.Core.Utilities.Concat``1(``0[],``0[])
  - GRYLibrary.Core.Utilities.CopyFolderAcrossVolumes(System.String,System.String)
  - GRYLibrary.Core.Utilities.DeepClone``1(``0)
  - GRYLibrary.Core.Utilities.DeleteAllEmptyFolderTransitively(System.String,System.Boolean)
  - GRYLibrary.Core.Utilities.DeleteContentOfFolder(System.String)
  - GRYLibrary.Core.Utilities.DeleteFolder(System.String,System.Boolean)
  - GRYLibrary.Core.Utilities.DictionaryEquals``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})
  - GRYLibrary.Core.Utilities.DictionaryEquals``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEqualityComparer{System.Collections.Generic.KeyValuePair{``0,``1}})
  - GRYLibrary.Core.Utilities.DirectoryDoesNotContainFiles(System.String)
  - GRYLibrary.Core.Utilities.DirectoryDoesNotContainFolder(System.String)
  - GRYLibrary.Core.Utilities.DirectoryIsEmpty(System.String)
  - GRYLibrary.Core.Utilities.DurationToUserFriendlyString(System.TimeSpan)
  - GRYLibrary.Core.Utilities.EnsureDirectoryDoesNotExist(System.String)
  - GRYLibrary.Core.Utilities.EnsureDirectoryExists(System.String)
  - GRYLibrary.Core.Utilities.EnsureFileDoesNotExist(System.String)
  - GRYLibrary.Core.Utilities.EnsureFileExists(System.String,System.Boolean)
  - GRYLibrary.Core.Utilities.EnsurePathEndsWithBackslash(System.String)
  - GRYLibrary.Core.Utilities.EnsurePathEndsWithoutBackslash(System.String)
  - GRYLibrary.Core.Utilities.EnsurePathEndsWithoutSlash(System.String)
  - GRYLibrary.Core.Utilities.EnsurePathEndsWithSlash(System.String)
  - GRYLibrary.Core.Utilities.EnsurePathSEndsWithoutSlashOrBackslash(System.String)
  - GRYLibrary.Core.Utilities.EnsurePathStartsWithBackslash(System.String)
  - GRYLibrary.Core.Utilities.EnsurePathStartsWithoutBackslash(System.String)
  - GRYLibrary.Core.Utilities.EnsurePathStartsWithoutSlash(System.String)
  - GRYLibrary.Core.Utilities.EnsurePathStartsWithoutSlashOrBackslash(System.String)
  - GRYLibrary.Core.Utilities.EnsurePathStartsWithSlash(System.String)
  - GRYLibrary.Core.Utilities.EnumerableEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - GRYLibrary.Core.Utilities.EnumerableEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - GRYLibrary.Core.Utilities.EnumerableOfEnumerableToJaggedArray``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  - GRYLibrary.Core.Utilities.EqualsIgnoringOrder``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - GRYLibrary.Core.Utilities.ExecuteGitCommand(System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.Boolean)
  - GRYLibrary.Core.Utilities.FileEndsWithEmptyLine(System.String)
  - GRYLibrary.Core.Utilities.FileIsEmpty(System.String)
  - GRYLibrary.Core.Utilities.ForEachFileAndDirectoryTransitively(System.String,System.Action{System.String,System.Object},System.Action{System.String,System.Object},System.Boolean,System.Object,System.Object)
  - GRYLibrary.Core.Utilities.FormatXMLFile(System.String)
  - GRYLibrary.Core.Utilities.FormatXMLFile(System.String,System.Text.Encoding)
  - GRYLibrary.Core.Utilities.FormatXMLFile(System.String,System.Text.Encoding,System.Xml.XmlWriterSettings)
  - GRYLibrary.Core.Utilities.FormatXMLFile(System.String,System.Xml.XmlWriterSettings)
  - GRYLibrary.Core.Utilities.FormatXMLFile_DefaultEncoding
  - GRYLibrary.Core.Utilities.FormatXMLFile_DefaultXmlWriterSettings
  - GRYLibrary.Core.Utilities.FormatXMLString(System.String)
  - GRYLibrary.Core.Utilities.FormatXMLString(System.String,System.Xml.XmlWriterSettings)
  - GRYLibrary.Core.Utilities.GetAbsolutePath(System.String,System.String)
  - GRYLibrary.Core.Utilities.GetAllMountPointsOfAllAvailableVolumes
  - GRYLibrary.Core.Utilities.GetAmountOfCommitsInGitRepository(System.String,System.String)
  - GRYLibrary.Core.Utilities.GetAvailableVolumeIds
  - GRYLibrary.Core.Utilities.GetCommandLineArguments
  - GRYLibrary.Core.Utilities.GetCurrentGitRepositoryBranch(System.String)
  - GRYLibrary.Core.Utilities.GetDefault(System.Type)
  - GRYLibrary.Core.Utilities.GetFilesOfFolderRecursively(System.String)
  - GRYLibrary.Core.Utilities.GetGitBaseRepositoryPath(System.String)
  - GRYLibrary.Core.Utilities.GetHexValue(System.Char)
  - GRYLibrary.Core.Utilities.GetLastGitCommitId(System.String,System.String)
  - GRYLibrary.Core.Utilities.GetMountPoints(System.Guid)
  - GRYLibrary.Core.Utilities.GetPropertiesWhichHaveGetterAndSetter(System.Type)
  - GRYLibrary.Core.Utilities.GetTimeFromInternet(System.TimeZoneInfo)
  - GRYLibrary.Core.Utilities.GetTimeFromInternet(System.TimeZoneInfo,System.String,System.String,System.Int32,System.Int32,System.Int32)
  - GRYLibrary.Core.Utilities.GetTimeFromInternetCurrentTimeZone
  - GRYLibrary.Core.Utilities.GetTimeFromInternetUtC
  - GRYLibrary.Core.Utilities.GetTotalFreeSpace(System.String)
  - GRYLibrary.Core.Utilities.GetVolumeIdByMountPoint(System.String)
  - GRYLibrary.Core.Utilities.GitCommit(System.String,System.String,System.Boolean@)
  - GRYLibrary.Core.Utilities.GitFetch(System.String,System.String,System.Boolean)
  - GRYLibrary.Core.Utilities.GitRepositoryContainsObligatoryFiles(System.String,System.Collections.Generic.ISet{System.String}@)
  - GRYLibrary.Core.Utilities.GitRepositoryContainsObligatoryFiles(System.String,System.Collections.Generic.ISet{System.String}@,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Collections.Generic.ISet{System.String}}})
  - GRYLibrary.Core.Utilities.GitRepositoryHaNewUntrackedFiles(System.String)
  - GRYLibrary.Core.Utilities.GitRepositoryHasStagedChanges(System.String)
  - GRYLibrary.Core.Utilities.GitRepositoryHasUncommittedChanges(System.String)
  - GRYLibrary.Core.Utilities.GitRepositoryHasUnstagedChanges(System.String)
  - GRYLibrary.Core.Utilities.GitRepositoryHasUnstagedChangesOfTrackedFiles(System.String)
  - GRYLibrary.Core.Utilities.HexStringToByteArray(System.String)
  - GRYLibrary.Core.Utilities.HexStringToInteger(System.String)
  - GRYLibrary.Core.Utilities.IncrementGuid(System.Guid,System.Int64)
  - GRYLibrary.Core.Utilities.IncrementGuid(System.Guid,System.Numerics.BigInteger)
  - GRYLibrary.Core.Utilities.IntegerToHexString(System.Numerics.BigInteger)
  - GRYLibrary.Core.Utilities.IsAbsolutePath(System.String)
  - GRYLibrary.Core.Utilities.IsAllLower(System.String)
  - GRYLibrary.Core.Utilities.IsAllUpper(System.String)
  - GRYLibrary.Core.Utilities.IsAssignableFrom(System.Object,System.Type)
  - GRYLibrary.Core.Utilities.IsAssignableFrom(System.Type,System.Type)
  - GRYLibrary.Core.Utilities.IsDefault(System.Object)
  - GRYLibrary.Core.Utilities.IsGitRepository(System.String)
  - GRYLibrary.Core.Utilities.IsHexDigit(System.Char)
  - GRYLibrary.Core.Utilities.IsHexString(System.String)
  - GRYLibrary.Core.Utilities.IsInGitSubmodule(System.String)
  - GRYLibrary.Core.Utilities.IsNegative(System.TimeSpan)
  - GRYLibrary.Core.Utilities.IsPositive(System.TimeSpan)
  - GRYLibrary.Core.Utilities.IsRelativePath(System.String)
  - GRYLibrary.Core.Utilities.JaggedArrayToEnumerableOfEnumerable``1(``0[][])
  - GRYLibrary.Core.Utilities.JaggedArrayToTwoDimensionalArray``1(``0[][])
  - GRYLibrary.Core.Utilities.LoadFromDisk``1(System.String)
  - GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes(System.String,System.String)
  - GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes(System.String,System.String,GRYLibrary.Core.FileSelector,System.Action{System.Exception},System.Boolean)
  - GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes(System.String,System.String,GRYLibrary.Core.FileSelector,System.Boolean)
  - GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes(System.String,System.String,System.Func{System.String,System.Boolean},System.Action{System.Exception},System.Boolean)
  - GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes(System.String,System.String,System.Func{System.String,System.Boolean},System.Boolean)
  - GRYLibrary.Core.Utilities.MoveFolderAcrossVolumes(System.String,System.String,System.Boolean)
  - GRYLibrary.Core.Utilities.NoOperation
  - GRYLibrary.Core.Utilities.NullSafeEnumerableEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - GRYLibrary.Core.Utilities.NullSafeEquals(System.Object,System.Object)
  - GRYLibrary.Core.Utilities.NullSafeListEquals``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})
  - GRYLibrary.Core.Utilities.NullSafeSetEquals``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})
  - GRYLibrary.Core.Utilities.ObjectIsDictionary(System.Object)
  - GRYLibrary.Core.Utilities.ObjectIsEnumerable(System.Object)
  - GRYLibrary.Core.Utilities.ObjectIsKeyValuePair(System.Object)
  - GRYLibrary.Core.Utilities.ObjectIsList(System.Object)
  - GRYLibrary.Core.Utilities.ObjectIsSet(System.Object)
  - GRYLibrary.Core.Utilities.ObjectToDictionary``2(System.Object)
  - GRYLibrary.Core.Utilities.ObjectToEnumerable(System.Object)
  - GRYLibrary.Core.Utilities.ObjectToEnumerableGeneric``1(System.Object)
  - GRYLibrary.Core.Utilities.ObjectToKeyValuePair``2(System.Object)
  - GRYLibrary.Core.Utilities.ObjectToList``1(System.Object)
  - GRYLibrary.Core.Utilities.ObjectToSet``1(System.Object)
  - GRYLibrary.Core.Utilities.PersistToDisk``1(``0,System.String)
  - GRYLibrary.Core.Utilities.ReadCSVFile(System.String,System.String,System.Boolean)
  - GRYLibrary.Core.Utilities.ReadCSVFile(System.String,System.Text.Encoding,System.String,System.Boolean)
  - GRYLibrary.Core.Utilities.RemoveAllMountPointsOfVolume(System.Guid)
  - GRYLibrary.Core.Utilities.RemoveContentOfFolder(System.String)
  - GRYLibrary.Core.Utilities.RemoveItemOnlyOnce``1(System.Collections.Generic.IList{``0},``0)
  - GRYLibrary.Core.Utilities.RemoveMountPointOfVolume(System.String)
  - GRYLibrary.Core.Utilities.ReplaceUnderscores(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  - GRYLibrary.Core.Utilities.ReplaceUnderscoresInFile(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  - GRYLibrary.Core.Utilities.ReplaceUnderscoresInFile(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Text.Encoding)
  - GRYLibrary.Core.Utilities.ReplaceUnderscoresInFolderTransitively(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  - GRYLibrary.Core.Utilities.ResolveToFullPath(System.String)
  - GRYLibrary.Core.Utilities.ResolveToFullPath(System.String,System.String)
  - GRYLibrary.Core.Utilities.RunAllConcurrentAndReturnAllResults``1(System.Collections.Generic.ISet{System.Func{``0}},System.Int32)
  - GRYLibrary.Core.Utilities.RunAllConcurrentAndReturnFirstResult``1(System.Collections.Generic.ISet{System.Func{``0}},System.Int32)
  - GRYLibrary.Core.Utilities.RunWithTimeout(System.Threading.ThreadStart,System.TimeSpan)
  - GRYLibrary.Core.Utilities.SequanceEqual``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})
  - GRYLibrary.Core.Utilities.SequanceEqual``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})
  - GRYLibrary.Core.Utilities.SetEquals``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})
  - GRYLibrary.Core.Utilities.SetEquals``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0},System.Collections.Generic.IEqualityComparer{``0})
  - GRYLibrary.Core.Utilities.Shuffle``1(System.Collections.Generic.IList{``0})
  - GRYLibrary.Core.Utilities.StartsWith``1(``0[],``0[])
  - GRYLibrary.Core.Utilities.StringToBoolean(System.String)
  - GRYLibrary.Core.Utilities.StringToByteArray(System.String)
  - GRYLibrary.Core.Utilities.ToCamelCase(System.String)
  - GRYLibrary.Core.Utilities.ToCaseInsensitiveSet(System.Collections.Generic.ISet{System.String})
  - GRYLibrary.Core.Utilities.ToDynamic(System.Object)
  - GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryNewLetterSequenceToUpper(System.String)
  - GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryWordOrPartialWordToUpper(System.String)
  - GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryWordToUpper(System.String)
  - GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryWordToUpper(System.String,System.Func{System.Char,System.Boolean})
  - GRYLibrary.Core.Utilities.ToOnlyFirstCharToUpper(System.String)
  - GRYLibrary.Core.Utilities.ToPascalCase(System.String)
  - GRYLibrary.Core.Utilities.ToSerializableDictionary``2(System.Collections.Generic.IDictionary{``0,``1})
  - GRYLibrary.Core.Utilities.TwoDimensionalArrayEquals``1(``0[0:,0:],``0[0:,0:])
  - GRYLibrary.Core.Utilities.TwoDimensionalArrayToJaggedArray``1(``0[0:,0:])
  - GRYLibrary.Core.Utilities.TwoDimensionalArrayToString``1(``0[0:,0:])
  - GRYLibrary.Core.Utilities.TypeArrayToString(System.Type[])
  - GRYLibrary.Core.Utilities.TypeComparerIgnoringGenerics
  - GRYLibrary.Core.Utilities.TypeIsDictionary(System.Type)
  - GRYLibrary.Core.Utilities.TypeIsEnumerable(System.Type)
  - GRYLibrary.Core.Utilities.TypeIsKeyValuePair(System.Type)
  - GRYLibrary.Core.Utilities.TypeIsList(System.Type)
  - GRYLibrary.Core.Utilities.TypeIsSet(System.Type)
  - GRYLibrary.Core.Utilities.ValidateXMLAgainstXSD(System.String,System.String,System.Collections.Generic.IList{System.Object}@)
  - GRYLibrary.Core.Utilities.WriteToConsoleAsASCIITable(System.Collections.Generic.IList{System.Collections.Generic.IList{System.String}})
  langs:
  - csharp
  - vb
  name: Utilities
  nameWithType: Utilities
  fullName: GRYLibrary.Core.Utilities
  type: Class
  source:
    id: Utilities
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 27
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static class Utilities
    content.vb: Public Module Utilities
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: GRYLibrary.Core.Utilities.Shuffle``1(System.Collections.Generic.IList{``0})
  commentId: M:GRYLibrary.Core.Utilities.Shuffle``1(System.Collections.Generic.IList{``0})
  id: Shuffle``1(System.Collections.Generic.IList{``0})
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: Shuffle<T>(IList<T>)
  nameWithType: Utilities.Shuffle<T>(IList<T>)
  fullName: GRYLibrary.Core.Utilities.Shuffle<T>(System.Collections.Generic.IList<T>)
  type: Method
  source:
    id: Shuffle
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 29
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void Shuffle<T>(this IList<T> list)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{T}}
    typeParameters:
    - id: T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Shuffle(Of T)(list As IList(Of T))
  overload: GRYLibrary.Core.Utilities.Shuffle*
  nameWithType.vb: Utilities.Shuffle(Of T)(IList(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.Shuffle(Of T)(System.Collections.Generic.IList(Of T))
  name.vb: Shuffle(Of T)(IList(Of T))
- uid: GRYLibrary.Core.Utilities.EqualsIgnoringOrder``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:GRYLibrary.Core.Utilities.EqualsIgnoringOrder``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: EqualsIgnoringOrder``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: EqualsIgnoringOrder<T>(IEnumerable<T>, IEnumerable<T>)
  nameWithType: Utilities.EqualsIgnoringOrder<T>(IEnumerable<T>, IEnumerable<T>)
  fullName: GRYLibrary.Core.Utilities.EqualsIgnoringOrder<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    id: EqualsIgnoringOrder
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 42
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool EqualsIgnoringOrder<T>(this IEnumerable<T> list1, IEnumerable<T> list2)
    parameters:
    - id: list1
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: list2
      type: System.Collections.Generic.IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualsIgnoringOrder(Of T)(list1 As IEnumerable(Of T), list2 As IEnumerable(Of T)) As Boolean
  overload: GRYLibrary.Core.Utilities.EqualsIgnoringOrder*
  nameWithType.vb: Utilities.EqualsIgnoringOrder(Of T)(IEnumerable(Of T), IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.EqualsIgnoringOrder(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: EqualsIgnoringOrder(Of T)(IEnumerable(Of T), IEnumerable(Of T))
- uid: GRYLibrary.Core.Utilities.GetPropertiesWhichHaveGetterAndSetter(System.Type)
  commentId: M:GRYLibrary.Core.Utilities.GetPropertiesWhichHaveGetterAndSetter(System.Type)
  id: GetPropertiesWhichHaveGetterAndSetter(System.Type)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GetPropertiesWhichHaveGetterAndSetter(Type)
  nameWithType: Utilities.GetPropertiesWhichHaveGetterAndSetter(Type)
  fullName: GRYLibrary.Core.Utilities.GetPropertiesWhichHaveGetterAndSetter(System.Type)
  type: Method
  source:
    id: GetPropertiesWhichHaveGetterAndSetter
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 47
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static IEnumerable<PropertyInfo> GetPropertiesWhichHaveGetterAndSetter(Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
    content.vb: Public Shared Function GetPropertiesWhichHaveGetterAndSetter(type As Type) As IEnumerable(Of PropertyInfo)
  overload: GRYLibrary.Core.Utilities.GetPropertiesWhichHaveGetterAndSetter*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.GetFilesOfFolderRecursively(System.String)
  commentId: M:GRYLibrary.Core.Utilities.GetFilesOfFolderRecursively(System.String)
  id: GetFilesOfFolderRecursively(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GetFilesOfFolderRecursively(String)
  nameWithType: Utilities.GetFilesOfFolderRecursively(String)
  fullName: GRYLibrary.Core.Utilities.GetFilesOfFolderRecursively(System.String)
  type: Method
  source:
    id: GetFilesOfFolderRecursively
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 60
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static IEnumerable<string> GetFilesOfFolderRecursively(string folder)
    parameters:
    - id: folder
      type: System.String
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public Shared Function GetFilesOfFolderRecursively(folder As String) As IEnumerable(Of String)
  overload: GRYLibrary.Core.Utilities.GetFilesOfFolderRecursively*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.NoOperation
  commentId: M:GRYLibrary.Core.Utilities.NoOperation
  id: NoOperation
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: NoOperation()
  nameWithType: Utilities.NoOperation()
  fullName: GRYLibrary.Core.Utilities.NoOperation()
  type: Method
  source:
    id: NoOperation
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 74
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void NoOperation()
    content.vb: Public Shared Sub NoOperation
  overload: GRYLibrary.Core.Utilities.NoOperation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ReplaceUnderscoresInFolderTransitively(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  commentId: M:GRYLibrary.Core.Utilities.ReplaceUnderscoresInFolderTransitively(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  id: ReplaceUnderscoresInFolderTransitively(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ReplaceUnderscoresInFolderTransitively(String, IDictionary<String, String>)
  nameWithType: Utilities.ReplaceUnderscoresInFolderTransitively(String, IDictionary<String, String>)
  fullName: GRYLibrary.Core.Utilities.ReplaceUnderscoresInFolderTransitively(System.String, System.Collections.Generic.IDictionary<System.String, System.String>)
  type: Method
  source:
    id: ReplaceUnderscoresInFolderTransitively
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 78
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void ReplaceUnderscoresInFolderTransitively(string folder, IDictionary<string, string> replacements)
    parameters:
    - id: folder
      type: System.String
    - id: replacements
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    content.vb: Public Shared Sub ReplaceUnderscoresInFolderTransitively(folder As String, replacements As IDictionary(Of String, String))
  overload: GRYLibrary.Core.Utilities.ReplaceUnderscoresInFolderTransitively*
  nameWithType.vb: Utilities.ReplaceUnderscoresInFolderTransitively(String, IDictionary(Of String, String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.ReplaceUnderscoresInFolderTransitively(System.String, System.Collections.Generic.IDictionary(Of System.String, System.String))
  name.vb: ReplaceUnderscoresInFolderTransitively(String, IDictionary(Of String, String))
- uid: GRYLibrary.Core.Utilities.ReplaceUnderscores(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  commentId: M:GRYLibrary.Core.Utilities.ReplaceUnderscores(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  id: ReplaceUnderscores(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ReplaceUnderscores(String, IDictionary<String, String>)
  nameWithType: Utilities.ReplaceUnderscores(String, IDictionary<String, String>)
  fullName: GRYLibrary.Core.Utilities.ReplaceUnderscores(System.String, System.Collections.Generic.IDictionary<System.String, System.String>)
  type: Method
  source:
    id: ReplaceUnderscores
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 117
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string ReplaceUnderscores(string string, IDictionary<string, string> replacements)
    parameters:
    - id: string
      type: System.String
    - id: replacements
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    return:
      type: System.String
    content.vb: Public Shared Function ReplaceUnderscores(string As String, replacements As IDictionary(Of String, String)) As String
  overload: GRYLibrary.Core.Utilities.ReplaceUnderscores*
  nameWithType.vb: Utilities.ReplaceUnderscores(String, IDictionary(Of String, String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.ReplaceUnderscores(System.String, System.Collections.Generic.IDictionary(Of System.String, System.String))
  name.vb: ReplaceUnderscores(String, IDictionary(Of String, String))
- uid: GRYLibrary.Core.Utilities.ObjectIsEnumerable(System.Object)
  commentId: M:GRYLibrary.Core.Utilities.ObjectIsEnumerable(System.Object)
  id: ObjectIsEnumerable(System.Object)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ObjectIsEnumerable(Object)
  nameWithType: Utilities.ObjectIsEnumerable(Object)
  fullName: GRYLibrary.Core.Utilities.ObjectIsEnumerable(System.Object)
  type: Method
  source:
    id: ObjectIsEnumerable
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 127
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  example: []
  syntax:
    content: public static bool ObjectIsEnumerable(this object object)
    parameters:
    - id: object
      type: System.Object
    return:
      type: System.Boolean
      description: Returns true if and only if the most concrete type of <code data-dev-comment-type="paramref" class="paramref">object</code> implements <xref href="System.Collections.IEnumerable" data-throw-if-not-resolved="false"></xref>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ObjectIsEnumerable(object As Object) As Boolean
  overload: GRYLibrary.Core.Utilities.ObjectIsEnumerable*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.TypeIsEnumerable(System.Type)
  commentId: M:GRYLibrary.Core.Utilities.TypeIsEnumerable(System.Type)
  id: TypeIsEnumerable(System.Type)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: TypeIsEnumerable(Type)
  nameWithType: Utilities.TypeIsEnumerable(Type)
  fullName: GRYLibrary.Core.Utilities.TypeIsEnumerable(System.Type)
  type: Method
  source:
    id: TypeIsEnumerable
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 131
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool TypeIsEnumerable(this Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TypeIsEnumerable(type As Type) As Boolean
  overload: GRYLibrary.Core.Utilities.TypeIsEnumerable*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ObjectToEnumerable(System.Object)
  commentId: M:GRYLibrary.Core.Utilities.ObjectToEnumerable(System.Object)
  id: ObjectToEnumerable(System.Object)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ObjectToEnumerable(Object)
  nameWithType: Utilities.ObjectToEnumerable(Object)
  fullName: GRYLibrary.Core.Utilities.ObjectToEnumerable(System.Object)
  type: Method
  source:
    id: ObjectToEnumerable
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 135
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static IEnumerable ObjectToEnumerable(this object object)
    parameters:
    - id: object
      type: System.Object
    return:
      type: System.Collections.IEnumerable
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ObjectToEnumerable(object As Object) As IEnumerable
  overload: GRYLibrary.Core.Utilities.ObjectToEnumerable*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ObjectToEnumerableGeneric``1(System.Object)
  commentId: M:GRYLibrary.Core.Utilities.ObjectToEnumerableGeneric``1(System.Object)
  id: ObjectToEnumerableGeneric``1(System.Object)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ObjectToEnumerableGeneric<T>(Object)
  nameWithType: Utilities.ObjectToEnumerableGeneric<T>(Object)
  fullName: GRYLibrary.Core.Utilities.ObjectToEnumerableGeneric<T>(System.Object)
  type: Method
  source:
    id: ObjectToEnumerableGeneric
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 143
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static IEnumerable<T> ObjectToEnumerableGeneric<T>(this object object)
    parameters:
    - id: object
      type: System.Object
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ObjectToEnumerableGeneric(Of T)(object As Object) As IEnumerable(Of T)
  overload: GRYLibrary.Core.Utilities.ObjectToEnumerableGeneric*
  nameWithType.vb: Utilities.ObjectToEnumerableGeneric(Of T)(Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.ObjectToEnumerableGeneric(Of T)(System.Object)
  name.vb: ObjectToEnumerableGeneric(Of T)(Object)
- uid: GRYLibrary.Core.Utilities.EnumerableEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:GRYLibrary.Core.Utilities.EnumerableEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: EnumerableEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: EnumerableEquals<T>(IEnumerable<T>, IEnumerable<T>)
  nameWithType: Utilities.EnumerableEquals<T>(IEnumerable<T>, IEnumerable<T>)
  fullName: GRYLibrary.Core.Utilities.EnumerableEquals<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    id: EnumerableEquals
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 160
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool EnumerableEquals<T>(this IEnumerable<T> enumerable1, IEnumerable<T> enumerable2)
    parameters:
    - id: enumerable1
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: enumerable2
      type: System.Collections.Generic.IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnumerableEquals(Of T)(enumerable1 As IEnumerable(Of T), enumerable2 As IEnumerable(Of T)) As Boolean
  overload: GRYLibrary.Core.Utilities.EnumerableEquals*
  nameWithType.vb: Utilities.EnumerableEquals(Of T)(IEnumerable(Of T), IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.EnumerableEquals(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: EnumerableEquals(Of T)(IEnumerable(Of T), IEnumerable(Of T))
- uid: GRYLibrary.Core.Utilities.EnumerableEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:GRYLibrary.Core.Utilities.EnumerableEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: EnumerableEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: EnumerableEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: Utilities.EnumerableEquals<T>(IEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: GRYLibrary.Core.Utilities.EnumerableEquals<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    id: EnumerableEquals
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 164
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool EnumerableEquals<T>(this IEnumerable<T> enumerable1, IEnumerable<T> enumerable2, IEqualityComparer<T> comparer)
    parameters:
    - id: enumerable1
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: enumerable2
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnumerableEquals(Of T)(enumerable1 As IEnumerable(Of T), enumerable2 As IEnumerable(Of T), comparer As IEqualityComparer(Of T)) As Boolean
  overload: GRYLibrary.Core.Utilities.EnumerableEquals*
  nameWithType.vb: Utilities.EnumerableEquals(Of T)(IEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.EnumerableEquals(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: EnumerableEquals(Of T)(IEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
- uid: GRYLibrary.Core.Utilities.ObjectIsList(System.Object)
  commentId: M:GRYLibrary.Core.Utilities.ObjectIsList(System.Object)
  id: ObjectIsList(System.Object)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ObjectIsList(Object)
  nameWithType: Utilities.ObjectIsList(Object)
  fullName: GRYLibrary.Core.Utilities.ObjectIsList(System.Object)
  type: Method
  source:
    id: ObjectIsList
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 186
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  example: []
  syntax:
    content: public static bool ObjectIsList(this object object)
    parameters:
    - id: object
      type: System.Object
    return:
      type: System.Boolean
      description: Returns true if and only if the most concrete type of <code data-dev-comment-type="paramref" class="paramref">object</code> implements <xref href="System.Collections.Generic.IList%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ObjectIsList(object As Object) As Boolean
  overload: GRYLibrary.Core.Utilities.ObjectIsList*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.TypeIsList(System.Type)
  commentId: M:GRYLibrary.Core.Utilities.TypeIsList(System.Type)
  id: TypeIsList(System.Type)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: TypeIsList(Type)
  nameWithType: Utilities.TypeIsList(Type)
  fullName: GRYLibrary.Core.Utilities.TypeIsList(System.Type)
  type: Method
  source:
    id: TypeIsList
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 190
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool TypeIsList(this Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TypeIsList(type As Type) As Boolean
  overload: GRYLibrary.Core.Utilities.TypeIsList*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ObjectToList``1(System.Object)
  commentId: M:GRYLibrary.Core.Utilities.ObjectToList``1(System.Object)
  id: ObjectToList``1(System.Object)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ObjectToList<T>(Object)
  nameWithType: Utilities.ObjectToList<T>(Object)
  fullName: GRYLibrary.Core.Utilities.ObjectToList<T>(System.Object)
  type: Method
  source:
    id: ObjectToList
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 194
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static IList<T> ObjectToList<T>(this object object)
    parameters:
    - id: object
      type: System.Object
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IList{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ObjectToList(Of T)(object As Object) As IList(Of T)
  overload: GRYLibrary.Core.Utilities.ObjectToList*
  nameWithType.vb: Utilities.ObjectToList(Of T)(Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.ObjectToList(Of T)(System.Object)
  name.vb: ObjectToList(Of T)(Object)
- uid: GRYLibrary.Core.Utilities.ObjectIsSet(System.Object)
  commentId: M:GRYLibrary.Core.Utilities.ObjectIsSet(System.Object)
  id: ObjectIsSet(System.Object)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ObjectIsSet(Object)
  nameWithType: Utilities.ObjectIsSet(Object)
  fullName: GRYLibrary.Core.Utilities.ObjectIsSet(System.Object)
  type: Method
  source:
    id: ObjectIsSet
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 216
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  example: []
  syntax:
    content: public static bool ObjectIsSet(this object object)
    parameters:
    - id: object
      type: System.Object
    return:
      type: System.Boolean
      description: Returns true if and only if the most concrete type of <code data-dev-comment-type="paramref" class="paramref">object</code> implements <xref href="System.Collections.Generic.ISet%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ObjectIsSet(object As Object) As Boolean
  overload: GRYLibrary.Core.Utilities.ObjectIsSet*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.TypeIsSet(System.Type)
  commentId: M:GRYLibrary.Core.Utilities.TypeIsSet(System.Type)
  id: TypeIsSet(System.Type)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: TypeIsSet(Type)
  nameWithType: Utilities.TypeIsSet(Type)
  fullName: GRYLibrary.Core.Utilities.TypeIsSet(System.Type)
  type: Method
  source:
    id: TypeIsSet
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 220
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool TypeIsSet(this Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TypeIsSet(type As Type) As Boolean
  overload: GRYLibrary.Core.Utilities.TypeIsSet*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ObjectIsKeyValuePair(System.Object)
  commentId: M:GRYLibrary.Core.Utilities.ObjectIsKeyValuePair(System.Object)
  id: ObjectIsKeyValuePair(System.Object)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ObjectIsKeyValuePair(Object)
  nameWithType: Utilities.ObjectIsKeyValuePair(Object)
  fullName: GRYLibrary.Core.Utilities.ObjectIsKeyValuePair(System.Object)
  type: Method
  source:
    id: ObjectIsKeyValuePair
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 224
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool ObjectIsKeyValuePair(this object object)
    parameters:
    - id: object
      type: System.Object
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ObjectIsKeyValuePair(object As Object) As Boolean
  overload: GRYLibrary.Core.Utilities.ObjectIsKeyValuePair*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.TypeIsKeyValuePair(System.Type)
  commentId: M:GRYLibrary.Core.Utilities.TypeIsKeyValuePair(System.Type)
  id: TypeIsKeyValuePair(System.Type)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: TypeIsKeyValuePair(Type)
  nameWithType: Utilities.TypeIsKeyValuePair(Type)
  fullName: GRYLibrary.Core.Utilities.TypeIsKeyValuePair(System.Type)
  type: Method
  source:
    id: TypeIsKeyValuePair
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 228
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool TypeIsKeyValuePair(this Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TypeIsKeyValuePair(type As Type) As Boolean
  overload: GRYLibrary.Core.Utilities.TypeIsKeyValuePair*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ObjectToKeyValuePair``2(System.Object)
  commentId: M:GRYLibrary.Core.Utilities.ObjectToKeyValuePair``2(System.Object)
  id: ObjectToKeyValuePair``2(System.Object)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ObjectToKeyValuePair<TKey, TValue>(Object)
  nameWithType: Utilities.ObjectToKeyValuePair<TKey, TValue>(Object)
  fullName: GRYLibrary.Core.Utilities.ObjectToKeyValuePair<TKey, TValue>(System.Object)
  type: Method
  source:
    id: ObjectToKeyValuePair
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 232
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static KeyValuePair<TKey, TValue> ObjectToKeyValuePair<TKey, TValue>(this object object)
    parameters:
    - id: object
      type: System.Object
    typeParameters:
    - id: TKey
    - id: TValue
    return:
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ObjectToKeyValuePair(Of TKey, TValue)(object As Object) As KeyValuePair(Of TKey, TValue)
  overload: GRYLibrary.Core.Utilities.ObjectToKeyValuePair*
  nameWithType.vb: Utilities.ObjectToKeyValuePair(Of TKey, TValue)(Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.ObjectToKeyValuePair(Of TKey, TValue)(System.Object)
  name.vb: ObjectToKeyValuePair(Of TKey, TValue)(Object)
- uid: GRYLibrary.Core.Utilities.ObjectToSet``1(System.Object)
  commentId: M:GRYLibrary.Core.Utilities.ObjectToSet``1(System.Object)
  id: ObjectToSet``1(System.Object)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ObjectToSet<T>(Object)
  nameWithType: Utilities.ObjectToSet<T>(Object)
  fullName: GRYLibrary.Core.Utilities.ObjectToSet<T>(System.Object)
  type: Method
  source:
    id: ObjectToSet
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 249
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static ISet<T> ObjectToSet<T>(this object object)
    parameters:
    - id: object
      type: System.Object
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.ISet{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ObjectToSet(Of T)(object As Object) As ISet(Of T)
  overload: GRYLibrary.Core.Utilities.ObjectToSet*
  nameWithType.vb: Utilities.ObjectToSet(Of T)(Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.ObjectToSet(Of T)(System.Object)
  name.vb: ObjectToSet(Of T)(Object)
- uid: GRYLibrary.Core.Utilities.SequanceEqual``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})
  commentId: M:GRYLibrary.Core.Utilities.SequanceEqual``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})
  id: SequanceEqual``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: SequanceEqual<T>(IList<T>, IList<T>)
  nameWithType: Utilities.SequanceEqual<T>(IList<T>, IList<T>)
  fullName: GRYLibrary.Core.Utilities.SequanceEqual<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)
  type: Method
  source:
    id: SequanceEqual
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 266
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool SequanceEqual<T>(this IList<T> list1, IList<T> list2)
    parameters:
    - id: list1
      type: System.Collections.Generic.IList{{T}}
    - id: list2
      type: System.Collections.Generic.IList{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SequanceEqual(Of T)(list1 As IList(Of T), list2 As IList(Of T)) As Boolean
  overload: GRYLibrary.Core.Utilities.SequanceEqual*
  nameWithType.vb: Utilities.SequanceEqual(Of T)(IList(Of T), IList(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.SequanceEqual(Of T)(System.Collections.Generic.IList(Of T), System.Collections.Generic.IList(Of T))
  name.vb: SequanceEqual(Of T)(IList(Of T), IList(Of T))
- uid: GRYLibrary.Core.Utilities.SequanceEqual``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:GRYLibrary.Core.Utilities.SequanceEqual``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: SequanceEqual``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: SequanceEqual<T>(IList<T>, IList<T>, IEqualityComparer<T>)
  nameWithType: Utilities.SequanceEqual<T>(IList<T>, IList<T>, IEqualityComparer<T>)
  fullName: GRYLibrary.Core.Utilities.SequanceEqual<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    id: SequanceEqual
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 270
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool SequanceEqual<T>(this IList<T> list1, IList<T> list2, IEqualityComparer<T> comparer)
    parameters:
    - id: list1
      type: System.Collections.Generic.IList{{T}}
    - id: list2
      type: System.Collections.Generic.IList{{T}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SequanceEqual(Of T)(list1 As IList(Of T), list2 As IList(Of T), comparer As IEqualityComparer(Of T)) As Boolean
  overload: GRYLibrary.Core.Utilities.SequanceEqual*
  nameWithType.vb: Utilities.SequanceEqual(Of T)(IList(Of T), IList(Of T), IEqualityComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.SequanceEqual(Of T)(System.Collections.Generic.IList(Of T), System.Collections.Generic.IList(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: SequanceEqual(Of T)(IList(Of T), IList(Of T), IEqualityComparer(Of T))
- uid: GRYLibrary.Core.Utilities.SetEquals``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})
  commentId: M:GRYLibrary.Core.Utilities.SetEquals``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})
  id: SetEquals``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: SetEquals<T>(ISet<T>, ISet<T>)
  nameWithType: Utilities.SetEquals<T>(ISet<T>, ISet<T>)
  fullName: GRYLibrary.Core.Utilities.SetEquals<T>(System.Collections.Generic.ISet<T>, System.Collections.Generic.ISet<T>)
  type: Method
  source:
    id: SetEquals
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 285
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool SetEquals<T>(this ISet<T> set1, ISet<T> set2)
    parameters:
    - id: set1
      type: System.Collections.Generic.ISet{{T}}
    - id: set2
      type: System.Collections.Generic.ISet{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetEquals(Of T)(set1 As ISet(Of T), set2 As ISet(Of T)) As Boolean
  overload: GRYLibrary.Core.Utilities.SetEquals*
  nameWithType.vb: Utilities.SetEquals(Of T)(ISet(Of T), ISet(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.SetEquals(Of T)(System.Collections.Generic.ISet(Of T), System.Collections.Generic.ISet(Of T))
  name.vb: SetEquals(Of T)(ISet(Of T), ISet(Of T))
- uid: GRYLibrary.Core.Utilities.SetEquals``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:GRYLibrary.Core.Utilities.SetEquals``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: SetEquals``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: SetEquals<T>(ISet<T>, ISet<T>, IEqualityComparer<T>)
  nameWithType: Utilities.SetEquals<T>(ISet<T>, ISet<T>, IEqualityComparer<T>)
  fullName: GRYLibrary.Core.Utilities.SetEquals<T>(System.Collections.Generic.ISet<T>, System.Collections.Generic.ISet<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    id: SetEquals
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 289
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool SetEquals<T>(this ISet<T> set1, ISet<T> set2, IEqualityComparer<T> comparer)
    parameters:
    - id: set1
      type: System.Collections.Generic.ISet{{T}}
    - id: set2
      type: System.Collections.Generic.ISet{{T}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetEquals(Of T)(set1 As ISet(Of T), set2 As ISet(Of T), comparer As IEqualityComparer(Of T)) As Boolean
  overload: GRYLibrary.Core.Utilities.SetEquals*
  nameWithType.vb: Utilities.SetEquals(Of T)(ISet(Of T), ISet(Of T), IEqualityComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.SetEquals(Of T)(System.Collections.Generic.ISet(Of T), System.Collections.Generic.ISet(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: SetEquals(Of T)(ISet(Of T), ISet(Of T), IEqualityComparer(Of T))
- uid: GRYLibrary.Core.Utilities.ObjectIsDictionary(System.Object)
  commentId: M:GRYLibrary.Core.Utilities.ObjectIsDictionary(System.Object)
  id: ObjectIsDictionary(System.Object)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ObjectIsDictionary(Object)
  nameWithType: Utilities.ObjectIsDictionary(Object)
  fullName: GRYLibrary.Core.Utilities.ObjectIsDictionary(System.Object)
  type: Method
  source:
    id: ObjectIsDictionary
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 310
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  example: []
  syntax:
    content: public static bool ObjectIsDictionary(this object object)
    parameters:
    - id: object
      type: System.Object
    return:
      type: System.Boolean
      description: Returns true if and only if the most concrete type of <code data-dev-comment-type="paramref" class="paramref">object</code> implements <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ObjectIsDictionary(object As Object) As Boolean
  overload: GRYLibrary.Core.Utilities.ObjectIsDictionary*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.TypeIsDictionary(System.Type)
  commentId: M:GRYLibrary.Core.Utilities.TypeIsDictionary(System.Type)
  id: TypeIsDictionary(System.Type)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: TypeIsDictionary(Type)
  nameWithType: Utilities.TypeIsDictionary(Type)
  fullName: GRYLibrary.Core.Utilities.TypeIsDictionary(System.Type)
  type: Method
  source:
    id: TypeIsDictionary
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 314
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool TypeIsDictionary(this Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TypeIsDictionary(type As Type) As Boolean
  overload: GRYLibrary.Core.Utilities.TypeIsDictionary*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ObjectToDictionary``2(System.Object)
  commentId: M:GRYLibrary.Core.Utilities.ObjectToDictionary``2(System.Object)
  id: ObjectToDictionary``2(System.Object)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ObjectToDictionary<TKey, TValue>(Object)
  nameWithType: Utilities.ObjectToDictionary<TKey, TValue>(Object)
  fullName: GRYLibrary.Core.Utilities.ObjectToDictionary<TKey, TValue>(System.Object)
  type: Method
  source:
    id: ObjectToDictionary
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 318
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static IDictionary<TKey, TValue> ObjectToDictionary<TKey, TValue>(this object object)
    parameters:
    - id: object
      type: System.Object
    typeParameters:
    - id: TKey
    - id: TValue
    return:
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ObjectToDictionary(Of TKey, TValue)(object As Object) As IDictionary(Of TKey, TValue)
  overload: GRYLibrary.Core.Utilities.ObjectToDictionary*
  nameWithType.vb: Utilities.ObjectToDictionary(Of TKey, TValue)(Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.ObjectToDictionary(Of TKey, TValue)(System.Object)
  name.vb: ObjectToDictionary(Of TKey, TValue)(Object)
- uid: GRYLibrary.Core.Utilities.DictionaryEquals``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})
  commentId: M:GRYLibrary.Core.Utilities.DictionaryEquals``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})
  id: DictionaryEquals``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: DictionaryEquals<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>)
  nameWithType: Utilities.DictionaryEquals<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>)
  fullName: GRYLibrary.Core.Utilities.DictionaryEquals<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IDictionary<TKey, TValue>)
  type: Method
  source:
    id: DictionaryEquals
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 333
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool DictionaryEquals<TKey, TValue>(this IDictionary<TKey, TValue> dictionary1, IDictionary<TKey, TValue> dictionary2)
    parameters:
    - id: dictionary1
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
    - id: dictionary2
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
    typeParameters:
    - id: TKey
    - id: TValue
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DictionaryEquals(Of TKey, TValue)(dictionary1 As IDictionary(Of TKey, TValue), dictionary2 As IDictionary(Of TKey, TValue)) As Boolean
  overload: GRYLibrary.Core.Utilities.DictionaryEquals*
  nameWithType.vb: Utilities.DictionaryEquals(Of TKey, TValue)(IDictionary(Of TKey, TValue), IDictionary(Of TKey, TValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.DictionaryEquals(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), System.Collections.Generic.IDictionary(Of TKey, TValue))
  name.vb: DictionaryEquals(Of TKey, TValue)(IDictionary(Of TKey, TValue), IDictionary(Of TKey, TValue))
- uid: GRYLibrary.Core.Utilities.DictionaryEquals``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEqualityComparer{System.Collections.Generic.KeyValuePair{``0,``1}})
  commentId: M:GRYLibrary.Core.Utilities.DictionaryEquals``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEqualityComparer{System.Collections.Generic.KeyValuePair{``0,``1}})
  id: DictionaryEquals``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEqualityComparer{System.Collections.Generic.KeyValuePair{``0,``1}})
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: DictionaryEquals<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, IEqualityComparer<KeyValuePair<TKey, TValue>>)
  nameWithType: Utilities.DictionaryEquals<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, IEqualityComparer<KeyValuePair<TKey, TValue>>)
  fullName: GRYLibrary.Core.Utilities.DictionaryEquals<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<System.Collections.Generic.KeyValuePair<TKey, TValue>>)
  type: Method
  source:
    id: DictionaryEquals
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 337
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool DictionaryEquals<TKey, TValue>(this IDictionary<TKey, TValue> dictionary1, IDictionary<TKey, TValue> dictionary2, IEqualityComparer<KeyValuePair<TKey, TValue>> comparer)
    parameters:
    - id: dictionary1
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
    - id: dictionary2
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
    typeParameters:
    - id: TKey
    - id: TValue
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DictionaryEquals(Of TKey, TValue)(dictionary1 As IDictionary(Of TKey, TValue), dictionary2 As IDictionary(Of TKey, TValue), comparer As IEqualityComparer(Of KeyValuePair(Of TKey, TValue))) As Boolean
  overload: GRYLibrary.Core.Utilities.DictionaryEquals*
  nameWithType.vb: Utilities.DictionaryEquals(Of TKey, TValue)(IDictionary(Of TKey, TValue), IDictionary(Of TKey, TValue), IEqualityComparer(Of KeyValuePair(Of TKey, TValue)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.DictionaryEquals(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), System.Collections.Generic.IDictionary(Of TKey, TValue), System.Collections.Generic.IEqualityComparer(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)))
  name.vb: DictionaryEquals(Of TKey, TValue)(IDictionary(Of TKey, TValue), IDictionary(Of TKey, TValue), IEqualityComparer(Of KeyValuePair(Of TKey, TValue)))
- uid: GRYLibrary.Core.Utilities.IsAssignableFrom(System.Object,System.Type)
  commentId: M:GRYLibrary.Core.Utilities.IsAssignableFrom(System.Object,System.Type)
  id: IsAssignableFrom(System.Object,System.Type)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: IsAssignableFrom(Object, Type)
  nameWithType: Utilities.IsAssignableFrom(Object, Type)
  fullName: GRYLibrary.Core.Utilities.IsAssignableFrom(System.Object, System.Type)
  type: Method
  source:
    id: IsAssignableFrom
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 365
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool IsAssignableFrom(object object, Type genericTypeToCompare)
    parameters:
    - id: object
      type: System.Object
    - id: genericTypeToCompare
      type: System.Type
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsAssignableFrom(object As Object, genericTypeToCompare As Type) As Boolean
  overload: GRYLibrary.Core.Utilities.IsAssignableFrom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.IsAssignableFrom(System.Type,System.Type)
  commentId: M:GRYLibrary.Core.Utilities.IsAssignableFrom(System.Type,System.Type)
  id: IsAssignableFrom(System.Type,System.Type)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: IsAssignableFrom(Type, Type)
  nameWithType: Utilities.IsAssignableFrom(Type, Type)
  fullName: GRYLibrary.Core.Utilities.IsAssignableFrom(System.Type, System.Type)
  type: Method
  source:
    id: IsAssignableFrom
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 369
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool IsAssignableFrom(Type typeForCheck, Type parentType)
    parameters:
    - id: typeForCheck
      type: System.Type
    - id: parentType
      type: System.Type
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsAssignableFrom(typeForCheck As Type, parentType As Type) As Boolean
  overload: GRYLibrary.Core.Utilities.IsAssignableFrom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.TypeComparerIgnoringGenerics
  commentId: P:GRYLibrary.Core.Utilities.TypeComparerIgnoringGenerics
  id: TypeComparerIgnoringGenerics
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: TypeComparerIgnoringGenerics
  nameWithType: Utilities.TypeComparerIgnoringGenerics
  fullName: GRYLibrary.Core.Utilities.TypeComparerIgnoringGenerics
  type: Property
  source:
    id: TypeComparerIgnoringGenerics
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 385
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static IEqualityComparer<Type> TypeComparerIgnoringGenerics { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEqualityComparer{System.Type}
    content.vb: Public Shared ReadOnly Property TypeComparerIgnoringGenerics As IEqualityComparer(Of Type)
  overload: GRYLibrary.Core.Utilities.TypeComparerIgnoringGenerics*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: GRYLibrary.Core.Utilities.ReplaceUnderscoresInFile(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  commentId: M:GRYLibrary.Core.Utilities.ReplaceUnderscoresInFile(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  id: ReplaceUnderscoresInFile(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ReplaceUnderscoresInFile(String, IDictionary<String, String>)
  nameWithType: Utilities.ReplaceUnderscoresInFile(String, IDictionary<String, String>)
  fullName: GRYLibrary.Core.Utilities.ReplaceUnderscoresInFile(System.String, System.Collections.Generic.IDictionary<System.String, System.String>)
  type: Method
  source:
    id: ReplaceUnderscoresInFile
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 410
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void ReplaceUnderscoresInFile(string file, IDictionary<string, string> replacements)
    parameters:
    - id: file
      type: System.String
    - id: replacements
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    content.vb: Public Shared Sub ReplaceUnderscoresInFile(file As String, replacements As IDictionary(Of String, String))
  overload: GRYLibrary.Core.Utilities.ReplaceUnderscoresInFile*
  nameWithType.vb: Utilities.ReplaceUnderscoresInFile(String, IDictionary(Of String, String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.ReplaceUnderscoresInFile(System.String, System.Collections.Generic.IDictionary(Of System.String, System.String))
  name.vb: ReplaceUnderscoresInFile(String, IDictionary(Of String, String))
- uid: GRYLibrary.Core.Utilities.ReplaceUnderscoresInFile(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Text.Encoding)
  commentId: M:GRYLibrary.Core.Utilities.ReplaceUnderscoresInFile(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Text.Encoding)
  id: ReplaceUnderscoresInFile(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Text.Encoding)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ReplaceUnderscoresInFile(String, IDictionary<String, String>, Encoding)
  nameWithType: Utilities.ReplaceUnderscoresInFile(String, IDictionary<String, String>, Encoding)
  fullName: GRYLibrary.Core.Utilities.ReplaceUnderscoresInFile(System.String, System.Collections.Generic.IDictionary<System.String, System.String>, System.Text.Encoding)
  type: Method
  source:
    id: ReplaceUnderscoresInFile
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 415
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void ReplaceUnderscoresInFile(string file, IDictionary<string, string> replacements, Encoding encoding)
    parameters:
    - id: file
      type: System.String
    - id: replacements
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    - id: encoding
      type: System.Text.Encoding
    content.vb: Public Shared Sub ReplaceUnderscoresInFile(file As String, replacements As IDictionary(Of String, String), encoding As Encoding)
  overload: GRYLibrary.Core.Utilities.ReplaceUnderscoresInFile*
  nameWithType.vb: Utilities.ReplaceUnderscoresInFile(String, IDictionary(Of String, String), Encoding)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.ReplaceUnderscoresInFile(System.String, System.Collections.Generic.IDictionary(Of System.String, System.String), System.Text.Encoding)
  name.vb: ReplaceUnderscoresInFile(String, IDictionary(Of String, String), Encoding)
- uid: GRYLibrary.Core.Utilities.WriteToConsoleAsASCIITable(System.Collections.Generic.IList{System.Collections.Generic.IList{System.String}})
  commentId: M:GRYLibrary.Core.Utilities.WriteToConsoleAsASCIITable(System.Collections.Generic.IList{System.Collections.Generic.IList{System.String}})
  id: WriteToConsoleAsASCIITable(System.Collections.Generic.IList{System.Collections.Generic.IList{System.String}})
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: WriteToConsoleAsASCIITable(IList<IList<String>>)
  nameWithType: Utilities.WriteToConsoleAsASCIITable(IList<IList<String>>)
  fullName: GRYLibrary.Core.Utilities.WriteToConsoleAsASCIITable(System.Collections.Generic.IList<System.Collections.Generic.IList<System.String>>)
  type: Method
  source:
    id: WriteToConsoleAsASCIITable
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 424
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void WriteToConsoleAsASCIITable(IList<IList<string>> columns)
    parameters:
    - id: columns
      type: System.Collections.Generic.IList{System.Collections.Generic.IList{System.String}}
    content.vb: Public Shared Sub WriteToConsoleAsASCIITable(columns As IList(Of IList(Of String)))
  overload: GRYLibrary.Core.Utilities.WriteToConsoleAsASCIITable*
  nameWithType.vb: Utilities.WriteToConsoleAsASCIITable(IList(Of IList(Of String)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.WriteToConsoleAsASCIITable(System.Collections.Generic.IList(Of System.Collections.Generic.IList(Of System.String)))
  name.vb: WriteToConsoleAsASCIITable(IList(Of IList(Of String)))
- uid: GRYLibrary.Core.Utilities.EnumerableOfEnumerableToJaggedArray``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  commentId: M:GRYLibrary.Core.Utilities.EnumerableOfEnumerableToJaggedArray``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  id: EnumerableOfEnumerableToJaggedArray``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: EnumerableOfEnumerableToJaggedArray<T>(IEnumerable<IEnumerable<T>>)
  nameWithType: Utilities.EnumerableOfEnumerableToJaggedArray<T>(IEnumerable<IEnumerable<T>>)
  fullName: GRYLibrary.Core.Utilities.EnumerableOfEnumerableToJaggedArray<T>(System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>>)
  type: Method
  source:
    id: EnumerableOfEnumerableToJaggedArray
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 433
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static T[][] EnumerableOfEnumerableToJaggedArray<T>(IEnumerable<IEnumerable<T>> items)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
    typeParameters:
    - id: T
    return:
      type: '{T}[][]'
    content.vb: Public Shared Function EnumerableOfEnumerableToJaggedArray(Of T)(items As IEnumerable(Of IEnumerable(Of T))) As T()()
  overload: GRYLibrary.Core.Utilities.EnumerableOfEnumerableToJaggedArray*
  nameWithType.vb: Utilities.EnumerableOfEnumerableToJaggedArray(Of T)(IEnumerable(Of IEnumerable(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.EnumerableOfEnumerableToJaggedArray(Of T)(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of T)))
  name.vb: EnumerableOfEnumerableToJaggedArray(Of T)(IEnumerable(Of IEnumerable(Of T)))
- uid: GRYLibrary.Core.Utilities.JaggedArrayToTwoDimensionalArray``1(``0[][])
  commentId: M:GRYLibrary.Core.Utilities.JaggedArrayToTwoDimensionalArray``1(``0[][])
  id: JaggedArrayToTwoDimensionalArray``1(``0[][])
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: JaggedArrayToTwoDimensionalArray<T>(T[][])
  nameWithType: Utilities.JaggedArrayToTwoDimensionalArray<T>(T[][])
  fullName: GRYLibrary.Core.Utilities.JaggedArrayToTwoDimensionalArray<T>(T[][])
  type: Method
  source:
    id: JaggedArrayToTwoDimensionalArray
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 437
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static T[, ] JaggedArrayToTwoDimensionalArray<T>(T[][] items)
    parameters:
    - id: items
      type: '{T}[][]'
    typeParameters:
    - id: T
    return:
      type: '{T}[,]'
    content.vb: Public Shared Function JaggedArrayToTwoDimensionalArray(Of T)(items As T()()) As T(,)
  overload: GRYLibrary.Core.Utilities.JaggedArrayToTwoDimensionalArray*
  nameWithType.vb: Utilities.JaggedArrayToTwoDimensionalArray(Of T)(T()())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.JaggedArrayToTwoDimensionalArray(Of T)(T()())
  name.vb: JaggedArrayToTwoDimensionalArray(Of T)(T()())
- uid: GRYLibrary.Core.Utilities.IncrementGuid(System.Guid,System.Int64)
  commentId: M:GRYLibrary.Core.Utilities.IncrementGuid(System.Guid,System.Int64)
  id: IncrementGuid(System.Guid,System.Int64)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: IncrementGuid(Guid, Int64)
  nameWithType: Utilities.IncrementGuid(Guid, Int64)
  fullName: GRYLibrary.Core.Utilities.IncrementGuid(System.Guid, System.Int64)
  type: Method
  source:
    id: IncrementGuid
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 456
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  example: []
  syntax:
    content: public static Guid IncrementGuid(Guid id, long valueToIncrement = 1L)
    parameters:
    - id: id
      type: System.Guid
    - id: valueToIncrement
      type: System.Int64
    return:
      type: System.Guid
      description: "\nReturns a new <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> whose value in the last block is incremented\n"
    content.vb: Public Shared Function IncrementGuid(id As Guid, valueToIncrement As Long = 1L) As Guid
  overload: GRYLibrary.Core.Utilities.IncrementGuid*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.IncrementGuid(System.Guid,System.Numerics.BigInteger)
  commentId: M:GRYLibrary.Core.Utilities.IncrementGuid(System.Guid,System.Numerics.BigInteger)
  id: IncrementGuid(System.Guid,System.Numerics.BigInteger)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: IncrementGuid(Guid, BigInteger)
  nameWithType: Utilities.IncrementGuid(Guid, BigInteger)
  fullName: GRYLibrary.Core.Utilities.IncrementGuid(System.Guid, System.Numerics.BigInteger)
  type: Method
  source:
    id: IncrementGuid
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 460
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static Guid IncrementGuid(Guid id, BigInteger valueToIncrement)
    parameters:
    - id: id
      type: System.Guid
    - id: valueToIncrement
      type: System.Numerics.BigInteger
    return:
      type: System.Guid
    content.vb: Public Shared Function IncrementGuid(id As Guid, valueToIncrement As BigInteger) As Guid
  overload: GRYLibrary.Core.Utilities.IncrementGuid*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.JaggedArrayToEnumerableOfEnumerable``1(``0[][])
  commentId: M:GRYLibrary.Core.Utilities.JaggedArrayToEnumerableOfEnumerable``1(``0[][])
  id: JaggedArrayToEnumerableOfEnumerable``1(``0[][])
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: JaggedArrayToEnumerableOfEnumerable<T>(T[][])
  nameWithType: Utilities.JaggedArrayToEnumerableOfEnumerable<T>(T[][])
  fullName: GRYLibrary.Core.Utilities.JaggedArrayToEnumerableOfEnumerable<T>(T[][])
  type: Method
  source:
    id: JaggedArrayToEnumerableOfEnumerable
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 466
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static IEnumerable<IEnumerable<T>> JaggedArrayToEnumerableOfEnumerable<T>(T[][] items)
    parameters:
    - id: items
      type: '{T}[][]'
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
    content.vb: Public Shared Function JaggedArrayToEnumerableOfEnumerable(Of T)(items As T()()) As IEnumerable(Of IEnumerable(Of T))
  overload: GRYLibrary.Core.Utilities.JaggedArrayToEnumerableOfEnumerable*
  nameWithType.vb: Utilities.JaggedArrayToEnumerableOfEnumerable(Of T)(T()())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.JaggedArrayToEnumerableOfEnumerable(Of T)(T()())
  name.vb: JaggedArrayToEnumerableOfEnumerable(Of T)(T()())
- uid: GRYLibrary.Core.Utilities.TwoDimensionalArrayToJaggedArray``1(``0[0:,0:])
  commentId: M:GRYLibrary.Core.Utilities.TwoDimensionalArrayToJaggedArray``1(``0[0:,0:])
  id: TwoDimensionalArrayToJaggedArray``1(``0[0:,0:])
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: TwoDimensionalArrayToJaggedArray<T>(T[,])
  nameWithType: Utilities.TwoDimensionalArrayToJaggedArray<T>(T[,])
  fullName: GRYLibrary.Core.Utilities.TwoDimensionalArrayToJaggedArray<T>(T[,])
  type: Method
  source:
    id: TwoDimensionalArrayToJaggedArray
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 480
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static T[][] TwoDimensionalArrayToJaggedArray<T>(T[, ] items)
    parameters:
    - id: items
      type: '{T}[,]'
    typeParameters:
    - id: T
    return:
      type: '{T}[][]'
    content.vb: Public Shared Function TwoDimensionalArrayToJaggedArray(Of T)(items As T(,)) As T()()
  overload: GRYLibrary.Core.Utilities.TwoDimensionalArrayToJaggedArray*
  nameWithType.vb: Utilities.TwoDimensionalArrayToJaggedArray(Of T)(T(,))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.TwoDimensionalArrayToJaggedArray(Of T)(T(,))
  name.vb: TwoDimensionalArrayToJaggedArray(Of T)(T(,))
- uid: GRYLibrary.Core.Utilities.EnsureFileExists(System.String,System.Boolean)
  commentId: M:GRYLibrary.Core.Utilities.EnsureFileExists(System.String,System.Boolean)
  id: EnsureFileExists(System.String,System.Boolean)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: EnsureFileExists(String, Boolean)
  nameWithType: Utilities.EnsureFileExists(String, Boolean)
  fullName: GRYLibrary.Core.Utilities.EnsureFileExists(System.String, System.Boolean)
  type: Method
  source:
    id: EnsureFileExists
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 499
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void EnsureFileExists(string path, bool createDirectoryIfRequired = false)
    parameters:
    - id: path
      type: System.String
    - id: createDirectoryIfRequired
      type: System.Boolean
    content.vb: Public Shared Sub EnsureFileExists(path As String, createDirectoryIfRequired As Boolean = False)
  overload: GRYLibrary.Core.Utilities.EnsureFileExists*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.EnsureDirectoryExists(System.String)
  commentId: M:GRYLibrary.Core.Utilities.EnsureDirectoryExists(System.String)
  id: EnsureDirectoryExists(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: EnsureDirectoryExists(String)
  nameWithType: Utilities.EnsureDirectoryExists(String)
  fullName: GRYLibrary.Core.Utilities.EnsureDirectoryExists(System.String)
  type: Method
  source:
    id: EnsureDirectoryExists
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 512
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void EnsureDirectoryExists(string path)
    parameters:
    - id: path
      type: System.String
    content.vb: Public Shared Sub EnsureDirectoryExists(path As String)
  overload: GRYLibrary.Core.Utilities.EnsureDirectoryExists*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.DurationToUserFriendlyString(System.TimeSpan)
  commentId: M:GRYLibrary.Core.Utilities.DurationToUserFriendlyString(System.TimeSpan)
  id: DurationToUserFriendlyString(System.TimeSpan)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: DurationToUserFriendlyString(TimeSpan)
  nameWithType: Utilities.DurationToUserFriendlyString(TimeSpan)
  fullName: GRYLibrary.Core.Utilities.DurationToUserFriendlyString(System.TimeSpan)
  type: Method
  source:
    id: DurationToUserFriendlyString
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 520
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string DurationToUserFriendlyString(TimeSpan timespan)
    parameters:
    - id: timespan
      type: System.TimeSpan
    return:
      type: System.String
    content.vb: Public Shared Function DurationToUserFriendlyString(timespan As TimeSpan) As String
  overload: GRYLibrary.Core.Utilities.DurationToUserFriendlyString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.EnsureDirectoryDoesNotExist(System.String)
  commentId: M:GRYLibrary.Core.Utilities.EnsureDirectoryDoesNotExist(System.String)
  id: EnsureDirectoryDoesNotExist(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: EnsureDirectoryDoesNotExist(String)
  nameWithType: Utilities.EnsureDirectoryDoesNotExist(String)
  fullName: GRYLibrary.Core.Utilities.EnsureDirectoryDoesNotExist(System.String)
  type: Method
  source:
    id: EnsureDirectoryDoesNotExist
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 525
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void EnsureDirectoryDoesNotExist(string path)
    parameters:
    - id: path
      type: System.String
    content.vb: Public Shared Sub EnsureDirectoryDoesNotExist(path As String)
  overload: GRYLibrary.Core.Utilities.EnsureDirectoryDoesNotExist*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.EnsureFileDoesNotExist(System.String)
  commentId: M:GRYLibrary.Core.Utilities.EnsureFileDoesNotExist(System.String)
  id: EnsureFileDoesNotExist(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: EnsureFileDoesNotExist(String)
  nameWithType: Utilities.EnsureFileDoesNotExist(String)
  fullName: GRYLibrary.Core.Utilities.EnsureFileDoesNotExist(System.String)
  type: Method
  source:
    id: EnsureFileDoesNotExist
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 533
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void EnsureFileDoesNotExist(string path)
    parameters:
    - id: path
      type: System.String
    content.vb: Public Shared Sub EnsureFileDoesNotExist(path As String)
  overload: GRYLibrary.Core.Utilities.EnsureFileDoesNotExist*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.TypeArrayToString(System.Type[])
  commentId: M:GRYLibrary.Core.Utilities.TypeArrayToString(System.Type[])
  id: TypeArrayToString(System.Type[])
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: TypeArrayToString(Type[])
  nameWithType: Utilities.TypeArrayToString(Type[])
  fullName: GRYLibrary.Core.Utilities.TypeArrayToString(System.Type[])
  type: Method
  source:
    id: TypeArrayToString
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 540
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string TypeArrayToString(Type[] types)
    parameters:
    - id: types
      type: System.Type[]
    return:
      type: System.String
    content.vb: Public Shared Function TypeArrayToString(types As Type()) As String
  overload: GRYLibrary.Core.Utilities.TypeArrayToString*
  nameWithType.vb: Utilities.TypeArrayToString(Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.TypeArrayToString(System.Type())
  name.vb: TypeArrayToString(Type())
- uid: GRYLibrary.Core.Utilities.CopyFolderAcrossVolumes(System.String,System.String)
  commentId: M:GRYLibrary.Core.Utilities.CopyFolderAcrossVolumes(System.String,System.String)
  id: CopyFolderAcrossVolumes(System.String,System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: CopyFolderAcrossVolumes(String, String)
  nameWithType: Utilities.CopyFolderAcrossVolumes(String, String)
  fullName: GRYLibrary.Core.Utilities.CopyFolderAcrossVolumes(System.String, System.String)
  type: Method
  source:
    id: CopyFolderAcrossVolumes
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 544
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void CopyFolderAcrossVolumes(string sourceFolder, string destinationFolder)
    parameters:
    - id: sourceFolder
      type: System.String
    - id: destinationFolder
      type: System.String
    content.vb: Public Shared Sub CopyFolderAcrossVolumes(sourceFolder As String, destinationFolder As String)
  overload: GRYLibrary.Core.Utilities.CopyFolderAcrossVolumes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.DeleteAllEmptyFolderTransitively(System.String,System.Boolean)
  commentId: M:GRYLibrary.Core.Utilities.DeleteAllEmptyFolderTransitively(System.String,System.Boolean)
  id: DeleteAllEmptyFolderTransitively(System.String,System.Boolean)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: DeleteAllEmptyFolderTransitively(String, Boolean)
  nameWithType: Utilities.DeleteAllEmptyFolderTransitively(String, Boolean)
  fullName: GRYLibrary.Core.Utilities.DeleteAllEmptyFolderTransitively(System.String, System.Boolean)
  type: Method
  source:
    id: DeleteAllEmptyFolderTransitively
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 563
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void DeleteAllEmptyFolderTransitively(string folder, bool deleteFolderItselfIfAlsoEmpty = false)
    parameters:
    - id: folder
      type: System.String
    - id: deleteFolderItselfIfAlsoEmpty
      type: System.Boolean
    content.vb: Public Shared Sub DeleteAllEmptyFolderTransitively(folder As String, deleteFolderItselfIfAlsoEmpty As Boolean = False)
  overload: GRYLibrary.Core.Utilities.DeleteAllEmptyFolderTransitively*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.MoveFolderAcrossVolumes(System.String,System.String,System.Boolean)
  commentId: M:GRYLibrary.Core.Utilities.MoveFolderAcrossVolumes(System.String,System.String,System.Boolean)
  id: MoveFolderAcrossVolumes(System.String,System.String,System.Boolean)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: MoveFolderAcrossVolumes(String, String, Boolean)
  nameWithType: Utilities.MoveFolderAcrossVolumes(String, String, Boolean)
  fullName: GRYLibrary.Core.Utilities.MoveFolderAcrossVolumes(System.String, System.String, System.Boolean)
  type: Method
  source:
    id: MoveFolderAcrossVolumes
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 572
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void MoveFolderAcrossVolumes(string sourceFolder, string destinationFolder, bool deleteSourceFolderCompletely = true)
    parameters:
    - id: sourceFolder
      type: System.String
    - id: destinationFolder
      type: System.String
    - id: deleteSourceFolderCompletely
      type: System.Boolean
    content.vb: Public Shared Sub MoveFolderAcrossVolumes(sourceFolder As String, destinationFolder As String, deleteSourceFolderCompletely As Boolean = True)
  overload: GRYLibrary.Core.Utilities.MoveFolderAcrossVolumes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.DeleteFolder(System.String,System.Boolean)
  commentId: M:GRYLibrary.Core.Utilities.DeleteFolder(System.String,System.Boolean)
  id: DeleteFolder(System.String,System.Boolean)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: DeleteFolder(String, Boolean)
  nameWithType: Utilities.DeleteFolder(String, Boolean)
  fullName: GRYLibrary.Core.Utilities.DeleteFolder(System.String, System.Boolean)
  type: Method
  source:
    id: DeleteFolder
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 578
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void DeleteFolder(string folder, bool deleteSourceFolderCompletely = true)
    parameters:
    - id: folder
      type: System.String
    - id: deleteSourceFolderCompletely
      type: System.Boolean
    content.vb: Public Shared Sub DeleteFolder(folder As String, deleteSourceFolderCompletely As Boolean = True)
  overload: GRYLibrary.Core.Utilities.DeleteFolder*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.TwoDimensionalArrayToString``1(``0[0:,0:])
  commentId: M:GRYLibrary.Core.Utilities.TwoDimensionalArrayToString``1(``0[0:,0:])
  id: TwoDimensionalArrayToString``1(``0[0:,0:])
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: TwoDimensionalArrayToString<T>(T[,])
  nameWithType: Utilities.TwoDimensionalArrayToString<T>(T[,])
  fullName: GRYLibrary.Core.Utilities.TwoDimensionalArrayToString<T>(T[,])
  type: Method
  source:
    id: TwoDimensionalArrayToString
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 589
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string TwoDimensionalArrayToString<T>(T[, ] array)
    parameters:
    - id: array
      type: '{T}[,]'
    typeParameters:
    - id: T
    return:
      type: System.String
    content.vb: Public Shared Function TwoDimensionalArrayToString(Of T)(array As T(,)) As String
  overload: GRYLibrary.Core.Utilities.TwoDimensionalArrayToString*
  nameWithType.vb: Utilities.TwoDimensionalArrayToString(Of T)(T(,))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.TwoDimensionalArrayToString(Of T)(T(,))
  name.vb: TwoDimensionalArrayToString(Of T)(T(,))
- uid: GRYLibrary.Core.Utilities.TwoDimensionalArrayEquals``1(``0[0:,0:],``0[0:,0:])
  commentId: M:GRYLibrary.Core.Utilities.TwoDimensionalArrayEquals``1(``0[0:,0:],``0[0:,0:])
  id: TwoDimensionalArrayEquals``1(``0[0:,0:],``0[0:,0:])
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: TwoDimensionalArrayEquals<T>(T[,], T[,])
  nameWithType: Utilities.TwoDimensionalArrayEquals<T>(T[,], T[,])
  fullName: GRYLibrary.Core.Utilities.TwoDimensionalArrayEquals<T>(T[,], T[,])
  type: Method
  source:
    id: TwoDimensionalArrayEquals
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 594
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool TwoDimensionalArrayEquals<T>(T[, ] array1, T[, ] array2)
    parameters:
    - id: array1
      type: '{T}[,]'
    - id: array2
      type: '{T}[,]'
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function TwoDimensionalArrayEquals(Of T)(array1 As T(,), array2 As T(,)) As Boolean
  overload: GRYLibrary.Core.Utilities.TwoDimensionalArrayEquals*
  nameWithType.vb: Utilities.TwoDimensionalArrayEquals(Of T)(T(,), T(,))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.TwoDimensionalArrayEquals(Of T)(T(,), T(,))
  name.vb: TwoDimensionalArrayEquals(Of T)(T(,), T(,))
- uid: GRYLibrary.Core.Utilities.DeleteContentOfFolder(System.String)
  commentId: M:GRYLibrary.Core.Utilities.DeleteContentOfFolder(System.String)
  id: DeleteContentOfFolder(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: DeleteContentOfFolder(String)
  nameWithType: Utilities.DeleteContentOfFolder(String)
  fullName: GRYLibrary.Core.Utilities.DeleteContentOfFolder(System.String)
  type: Method
  source:
    id: DeleteContentOfFolder
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 599
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void DeleteContentOfFolder(string folder)
    parameters:
    - id: folder
      type: System.String
    content.vb: Public Shared Sub DeleteContentOfFolder(folder As String)
  overload: GRYLibrary.Core.Utilities.DeleteContentOfFolder*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes(System.String,System.String)
  commentId: M:GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes(System.String,System.String)
  id: MoveContentOfFoldersAcrossVolumes(System.String,System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: MoveContentOfFoldersAcrossVolumes(String, String)
  nameWithType: Utilities.MoveContentOfFoldersAcrossVolumes(String, String)
  fullName: GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes(System.String, System.String)
  type: Method
  source:
    id: MoveContentOfFoldersAcrossVolumes
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 656
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void MoveContentOfFoldersAcrossVolumes(string sourceFolder, string targetFolder)
    parameters:
    - id: sourceFolder
      type: System.String
    - id: targetFolder
      type: System.String
    content.vb: Public Shared Sub MoveContentOfFoldersAcrossVolumes(sourceFolder As String, targetFolder As String)
  overload: GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes(System.String,System.String,GRYLibrary.Core.FileSelector,System.Boolean)
  commentId: M:GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes(System.String,System.String,GRYLibrary.Core.FileSelector,System.Boolean)
  id: MoveContentOfFoldersAcrossVolumes(System.String,System.String,GRYLibrary.Core.FileSelector,System.Boolean)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: MoveContentOfFoldersAcrossVolumes(String, String, FileSelector, Boolean)
  nameWithType: Utilities.MoveContentOfFoldersAcrossVolumes(String, String, FileSelector, Boolean)
  fullName: GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes(System.String, System.String, GRYLibrary.Core.FileSelector, System.Boolean)
  type: Method
  source:
    id: MoveContentOfFoldersAcrossVolumes
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 660
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void MoveContentOfFoldersAcrossVolumes(string sourceFolder, string targetFolder, FileSelector fileSelector, bool deleteAlreadyExistingFilesWithoutCopy = false)
    parameters:
    - id: sourceFolder
      type: System.String
    - id: targetFolder
      type: System.String
    - id: fileSelector
      type: GRYLibrary.Core.FileSelector
    - id: deleteAlreadyExistingFilesWithoutCopy
      type: System.Boolean
    content.vb: Public Shared Sub MoveContentOfFoldersAcrossVolumes(sourceFolder As String, targetFolder As String, fileSelector As FileSelector, deleteAlreadyExistingFilesWithoutCopy As Boolean = False)
  overload: GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes(System.String,System.String,System.Func{System.String,System.Boolean},System.Boolean)
  commentId: M:GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes(System.String,System.String,System.Func{System.String,System.Boolean},System.Boolean)
  id: MoveContentOfFoldersAcrossVolumes(System.String,System.String,System.Func{System.String,System.Boolean},System.Boolean)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: MoveContentOfFoldersAcrossVolumes(String, String, Func<String, Boolean>, Boolean)
  nameWithType: Utilities.MoveContentOfFoldersAcrossVolumes(String, String, Func<String, Boolean>, Boolean)
  fullName: GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes(System.String, System.String, System.Func<System.String, System.Boolean>, System.Boolean)
  type: Method
  source:
    id: MoveContentOfFoldersAcrossVolumes
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 664
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void MoveContentOfFoldersAcrossVolumes(string sourceFolder, string targetFolder, Func<string, bool> fileSelectorPredicate, bool deleteAlreadyExistingFilesWithoutCopy = false)
    parameters:
    - id: sourceFolder
      type: System.String
    - id: targetFolder
      type: System.String
    - id: fileSelectorPredicate
      type: System.Func{System.String,System.Boolean}
    - id: deleteAlreadyExistingFilesWithoutCopy
      type: System.Boolean
    content.vb: Public Shared Sub MoveContentOfFoldersAcrossVolumes(sourceFolder As String, targetFolder As String, fileSelectorPredicate As Func(Of String, Boolean), deleteAlreadyExistingFilesWithoutCopy As Boolean = False)
  overload: GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes*
  nameWithType.vb: Utilities.MoveContentOfFoldersAcrossVolumes(String, String, Func(Of String, Boolean), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes(System.String, System.String, System.Func(Of System.String, System.Boolean), System.Boolean)
  name.vb: MoveContentOfFoldersAcrossVolumes(String, String, Func(Of String, Boolean), Boolean)
- uid: GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes(System.String,System.String,GRYLibrary.Core.FileSelector,System.Action{System.Exception},System.Boolean)
  commentId: M:GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes(System.String,System.String,GRYLibrary.Core.FileSelector,System.Action{System.Exception},System.Boolean)
  id: MoveContentOfFoldersAcrossVolumes(System.String,System.String,GRYLibrary.Core.FileSelector,System.Action{System.Exception},System.Boolean)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: MoveContentOfFoldersAcrossVolumes(String, String, FileSelector, Action<Exception>, Boolean)
  nameWithType: Utilities.MoveContentOfFoldersAcrossVolumes(String, String, FileSelector, Action<Exception>, Boolean)
  fullName: GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes(System.String, System.String, GRYLibrary.Core.FileSelector, System.Action<System.Exception>, System.Boolean)
  type: Method
  source:
    id: MoveContentOfFoldersAcrossVolumes
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 669
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void MoveContentOfFoldersAcrossVolumes(string sourceFolder, string targetFolder, FileSelector fileSelector, Action<Exception> errorHandler, bool deleteAlreadyExistingFilesWithoutCopy = false)
    parameters:
    - id: sourceFolder
      type: System.String
    - id: targetFolder
      type: System.String
    - id: fileSelector
      type: GRYLibrary.Core.FileSelector
    - id: errorHandler
      type: System.Action{System.Exception}
    - id: deleteAlreadyExistingFilesWithoutCopy
      type: System.Boolean
    content.vb: Public Shared Sub MoveContentOfFoldersAcrossVolumes(sourceFolder As String, targetFolder As String, fileSelector As FileSelector, errorHandler As Action(Of Exception), deleteAlreadyExistingFilesWithoutCopy As Boolean = False)
  overload: GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes*
  nameWithType.vb: Utilities.MoveContentOfFoldersAcrossVolumes(String, String, FileSelector, Action(Of Exception), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes(System.String, System.String, GRYLibrary.Core.FileSelector, System.Action(Of System.Exception), System.Boolean)
  name.vb: MoveContentOfFoldersAcrossVolumes(String, String, FileSelector, Action(Of Exception), Boolean)
- uid: GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes(System.String,System.String,System.Func{System.String,System.Boolean},System.Action{System.Exception},System.Boolean)
  commentId: M:GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes(System.String,System.String,System.Func{System.String,System.Boolean},System.Action{System.Exception},System.Boolean)
  id: MoveContentOfFoldersAcrossVolumes(System.String,System.String,System.Func{System.String,System.Boolean},System.Action{System.Exception},System.Boolean)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: MoveContentOfFoldersAcrossVolumes(String, String, Func<String, Boolean>, Action<Exception>, Boolean)
  nameWithType: Utilities.MoveContentOfFoldersAcrossVolumes(String, String, Func<String, Boolean>, Action<Exception>, Boolean)
  fullName: GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes(System.String, System.String, System.Func<System.String, System.Boolean>, System.Action<System.Exception>, System.Boolean)
  type: Method
  source:
    id: MoveContentOfFoldersAcrossVolumes
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 681
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  summary: "\nMoves the content of <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFolder</code> to <code data-dev-comment-type=\"paramref\" class=\"paramref\">targetFolder</code>.\n"
  remarks: "\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">deleteAlreadyExistingFilesWithoutCopy</code>==true then the files in <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFolder</code> which do already exist in <code data-dev-comment-type=\"paramref\" class=\"paramref\">targetFolder</code> will be deleted without copying them and without any backup. (Only filepath/-name will be compared. The content of the file does not matter for this comparison.)\nThis function preserves the directory-structure of <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFolder</code>.\nThis function ignores empty directories in <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFolder</code>.\n"
  example: []
  syntax:
    content: public static void MoveContentOfFoldersAcrossVolumes(string sourceFolder, string targetFolder, Func<string, bool> fileSelectorPredicate, Action<Exception> errorHandler, bool deleteAlreadyExistingFilesWithoutCopy = false)
    parameters:
    - id: sourceFolder
      type: System.String
    - id: targetFolder
      type: System.String
    - id: fileSelectorPredicate
      type: System.Func{System.String,System.Boolean}
    - id: errorHandler
      type: System.Action{System.Exception}
    - id: deleteAlreadyExistingFilesWithoutCopy
      type: System.Boolean
    content.vb: Public Shared Sub MoveContentOfFoldersAcrossVolumes(sourceFolder As String, targetFolder As String, fileSelectorPredicate As Func(Of String, Boolean), errorHandler As Action(Of Exception), deleteAlreadyExistingFilesWithoutCopy As Boolean = False)
  overload: GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes*
  nameWithType.vb: Utilities.MoveContentOfFoldersAcrossVolumes(String, String, Func(Of String, Boolean), Action(Of Exception), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes(System.String, System.String, System.Func(Of System.String, System.Boolean), System.Action(Of System.Exception), System.Boolean)
  name.vb: MoveContentOfFoldersAcrossVolumes(String, String, Func(Of String, Boolean), Action(Of Exception), Boolean)
- uid: GRYLibrary.Core.Utilities.ForEachFileAndDirectoryTransitively(System.String,System.Action{System.String,System.Object},System.Action{System.String,System.Object},System.Boolean,System.Object,System.Object)
  commentId: M:GRYLibrary.Core.Utilities.ForEachFileAndDirectoryTransitively(System.String,System.Action{System.String,System.Object},System.Action{System.String,System.Object},System.Boolean,System.Object,System.Object)
  id: ForEachFileAndDirectoryTransitively(System.String,System.Action{System.String,System.Object},System.Action{System.String,System.Object},System.Boolean,System.Object,System.Object)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ForEachFileAndDirectoryTransitively(String, Action<String, Object>, Action<String, Object>, Boolean, Object, Object)
  nameWithType: Utilities.ForEachFileAndDirectoryTransitively(String, Action<String, Object>, Action<String, Object>, Boolean, Object, Object)
  fullName: GRYLibrary.Core.Utilities.ForEachFileAndDirectoryTransitively(System.String, System.Action<System.String, System.Object>, System.Action<System.String, System.Object>, System.Boolean, System.Object, System.Object)
  type: Method
  source:
    id: ForEachFileAndDirectoryTransitively
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 716
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void ForEachFileAndDirectoryTransitively(string directory, Action<string, object> directoryAction, Action<string, object> fileAction, bool ignoreErrors = false, object argumentForFileAction = null, object argumentForDirectoryAction = null)
    parameters:
    - id: directory
      type: System.String
    - id: directoryAction
      type: System.Action{System.String,System.Object}
    - id: fileAction
      type: System.Action{System.String,System.Object}
    - id: ignoreErrors
      type: System.Boolean
    - id: argumentForFileAction
      type: System.Object
    - id: argumentForDirectoryAction
      type: System.Object
    content.vb: Public Shared Sub ForEachFileAndDirectoryTransitively(directory As String, directoryAction As Action(Of String, Object), fileAction As Action(Of String, Object), ignoreErrors As Boolean = False, argumentForFileAction As Object = Nothing, argumentForDirectoryAction As Object = Nothing)
  overload: GRYLibrary.Core.Utilities.ForEachFileAndDirectoryTransitively*
  nameWithType.vb: Utilities.ForEachFileAndDirectoryTransitively(String, Action(Of String, Object), Action(Of String, Object), Boolean, Object, Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.ForEachFileAndDirectoryTransitively(System.String, System.Action(Of System.String, System.Object), System.Action(Of System.String, System.Object), System.Boolean, System.Object, System.Object)
  name.vb: ForEachFileAndDirectoryTransitively(String, Action(Of String, Object), Action(Of String, Object), Boolean, Object, Object)
- uid: GRYLibrary.Core.Utilities.RemoveContentOfFolder(System.String)
  commentId: M:GRYLibrary.Core.Utilities.RemoveContentOfFolder(System.String)
  id: RemoveContentOfFolder(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: RemoveContentOfFolder(String)
  nameWithType: Utilities.RemoveContentOfFolder(String)
  fullName: GRYLibrary.Core.Utilities.RemoveContentOfFolder(System.String)
  type: Method
  source:
    id: RemoveContentOfFolder
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 749
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void RemoveContentOfFolder(string folder)
    parameters:
    - id: folder
      type: System.String
    content.vb: Public Shared Sub RemoveContentOfFolder(folder As String)
  overload: GRYLibrary.Core.Utilities.RemoveContentOfFolder*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.RunAllConcurrentAndReturnAllResults``1(System.Collections.Generic.ISet{System.Func{``0}},System.Int32)
  commentId: M:GRYLibrary.Core.Utilities.RunAllConcurrentAndReturnAllResults``1(System.Collections.Generic.ISet{System.Func{``0}},System.Int32)
  id: RunAllConcurrentAndReturnAllResults``1(System.Collections.Generic.ISet{System.Func{``0}},System.Int32)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: RunAllConcurrentAndReturnAllResults<T>(ISet<Func<T>>, Int32)
  nameWithType: Utilities.RunAllConcurrentAndReturnAllResults<T>(ISet<Func<T>>, Int32)
  fullName: GRYLibrary.Core.Utilities.RunAllConcurrentAndReturnAllResults<T>(System.Collections.Generic.ISet<System.Func<T>>, System.Int32)
  type: Method
  source:
    id: RunAllConcurrentAndReturnAllResults
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 766
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  summary: "\nStarts all <xref href=\"System.Func%601\" data-throw-if-not-resolved=\"false\"></xref>-objects in <code data-dev-comment-type=\"paramref\" class=\"paramref\">functions</code> concurrent and return all results which did not throw an exception.\n"
  example: []
  syntax:
    content: public static ISet<Tuple<Func<T>, T, Exception>> RunAllConcurrentAndReturnAllResults<T>(this ISet<Func<T>> functions, int maximalDegreeOfParallelism = 4)
    parameters:
    - id: functions
      type: System.Collections.Generic.ISet{System.Func{{T}}}
    - id: maximalDegreeOfParallelism
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.ISet{System.Tuple{System.Func{{T}},{T},System.Exception}}
      description: The results of all finished <code data-dev-comment-type="paramref" class="paramref">functions</code>-methods with their results.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RunAllConcurrentAndReturnAllResults(Of T)(functions As ISet(Of Func(Of T)), maximalDegreeOfParallelism As Integer = 4) As ISet(Of Tuple(Of Func(Of T), T, Exception))
  overload: GRYLibrary.Core.Utilities.RunAllConcurrentAndReturnAllResults*
  nameWithType.vb: Utilities.RunAllConcurrentAndReturnAllResults(Of T)(ISet(Of Func(Of T)), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.RunAllConcurrentAndReturnAllResults(Of T)(System.Collections.Generic.ISet(Of System.Func(Of T)), System.Int32)
  name.vb: RunAllConcurrentAndReturnAllResults(Of T)(ISet(Of Func(Of T)), Int32)
- uid: GRYLibrary.Core.Utilities.RunAllConcurrentAndReturnFirstResult``1(System.Collections.Generic.ISet{System.Func{``0}},System.Int32)
  commentId: M:GRYLibrary.Core.Utilities.RunAllConcurrentAndReturnFirstResult``1(System.Collections.Generic.ISet{System.Func{``0}},System.Int32)
  id: RunAllConcurrentAndReturnFirstResult``1(System.Collections.Generic.ISet{System.Func{``0}},System.Int32)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: RunAllConcurrentAndReturnFirstResult<T>(ISet<Func<T>>, Int32)
  nameWithType: Utilities.RunAllConcurrentAndReturnFirstResult<T>(ISet<Func<T>>, Int32)
  fullName: GRYLibrary.Core.Utilities.RunAllConcurrentAndReturnFirstResult<T>(System.Collections.Generic.ISet<System.Func<T>>, System.Int32)
  type: Method
  source:
    id: RunAllConcurrentAndReturnFirstResult
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 790
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  summary: "\nStarts all <xref href=\"System.Threading.ThreadStart\" data-throw-if-not-resolved=\"false\"></xref>-objects in <code data-dev-comment-type=\"paramref\" class=\"paramref\">functions</code> concurrent and return the result of the first execution which does not throw an exception.\nWarning: This function is not implemented yet.\n"
  example: []
  syntax:
    content: public static T RunAllConcurrentAndReturnFirstResult<T>(this ISet<Func<T>> functions, int maximalDegreeOfParallelism = 4)
    parameters:
    - id: functions
      type: System.Collections.Generic.ISet{System.Func{{T}}}
    - id: maximalDegreeOfParallelism
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: The result of the first finished <code data-dev-comment-type="paramref" class="paramref">functions</code>-method.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RunAllConcurrentAndReturnFirstResult(Of T)(functions As ISet(Of Func(Of T)), maximalDegreeOfParallelism As Integer = 4) As T
  overload: GRYLibrary.Core.Utilities.RunAllConcurrentAndReturnFirstResult*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If <code data-dev-comment-type="paramref" class="paramref">functions</code> is empty.
  - type: System.Exception
    commentId: T:System.Exception
    description: If every <code data-dev-comment-type="paramref" class="paramref">functions</code>-method throws an exception.
  nameWithType.vb: Utilities.RunAllConcurrentAndReturnFirstResult(Of T)(ISet(Of Func(Of T)), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.RunAllConcurrentAndReturnFirstResult(Of T)(System.Collections.Generic.ISet(Of System.Func(Of T)), System.Int32)
  name.vb: RunAllConcurrentAndReturnFirstResult(Of T)(ISet(Of Func(Of T)), Int32)
- uid: GRYLibrary.Core.Utilities.ToCaseInsensitiveSet(System.Collections.Generic.ISet{System.String})
  commentId: M:GRYLibrary.Core.Utilities.ToCaseInsensitiveSet(System.Collections.Generic.ISet{System.String})
  id: ToCaseInsensitiveSet(System.Collections.Generic.ISet{System.String})
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ToCaseInsensitiveSet(ISet<String>)
  nameWithType: Utilities.ToCaseInsensitiveSet(ISet<String>)
  fullName: GRYLibrary.Core.Utilities.ToCaseInsensitiveSet(System.Collections.Generic.ISet<System.String>)
  type: Method
  source:
    id: ToCaseInsensitiveSet
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 876
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static ISet<string> ToCaseInsensitiveSet(this ISet<string> input)
    parameters:
    - id: input
      type: System.Collections.Generic.ISet{System.String}
    return:
      type: System.Collections.Generic.ISet{System.String}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToCaseInsensitiveSet(input As ISet(Of String)) As ISet(Of String)
  overload: GRYLibrary.Core.Utilities.ToCaseInsensitiveSet*
  nameWithType.vb: Utilities.ToCaseInsensitiveSet(ISet(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.ToCaseInsensitiveSet(System.Collections.Generic.ISet(Of System.String))
  name.vb: ToCaseInsensitiveSet(ISet(Of String))
- uid: GRYLibrary.Core.Utilities.ToDynamic(System.Object)
  commentId: M:GRYLibrary.Core.Utilities.ToDynamic(System.Object)
  id: ToDynamic(System.Object)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ToDynamic(Object)
  nameWithType: Utilities.ToDynamic(Object)
  fullName: GRYLibrary.Core.Utilities.ToDynamic(System.Object)
  type: Method
  source:
    id: ToDynamic
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 881
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static dynamic ToDynamic(this object value)
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Object
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDynamic(value As Object) As Object
  overload: GRYLibrary.Core.Utilities.ToDynamic*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.DeepClone``1(``0)
  commentId: M:GRYLibrary.Core.Utilities.DeepClone``1(``0)
  id: DeepClone``1(``0)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: DeepClone<T>(T)
  nameWithType: Utilities.DeepClone<T>(T)
  fullName: GRYLibrary.Core.Utilities.DeepClone<T>(T)
  type: Method
  source:
    id: DeepClone
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 892
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static T DeepClone<T>(this T object)
    parameters:
    - id: object
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DeepClone(Of T)(object As T) As T
  overload: GRYLibrary.Core.Utilities.DeepClone*
  nameWithType.vb: Utilities.DeepClone(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
- uid: GRYLibrary.Core.Utilities.GetTotalFreeSpace(System.String)
  commentId: M:GRYLibrary.Core.Utilities.GetTotalFreeSpace(System.String)
  id: GetTotalFreeSpace(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GetTotalFreeSpace(String)
  nameWithType: Utilities.GetTotalFreeSpace(String)
  fullName: GRYLibrary.Core.Utilities.GetTotalFreeSpace(System.String)
  type: Method
  source:
    id: GetTotalFreeSpace
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 899
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static long GetTotalFreeSpace(string driveName)
    parameters:
    - id: driveName
      type: System.String
    return:
      type: System.Int64
    content.vb: Public Shared Function GetTotalFreeSpace(driveName As String) As Long
  overload: GRYLibrary.Core.Utilities.GetTotalFreeSpace*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.PersistToDisk``1(``0,System.String)
  commentId: M:GRYLibrary.Core.Utilities.PersistToDisk``1(``0,System.String)
  id: PersistToDisk``1(``0,System.String)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: PersistToDisk<T>(T, String)
  nameWithType: Utilities.PersistToDisk<T>(T, String)
  fullName: GRYLibrary.Core.Utilities.PersistToDisk<T>(T, System.String)
  type: Method
  source:
    id: PersistToDisk
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 910
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: >-
      public static SimpleObjectPersistence<T> PersistToDisk<T>(this T object, string file)

          where T : new()
    parameters:
    - id: object
      type: '{T}'
    - id: file
      type: System.String
    typeParameters:
    - id: T
    return:
      type: GRYLibrary.Core.SimpleObjectPersistence{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PersistToDisk(Of T As New)(object As T, file As String) As SimpleObjectPersistence(Of T)
  overload: GRYLibrary.Core.Utilities.PersistToDisk*
  nameWithType.vb: Utilities.PersistToDisk(Of T)(T, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.PersistToDisk(Of T)(T, System.String)
  name.vb: PersistToDisk(Of T)(T, String)
- uid: GRYLibrary.Core.Utilities.LoadFromDisk``1(System.String)
  commentId: M:GRYLibrary.Core.Utilities.LoadFromDisk``1(System.String)
  id: LoadFromDisk``1(System.String)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: LoadFromDisk<T>(String)
  nameWithType: Utilities.LoadFromDisk<T>(String)
  fullName: GRYLibrary.Core.Utilities.LoadFromDisk<T>(System.String)
  type: Method
  source:
    id: LoadFromDisk
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 916
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: >-
      public static SimpleObjectPersistence<T> LoadFromDisk<T>(this string file)

          where T : new()
    parameters:
    - id: file
      type: System.String
    typeParameters:
    - id: T
    return:
      type: GRYLibrary.Core.SimpleObjectPersistence{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LoadFromDisk(Of T As New)(file As String) As SimpleObjectPersistence(Of T)
  overload: GRYLibrary.Core.Utilities.LoadFromDisk*
  nameWithType.vb: Utilities.LoadFromDisk(Of T)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.LoadFromDisk(Of T)(System.String)
  name.vb: LoadFromDisk(Of T)(String)
- uid: GRYLibrary.Core.Utilities.GetCommandLineArguments
  commentId: M:GRYLibrary.Core.Utilities.GetCommandLineArguments
  id: GetCommandLineArguments
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GetCommandLineArguments()
  nameWithType: Utilities.GetCommandLineArguments()
  fullName: GRYLibrary.Core.Utilities.GetCommandLineArguments()
  type: Method
  source:
    id: GetCommandLineArguments
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 924
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  remarks: It is guaranteed that the result does not have leading or trailing whitespaces.
  example: []
  syntax:
    content: public static string GetCommandLineArguments()
    return:
      type: System.String
      description: Returns the command line arguments of the current executed program.
    content.vb: Public Shared Function GetCommandLineArguments As String
  overload: GRYLibrary.Core.Utilities.GetCommandLineArguments*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ToPascalCase(System.String)
  commentId: M:GRYLibrary.Core.Utilities.ToPascalCase(System.String)
  id: ToPascalCase(System.String)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ToPascalCase(String)
  nameWithType: Utilities.ToPascalCase(String)
  fullName: GRYLibrary.Core.Utilities.ToPascalCase(System.String)
  type: Method
  source:
    id: ToPascalCase
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 945
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string ToPascalCase(this string input)
    parameters:
    - id: input
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToPascalCase(input As String) As String
  overload: GRYLibrary.Core.Utilities.ToPascalCase*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ToCamelCase(System.String)
  commentId: M:GRYLibrary.Core.Utilities.ToCamelCase(System.String)
  id: ToCamelCase(System.String)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ToCamelCase(String)
  nameWithType: Utilities.ToCamelCase(String)
  fullName: GRYLibrary.Core.Utilities.ToCamelCase(System.String)
  type: Method
  source:
    id: ToCamelCase
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 957
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string ToCamelCase(this string input)
    parameters:
    - id: input
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToCamelCase(input As String) As String
  overload: GRYLibrary.Core.Utilities.ToCamelCase*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.IsHexString(System.String)
  commentId: M:GRYLibrary.Core.Utilities.IsHexString(System.String)
  id: IsHexString(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: IsHexString(String)
  nameWithType: Utilities.IsHexString(String)
  fullName: GRYLibrary.Core.Utilities.IsHexString(System.String)
  type: Method
  source:
    id: IsHexString
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 964
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool IsHexString(string result)
    parameters:
    - id: result
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsHexString(result As String) As Boolean
  overload: GRYLibrary.Core.Utilities.IsHexString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.IsHexDigit(System.Char)
  commentId: M:GRYLibrary.Core.Utilities.IsHexDigit(System.Char)
  id: IsHexDigit(System.Char)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: IsHexDigit(Char)
  nameWithType: Utilities.IsHexDigit(Char)
  fullName: GRYLibrary.Core.Utilities.IsHexDigit(System.Char)
  type: Method
  source:
    id: IsHexDigit
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 968
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool IsHexDigit(this char char)
    parameters:
    - id: char
      type: System.Char
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsHexDigit(char As Char) As Boolean
  overload: GRYLibrary.Core.Utilities.IsHexDigit*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.IsAllUpper(System.String)
  commentId: M:GRYLibrary.Core.Utilities.IsAllUpper(System.String)
  id: IsAllUpper(System.String)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: IsAllUpper(String)
  nameWithType: Utilities.IsAllUpper(String)
  fullName: GRYLibrary.Core.Utilities.IsAllUpper(System.String)
  type: Method
  source:
    id: IsAllUpper
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 973
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool IsAllUpper(this string input)
    parameters:
    - id: input
      type: System.String
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsAllUpper(input As String) As Boolean
  overload: GRYLibrary.Core.Utilities.IsAllUpper*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.IsAllLower(System.String)
  commentId: M:GRYLibrary.Core.Utilities.IsAllLower(System.String)
  id: IsAllLower(System.String)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: IsAllLower(String)
  nameWithType: Utilities.IsAllLower(String)
  fullName: GRYLibrary.Core.Utilities.IsAllLower(System.String)
  type: Method
  source:
    id: IsAllLower
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 986
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool IsAllLower(this string input)
    parameters:
    - id: input
      type: System.String
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsAllLower(input As String) As Boolean
  overload: GRYLibrary.Core.Utilities.IsAllLower*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.IsNegative(System.TimeSpan)
  commentId: M:GRYLibrary.Core.Utilities.IsNegative(System.TimeSpan)
  id: IsNegative(System.TimeSpan)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: IsNegative(TimeSpan)
  nameWithType: Utilities.IsNegative(TimeSpan)
  fullName: GRYLibrary.Core.Utilities.IsNegative(System.TimeSpan)
  type: Method
  source:
    id: IsNegative
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 998
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool IsNegative(this TimeSpan timeSpan)
    parameters:
    - id: timeSpan
      type: System.TimeSpan
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNegative(timeSpan As TimeSpan) As Boolean
  overload: GRYLibrary.Core.Utilities.IsNegative*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.IsPositive(System.TimeSpan)
  commentId: M:GRYLibrary.Core.Utilities.IsPositive(System.TimeSpan)
  id: IsPositive(System.TimeSpan)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: IsPositive(TimeSpan)
  nameWithType: Utilities.IsPositive(TimeSpan)
  fullName: GRYLibrary.Core.Utilities.IsPositive(System.TimeSpan)
  type: Method
  source:
    id: IsPositive
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1002
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool IsPositive(this TimeSpan timeSpan)
    parameters:
    - id: timeSpan
      type: System.TimeSpan
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsPositive(timeSpan As TimeSpan) As Boolean
  overload: GRYLibrary.Core.Utilities.IsPositive*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ToOnlyFirstCharToUpper(System.String)
  commentId: M:GRYLibrary.Core.Utilities.ToOnlyFirstCharToUpper(System.String)
  id: ToOnlyFirstCharToUpper(System.String)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ToOnlyFirstCharToUpper(String)
  nameWithType: Utilities.ToOnlyFirstCharToUpper(String)
  fullName: GRYLibrary.Core.Utilities.ToOnlyFirstCharToUpper(System.String)
  type: Method
  source:
    id: ToOnlyFirstCharToUpper
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1006
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string ToOnlyFirstCharToUpper(this string input)
    parameters:
    - id: input
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToOnlyFirstCharToUpper(input As String) As String
  overload: GRYLibrary.Core.Utilities.ToOnlyFirstCharToUpper*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryWordToUpper(System.String)
  commentId: M:GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryWordToUpper(System.String)
  id: ToOnlyFirstCharOfEveryWordToUpper(System.String)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ToOnlyFirstCharOfEveryWordToUpper(String)
  nameWithType: Utilities.ToOnlyFirstCharOfEveryWordToUpper(String)
  fullName: GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryWordToUpper(System.String)
  type: Method
  source:
    id: ToOnlyFirstCharOfEveryWordToUpper
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1020
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string ToOnlyFirstCharOfEveryWordToUpper(this string input)
    parameters:
    - id: input
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToOnlyFirstCharOfEveryWordToUpper(input As String) As String
  overload: GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryWordToUpper*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryWordOrPartialWordToUpper(System.String)
  commentId: M:GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryWordOrPartialWordToUpper(System.String)
  id: ToOnlyFirstCharOfEveryWordOrPartialWordToUpper(System.String)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ToOnlyFirstCharOfEveryWordOrPartialWordToUpper(String)
  nameWithType: Utilities.ToOnlyFirstCharOfEveryWordOrPartialWordToUpper(String)
  fullName: GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryWordOrPartialWordToUpper(System.String)
  type: Method
  source:
    id: ToOnlyFirstCharOfEveryWordOrPartialWordToUpper
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1024
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string ToOnlyFirstCharOfEveryWordOrPartialWordToUpper(this string input)
    parameters:
    - id: input
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToOnlyFirstCharOfEveryWordOrPartialWordToUpper(input As String) As String
  overload: GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryWordOrPartialWordToUpper*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryNewLetterSequenceToUpper(System.String)
  commentId: M:GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryNewLetterSequenceToUpper(System.String)
  id: ToOnlyFirstCharOfEveryNewLetterSequenceToUpper(System.String)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ToOnlyFirstCharOfEveryNewLetterSequenceToUpper(String)
  nameWithType: Utilities.ToOnlyFirstCharOfEveryNewLetterSequenceToUpper(String)
  fullName: GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryNewLetterSequenceToUpper(System.String)
  type: Method
  source:
    id: ToOnlyFirstCharOfEveryNewLetterSequenceToUpper
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1028
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string ToOnlyFirstCharOfEveryNewLetterSequenceToUpper(this string input)
    parameters:
    - id: input
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToOnlyFirstCharOfEveryNewLetterSequenceToUpper(input As String) As String
  overload: GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryNewLetterSequenceToUpper*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryWordToUpper(System.String,System.Func{System.Char,System.Boolean})
  commentId: M:GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryWordToUpper(System.String,System.Func{System.Char,System.Boolean})
  id: ToOnlyFirstCharOfEveryWordToUpper(System.String,System.Func{System.Char,System.Boolean})
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ToOnlyFirstCharOfEveryWordToUpper(String, Func<Char, Boolean>)
  nameWithType: Utilities.ToOnlyFirstCharOfEveryWordToUpper(String, Func<Char, Boolean>)
  fullName: GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryWordToUpper(System.String, System.Func<System.Char, System.Boolean>)
  type: Method
  source:
    id: ToOnlyFirstCharOfEveryWordToUpper
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1032
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string ToOnlyFirstCharOfEveryWordToUpper(this string input, Func<char, bool> printCharUppercaseDependentOnPreviousChar)
    parameters:
    - id: input
      type: System.String
    - id: printCharUppercaseDependentOnPreviousChar
      type: System.Func{System.Char,System.Boolean}
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToOnlyFirstCharOfEveryWordToUpper(input As String, printCharUppercaseDependentOnPreviousChar As Func(Of Char, Boolean)) As String
  overload: GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryWordToUpper*
  nameWithType.vb: Utilities.ToOnlyFirstCharOfEveryWordToUpper(String, Func(Of Char, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryWordToUpper(System.String, System.Func(Of System.Char, System.Boolean))
  name.vb: ToOnlyFirstCharOfEveryWordToUpper(String, Func(Of Char, Boolean))
- uid: GRYLibrary.Core.Utilities.FileEndsWithEmptyLine(System.String)
  commentId: M:GRYLibrary.Core.Utilities.FileEndsWithEmptyLine(System.String)
  id: FileEndsWithEmptyLine(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: FileEndsWithEmptyLine(String)
  nameWithType: Utilities.FileEndsWithEmptyLine(String)
  fullName: GRYLibrary.Core.Utilities.FileEndsWithEmptyLine(System.String)
  type: Method
  source:
    id: FileEndsWithEmptyLine
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1062
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool FileEndsWithEmptyLine(string file)
    parameters:
    - id: file
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function FileEndsWithEmptyLine(file As String) As Boolean
  overload: GRYLibrary.Core.Utilities.FileEndsWithEmptyLine*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.FileIsEmpty(System.String)
  commentId: M:GRYLibrary.Core.Utilities.FileIsEmpty(System.String)
  id: FileIsEmpty(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: FileIsEmpty(String)
  nameWithType: Utilities.FileIsEmpty(String)
  fullName: GRYLibrary.Core.Utilities.FileIsEmpty(System.String)
  type: Method
  source:
    id: FileIsEmpty
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1066
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool FileIsEmpty(string file)
    parameters:
    - id: file
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function FileIsEmpty(file As String) As Boolean
  overload: GRYLibrary.Core.Utilities.FileIsEmpty*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.AppendFileDoesNotNeedNewLineCharacter(System.String)
  commentId: M:GRYLibrary.Core.Utilities.AppendFileDoesNotNeedNewLineCharacter(System.String)
  id: AppendFileDoesNotNeedNewLineCharacter(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: AppendFileDoesNotNeedNewLineCharacter(String)
  nameWithType: Utilities.AppendFileDoesNotNeedNewLineCharacter(String)
  fullName: GRYLibrary.Core.Utilities.AppendFileDoesNotNeedNewLineCharacter(System.String)
  type: Method
  source:
    id: AppendFileDoesNotNeedNewLineCharacter
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1070
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool AppendFileDoesNotNeedNewLineCharacter(string file)
    parameters:
    - id: file
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function AppendFileDoesNotNeedNewLineCharacter(file As String) As Boolean
  overload: GRYLibrary.Core.Utilities.AppendFileDoesNotNeedNewLineCharacter*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.AppendFileDoesNeedNewLineCharacter(System.String)
  commentId: M:GRYLibrary.Core.Utilities.AppendFileDoesNeedNewLineCharacter(System.String)
  id: AppendFileDoesNeedNewLineCharacter(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: AppendFileDoesNeedNewLineCharacter(String)
  nameWithType: Utilities.AppendFileDoesNeedNewLineCharacter(String)
  fullName: GRYLibrary.Core.Utilities.AppendFileDoesNeedNewLineCharacter(System.String)
  type: Method
  source:
    id: AppendFileDoesNeedNewLineCharacter
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1074
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool AppendFileDoesNeedNewLineCharacter(string file)
    parameters:
    - id: file
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function AppendFileDoesNeedNewLineCharacter(file As String) As Boolean
  overload: GRYLibrary.Core.Utilities.AppendFileDoesNeedNewLineCharacter*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.IsRelativePath(System.String)
  commentId: M:GRYLibrary.Core.Utilities.IsRelativePath(System.String)
  id: IsRelativePath(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: IsRelativePath(String)
  nameWithType: Utilities.IsRelativePath(String)
  fullName: GRYLibrary.Core.Utilities.IsRelativePath(System.String)
  type: Method
  source:
    id: IsRelativePath
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1078
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool IsRelativePath(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsRelativePath(path As String) As Boolean
  overload: GRYLibrary.Core.Utilities.IsRelativePath*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.IsAbsolutePath(System.String)
  commentId: M:GRYLibrary.Core.Utilities.IsAbsolutePath(System.String)
  id: IsAbsolutePath(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: IsAbsolutePath(String)
  nameWithType: Utilities.IsAbsolutePath(String)
  fullName: GRYLibrary.Core.Utilities.IsAbsolutePath(System.String)
  type: Method
  source:
    id: IsAbsolutePath
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1086
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool IsAbsolutePath(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsAbsolutePath(path As String) As Boolean
  overload: GRYLibrary.Core.Utilities.IsAbsolutePath*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.GetAbsolutePath(System.String,System.String)
  commentId: M:GRYLibrary.Core.Utilities.GetAbsolutePath(System.String,System.String)
  id: GetAbsolutePath(System.String,System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GetAbsolutePath(String, String)
  nameWithType: Utilities.GetAbsolutePath(String, String)
  fullName: GRYLibrary.Core.Utilities.GetAbsolutePath(System.String, System.String)
  type: Method
  source:
    id: GetAbsolutePath
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1095
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string GetAbsolutePath(string basePath, string relativePath)
    parameters:
    - id: basePath
      type: System.String
    - id: relativePath
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function GetAbsolutePath(basePath As String, relativePath As String) As String
  overload: GRYLibrary.Core.Utilities.GetAbsolutePath*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.DirectoryIsEmpty(System.String)
  commentId: M:GRYLibrary.Core.Utilities.DirectoryIsEmpty(System.String)
  id: DirectoryIsEmpty(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: DirectoryIsEmpty(String)
  nameWithType: Utilities.DirectoryIsEmpty(String)
  fullName: GRYLibrary.Core.Utilities.DirectoryIsEmpty(System.String)
  type: Method
  source:
    id: DirectoryIsEmpty
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1129
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool DirectoryIsEmpty(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function DirectoryIsEmpty(path As String) As Boolean
  overload: GRYLibrary.Core.Utilities.DirectoryIsEmpty*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.DirectoryDoesNotContainFiles(System.String)
  commentId: M:GRYLibrary.Core.Utilities.DirectoryDoesNotContainFiles(System.String)
  id: DirectoryDoesNotContainFiles(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: DirectoryDoesNotContainFiles(String)
  nameWithType: Utilities.DirectoryDoesNotContainFiles(String)
  fullName: GRYLibrary.Core.Utilities.DirectoryDoesNotContainFiles(System.String)
  type: Method
  source:
    id: DirectoryDoesNotContainFiles
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1133
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool DirectoryDoesNotContainFiles(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function DirectoryDoesNotContainFiles(path As String) As Boolean
  overload: GRYLibrary.Core.Utilities.DirectoryDoesNotContainFiles*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.DirectoryDoesNotContainFolder(System.String)
  commentId: M:GRYLibrary.Core.Utilities.DirectoryDoesNotContainFolder(System.String)
  id: DirectoryDoesNotContainFolder(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: DirectoryDoesNotContainFolder(String)
  nameWithType: Utilities.DirectoryDoesNotContainFolder(String)
  fullName: GRYLibrary.Core.Utilities.DirectoryDoesNotContainFolder(System.String)
  type: Method
  source:
    id: DirectoryDoesNotContainFolder
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1148
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool DirectoryDoesNotContainFolder(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function DirectoryDoesNotContainFolder(path As String) As Boolean
  overload: GRYLibrary.Core.Utilities.DirectoryDoesNotContainFolder*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.StringToByteArray(System.String)
  commentId: M:GRYLibrary.Core.Utilities.StringToByteArray(System.String)
  id: StringToByteArray(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: StringToByteArray(String)
  nameWithType: Utilities.StringToByteArray(String)
  fullName: GRYLibrary.Core.Utilities.StringToByteArray(System.String)
  type: Method
  source:
    id: StringToByteArray
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1152
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static byte[] StringToByteArray(string hex)
    parameters:
    - id: hex
      type: System.String
    return:
      type: System.Byte[]
    content.vb: Public Shared Function StringToByteArray(hex As String) As Byte()
  overload: GRYLibrary.Core.Utilities.StringToByteArray*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.GetHexValue(System.Char)
  commentId: M:GRYLibrary.Core.Utilities.GetHexValue(System.Char)
  id: GetHexValue(System.Char)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GetHexValue(Char)
  nameWithType: Utilities.GetHexValue(Char)
  fullName: GRYLibrary.Core.Utilities.GetHexValue(System.Char)
  type: Method
  source:
    id: GetHexValue
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1166
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static int GetHexValue(char hex)
    parameters:
    - id: hex
      type: System.Char
    return:
      type: System.Int32
    content.vb: Public Shared Function GetHexValue(hex As Char) As Integer
  overload: GRYLibrary.Core.Utilities.GetHexValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ClearFile(System.String)
  commentId: M:GRYLibrary.Core.Utilities.ClearFile(System.String)
  id: ClearFile(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ClearFile(String)
  nameWithType: Utilities.ClearFile(String)
  fullName: GRYLibrary.Core.Utilities.ClearFile(System.String)
  type: Method
  source:
    id: ClearFile
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1172
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void ClearFile(string file)
    parameters:
    - id: file
      type: System.String
    content.vb: Public Shared Sub ClearFile(file As String)
  overload: GRYLibrary.Core.Utilities.ClearFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.EnsurePathStartsWithSlash(System.String)
  commentId: M:GRYLibrary.Core.Utilities.EnsurePathStartsWithSlash(System.String)
  id: EnsurePathStartsWithSlash(System.String)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: EnsurePathStartsWithSlash(String)
  nameWithType: Utilities.EnsurePathStartsWithSlash(String)
  fullName: GRYLibrary.Core.Utilities.EnsurePathStartsWithSlash(System.String)
  type: Method
  source:
    id: EnsurePathStartsWithSlash
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1179
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string EnsurePathStartsWithSlash(this string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnsurePathStartsWithSlash(path As String) As String
  overload: GRYLibrary.Core.Utilities.EnsurePathStartsWithSlash*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.EnsurePathStartsWithBackslash(System.String)
  commentId: M:GRYLibrary.Core.Utilities.EnsurePathStartsWithBackslash(System.String)
  id: EnsurePathStartsWithBackslash(System.String)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: EnsurePathStartsWithBackslash(String)
  nameWithType: Utilities.EnsurePathStartsWithBackslash(String)
  fullName: GRYLibrary.Core.Utilities.EnsurePathStartsWithBackslash(System.String)
  type: Method
  source:
    id: EnsurePathStartsWithBackslash
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1190
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string EnsurePathStartsWithBackslash(this string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnsurePathStartsWithBackslash(path As String) As String
  overload: GRYLibrary.Core.Utilities.EnsurePathStartsWithBackslash*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.EnsurePathStartsWithoutSlash(System.String)
  commentId: M:GRYLibrary.Core.Utilities.EnsurePathStartsWithoutSlash(System.String)
  id: EnsurePathStartsWithoutSlash(System.String)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: EnsurePathStartsWithoutSlash(String)
  nameWithType: Utilities.EnsurePathStartsWithoutSlash(String)
  fullName: GRYLibrary.Core.Utilities.EnsurePathStartsWithoutSlash(System.String)
  type: Method
  source:
    id: EnsurePathStartsWithoutSlash
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1201
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string EnsurePathStartsWithoutSlash(this string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnsurePathStartsWithoutSlash(path As String) As String
  overload: GRYLibrary.Core.Utilities.EnsurePathStartsWithoutSlash*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.EnsurePathStartsWithoutBackslash(System.String)
  commentId: M:GRYLibrary.Core.Utilities.EnsurePathStartsWithoutBackslash(System.String)
  id: EnsurePathStartsWithoutBackslash(System.String)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: EnsurePathStartsWithoutBackslash(String)
  nameWithType: Utilities.EnsurePathStartsWithoutBackslash(String)
  fullName: GRYLibrary.Core.Utilities.EnsurePathStartsWithoutBackslash(System.String)
  type: Method
  source:
    id: EnsurePathStartsWithoutBackslash
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1212
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string EnsurePathStartsWithoutBackslash(this string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnsurePathStartsWithoutBackslash(path As String) As String
  overload: GRYLibrary.Core.Utilities.EnsurePathStartsWithoutBackslash*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.EnsurePathEndsWithSlash(System.String)
  commentId: M:GRYLibrary.Core.Utilities.EnsurePathEndsWithSlash(System.String)
  id: EnsurePathEndsWithSlash(System.String)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: EnsurePathEndsWithSlash(String)
  nameWithType: Utilities.EnsurePathEndsWithSlash(String)
  fullName: GRYLibrary.Core.Utilities.EnsurePathEndsWithSlash(System.String)
  type: Method
  source:
    id: EnsurePathEndsWithSlash
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1223
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string EnsurePathEndsWithSlash(this string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnsurePathEndsWithSlash(path As String) As String
  overload: GRYLibrary.Core.Utilities.EnsurePathEndsWithSlash*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.EnsurePathEndsWithBackslash(System.String)
  commentId: M:GRYLibrary.Core.Utilities.EnsurePathEndsWithBackslash(System.String)
  id: EnsurePathEndsWithBackslash(System.String)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: EnsurePathEndsWithBackslash(String)
  nameWithType: Utilities.EnsurePathEndsWithBackslash(String)
  fullName: GRYLibrary.Core.Utilities.EnsurePathEndsWithBackslash(System.String)
  type: Method
  source:
    id: EnsurePathEndsWithBackslash
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1234
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string EnsurePathEndsWithBackslash(this string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnsurePathEndsWithBackslash(path As String) As String
  overload: GRYLibrary.Core.Utilities.EnsurePathEndsWithBackslash*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.EnsurePathEndsWithoutSlash(System.String)
  commentId: M:GRYLibrary.Core.Utilities.EnsurePathEndsWithoutSlash(System.String)
  id: EnsurePathEndsWithoutSlash(System.String)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: EnsurePathEndsWithoutSlash(String)
  nameWithType: Utilities.EnsurePathEndsWithoutSlash(String)
  fullName: GRYLibrary.Core.Utilities.EnsurePathEndsWithoutSlash(System.String)
  type: Method
  source:
    id: EnsurePathEndsWithoutSlash
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1245
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string EnsurePathEndsWithoutSlash(this string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnsurePathEndsWithoutSlash(path As String) As String
  overload: GRYLibrary.Core.Utilities.EnsurePathEndsWithoutSlash*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.EnsurePathEndsWithoutBackslash(System.String)
  commentId: M:GRYLibrary.Core.Utilities.EnsurePathEndsWithoutBackslash(System.String)
  id: EnsurePathEndsWithoutBackslash(System.String)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: EnsurePathEndsWithoutBackslash(String)
  nameWithType: Utilities.EnsurePathEndsWithoutBackslash(String)
  fullName: GRYLibrary.Core.Utilities.EnsurePathEndsWithoutBackslash(System.String)
  type: Method
  source:
    id: EnsurePathEndsWithoutBackslash
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1256
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string EnsurePathEndsWithoutBackslash(this string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnsurePathEndsWithoutBackslash(path As String) As String
  overload: GRYLibrary.Core.Utilities.EnsurePathEndsWithoutBackslash*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.EnsurePathStartsWithoutSlashOrBackslash(System.String)
  commentId: M:GRYLibrary.Core.Utilities.EnsurePathStartsWithoutSlashOrBackslash(System.String)
  id: EnsurePathStartsWithoutSlashOrBackslash(System.String)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: EnsurePathStartsWithoutSlashOrBackslash(String)
  nameWithType: Utilities.EnsurePathStartsWithoutSlashOrBackslash(String)
  fullName: GRYLibrary.Core.Utilities.EnsurePathStartsWithoutSlashOrBackslash(System.String)
  type: Method
  source:
    id: EnsurePathStartsWithoutSlashOrBackslash
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1267
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string EnsurePathStartsWithoutSlashOrBackslash(this string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnsurePathStartsWithoutSlashOrBackslash(path As String) As String
  overload: GRYLibrary.Core.Utilities.EnsurePathStartsWithoutSlashOrBackslash*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.EnsurePathSEndsWithoutSlashOrBackslash(System.String)
  commentId: M:GRYLibrary.Core.Utilities.EnsurePathSEndsWithoutSlashOrBackslash(System.String)
  id: EnsurePathSEndsWithoutSlashOrBackslash(System.String)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: EnsurePathSEndsWithoutSlashOrBackslash(String)
  nameWithType: Utilities.EnsurePathSEndsWithoutSlashOrBackslash(String)
  fullName: GRYLibrary.Core.Utilities.EnsurePathSEndsWithoutSlashOrBackslash(System.String)
  type: Method
  source:
    id: EnsurePathSEndsWithoutSlashOrBackslash
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1271
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string EnsurePathSEndsWithoutSlashOrBackslash(this string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnsurePathSEndsWithoutSlashOrBackslash(path As String) As String
  overload: GRYLibrary.Core.Utilities.EnsurePathSEndsWithoutSlashOrBackslash*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.StartsWith``1(``0[],``0[])
  commentId: M:GRYLibrary.Core.Utilities.StartsWith``1(``0[],``0[])
  id: StartsWith``1(``0[],``0[])
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: StartsWith<T>(T[], T[])
  nameWithType: Utilities.StartsWith<T>(T[], T[])
  fullName: GRYLibrary.Core.Utilities.StartsWith<T>(T[], T[])
  type: Method
  source:
    id: StartsWith
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1276
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool StartsWith<T>(T[] entireArray, T[] start)
    parameters:
    - id: entireArray
      type: '{T}[]'
    - id: start
      type: '{T}[]'
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function StartsWith(Of T)(entireArray As T(), start As T()) As Boolean
  overload: GRYLibrary.Core.Utilities.StartsWith*
  nameWithType.vb: Utilities.StartsWith(Of T)(T(), T())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.StartsWith(Of T)(T(), T())
  name.vb: StartsWith(Of T)(T(), T())
- uid: GRYLibrary.Core.Utilities.ByteArrayToHexString(System.Byte[])
  commentId: M:GRYLibrary.Core.Utilities.ByteArrayToHexString(System.Byte[])
  id: ByteArrayToHexString(System.Byte[])
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ByteArrayToHexString(Byte[])
  nameWithType: Utilities.ByteArrayToHexString(Byte[])
  fullName: GRYLibrary.Core.Utilities.ByteArrayToHexString(System.Byte[])
  type: Method
  source:
    id: ByteArrayToHexString
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1292
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string ByteArrayToHexString(byte[] value)
    parameters:
    - id: value
      type: System.Byte[]
    return:
      type: System.String
    content.vb: Public Shared Function ByteArrayToHexString(value As Byte()) As String
  overload: GRYLibrary.Core.Utilities.ByteArrayToHexString*
  nameWithType.vb: Utilities.ByteArrayToHexString(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.ByteArrayToHexString(System.Byte())
  name.vb: ByteArrayToHexString(Byte())
- uid: GRYLibrary.Core.Utilities.HexStringToByteArray(System.String)
  commentId: M:GRYLibrary.Core.Utilities.HexStringToByteArray(System.String)
  id: HexStringToByteArray(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: HexStringToByteArray(String)
  nameWithType: Utilities.HexStringToByteArray(String)
  fullName: GRYLibrary.Core.Utilities.HexStringToByteArray(System.String)
  type: Method
  source:
    id: HexStringToByteArray
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1297
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static byte[] HexStringToByteArray(string hexString)
    parameters:
    - id: hexString
      type: System.String
    return:
      type: System.Byte[]
    content.vb: Public Shared Function HexStringToByteArray(hexString As String) As Byte()
  overload: GRYLibrary.Core.Utilities.HexStringToByteArray*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.IntegerToHexString(System.Numerics.BigInteger)
  commentId: M:GRYLibrary.Core.Utilities.IntegerToHexString(System.Numerics.BigInteger)
  id: IntegerToHexString(System.Numerics.BigInteger)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: IntegerToHexString(BigInteger)
  nameWithType: Utilities.IntegerToHexString(BigInteger)
  fullName: GRYLibrary.Core.Utilities.IntegerToHexString(System.Numerics.BigInteger)
  type: Method
  source:
    id: IntegerToHexString
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1311
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string IntegerToHexString(BigInteger input)
    parameters:
    - id: input
      type: System.Numerics.BigInteger
    return:
      type: System.String
    content.vb: Public Shared Function IntegerToHexString(input As BigInteger) As String
  overload: GRYLibrary.Core.Utilities.IntegerToHexString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.HexStringToInteger(System.String)
  commentId: M:GRYLibrary.Core.Utilities.HexStringToInteger(System.String)
  id: HexStringToInteger(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: HexStringToInteger(String)
  nameWithType: Utilities.HexStringToInteger(String)
  fullName: GRYLibrary.Core.Utilities.HexStringToInteger(System.String)
  type: Method
  source:
    id: HexStringToInteger
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1323
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static BigInteger HexStringToInteger(string input)
    parameters:
    - id: input
      type: System.String
    return:
      type: System.Numerics.BigInteger
    content.vb: Public Shared Function HexStringToInteger(input As String) As BigInteger
  overload: GRYLibrary.Core.Utilities.HexStringToInteger*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.Concat``1(``0[],``0[])
  commentId: M:GRYLibrary.Core.Utilities.Concat``1(``0[],``0[])
  id: Concat``1(``0[],``0[])
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: Concat<T>(T[], T[])
  nameWithType: Utilities.Concat<T>(T[], T[])
  fullName: GRYLibrary.Core.Utilities.Concat<T>(T[], T[])
  type: Method
  source:
    id: Concat
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1327
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static T[] Concat<T>(T[] array1, T[] array2)
    parameters:
    - id: array1
      type: '{T}[]'
    - id: array2
      type: '{T}[]'
    typeParameters:
    - id: T
    return:
      type: '{T}[]'
    content.vb: Public Shared Function Concat(Of T)(array1 As T(), array2 As T()) As T()
  overload: GRYLibrary.Core.Utilities.Concat*
  nameWithType.vb: Utilities.Concat(Of T)(T(), T())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.Concat(Of T)(T(), T())
  name.vb: Concat(Of T)(T(), T())
- uid: GRYLibrary.Core.Utilities.StringToBoolean(System.String)
  commentId: M:GRYLibrary.Core.Utilities.StringToBoolean(System.String)
  id: StringToBoolean(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: StringToBoolean(String)
  nameWithType: Utilities.StringToBoolean(String)
  fullName: GRYLibrary.Core.Utilities.StringToBoolean(System.String)
  type: Method
  source:
    id: StringToBoolean
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1334
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool StringToBoolean(string value)
    parameters:
    - id: value
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function StringToBoolean(value As String) As Boolean
  overload: GRYLibrary.Core.Utilities.StringToBoolean*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.Assert(System.Boolean,System.String)
  commentId: M:GRYLibrary.Core.Utilities.Assert(System.Boolean,System.String)
  id: Assert(System.Boolean,System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: Assert(Boolean, String)
  nameWithType: Utilities.Assert(Boolean, String)
  fullName: GRYLibrary.Core.Utilities.Assert(System.Boolean, System.String)
  type: Method
  source:
    id: Assert
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1347
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void Assert(bool condition, string message = "")
    parameters:
    - id: condition
      type: System.Boolean
    - id: message
      type: System.String
    content.vb: Public Shared Sub Assert(condition As Boolean, message As String = "")
  overload: GRYLibrary.Core.Utilities.Assert*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ReadCSVFile(System.String,System.String,System.Boolean)
  commentId: M:GRYLibrary.Core.Utilities.ReadCSVFile(System.String,System.String,System.Boolean)
  id: ReadCSVFile(System.String,System.String,System.Boolean)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ReadCSVFile(String, String, Boolean)
  nameWithType: Utilities.ReadCSVFile(String, String, Boolean)
  fullName: GRYLibrary.Core.Utilities.ReadCSVFile(System.String, System.String, System.Boolean)
  type: Method
  source:
    id: ReadCSVFile
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1354
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string[, ] ReadCSVFile(string file, string separator = ";", bool ignoreFirstLine = false)
    parameters:
    - id: file
      type: System.String
    - id: separator
      type: System.String
    - id: ignoreFirstLine
      type: System.Boolean
    return:
      type: System.String[,]
    content.vb: Public Shared Function ReadCSVFile(file As String, separator As String = ";", ignoreFirstLine As Boolean = False) As String(,)
  overload: GRYLibrary.Core.Utilities.ReadCSVFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ReadCSVFile(System.String,System.Text.Encoding,System.String,System.Boolean)
  commentId: M:GRYLibrary.Core.Utilities.ReadCSVFile(System.String,System.Text.Encoding,System.String,System.Boolean)
  id: ReadCSVFile(System.String,System.Text.Encoding,System.String,System.Boolean)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ReadCSVFile(String, Encoding, String, Boolean)
  nameWithType: Utilities.ReadCSVFile(String, Encoding, String, Boolean)
  fullName: GRYLibrary.Core.Utilities.ReadCSVFile(System.String, System.Text.Encoding, System.String, System.Boolean)
  type: Method
  source:
    id: ReadCSVFile
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1358
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string[, ] ReadCSVFile(string file, Encoding encoding, string separator = ";", bool ignoreFirstLine = false)
    parameters:
    - id: file
      type: System.String
    - id: encoding
      type: System.Text.Encoding
    - id: separator
      type: System.String
    - id: ignoreFirstLine
      type: System.Boolean
    return:
      type: System.String[,]
    content.vb: Public Shared Function ReadCSVFile(file As String, encoding As Encoding, separator As String = ";", ignoreFirstLine As Boolean = False) As String(,)
  overload: GRYLibrary.Core.Utilities.ReadCSVFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.RunWithTimeout(System.Threading.ThreadStart,System.TimeSpan)
  commentId: M:GRYLibrary.Core.Utilities.RunWithTimeout(System.Threading.ThreadStart,System.TimeSpan)
  id: RunWithTimeout(System.Threading.ThreadStart,System.TimeSpan)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: RunWithTimeout(ThreadStart, TimeSpan)
  nameWithType: Utilities.RunWithTimeout(ThreadStart, TimeSpan)
  fullName: GRYLibrary.Core.Utilities.RunWithTimeout(System.Threading.ThreadStart, System.TimeSpan)
  type: Method
  source:
    id: RunWithTimeout
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1388
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool RunWithTimeout(this ThreadStart threadStart, TimeSpan timeout)
    parameters:
    - id: threadStart
      type: System.Threading.ThreadStart
    - id: timeout
      type: System.TimeSpan
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RunWithTimeout(threadStart As ThreadStart, timeout As TimeSpan) As Boolean
  overload: GRYLibrary.Core.Utilities.RunWithTimeout*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ResolveToFullPath(System.String)
  commentId: M:GRYLibrary.Core.Utilities.ResolveToFullPath(System.String)
  id: ResolveToFullPath(System.String)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ResolveToFullPath(String)
  nameWithType: Utilities.ResolveToFullPath(String)
  fullName: GRYLibrary.Core.Utilities.ResolveToFullPath(System.String)
  type: Method
  source:
    id: ResolveToFullPath
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1399
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string ResolveToFullPath(this string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ResolveToFullPath(path As String) As String
  overload: GRYLibrary.Core.Utilities.ResolveToFullPath*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ResolveToFullPath(System.String,System.String)
  commentId: M:GRYLibrary.Core.Utilities.ResolveToFullPath(System.String,System.String)
  id: ResolveToFullPath(System.String,System.String)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ResolveToFullPath(String, String)
  nameWithType: Utilities.ResolveToFullPath(String, String)
  fullName: GRYLibrary.Core.Utilities.ResolveToFullPath(System.String, System.String)
  type: Method
  source:
    id: ResolveToFullPath
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1403
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string ResolveToFullPath(this string path, string baseDirectory)
    parameters:
    - id: path
      type: System.String
    - id: baseDirectory
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ResolveToFullPath(path As String, baseDirectory As String) As String
  overload: GRYLibrary.Core.Utilities.ResolveToFullPath*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ValidateXMLAgainstXSD(System.String,System.String,System.Collections.Generic.IList{System.Object}@)
  commentId: M:GRYLibrary.Core.Utilities.ValidateXMLAgainstXSD(System.String,System.String,System.Collections.Generic.IList{System.Object}@)
  id: ValidateXMLAgainstXSD(System.String,System.String,System.Collections.Generic.IList{System.Object}@)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ValidateXMLAgainstXSD(String, String, out IList<Object>)
  nameWithType: Utilities.ValidateXMLAgainstXSD(String, String, out IList<Object>)
  fullName: GRYLibrary.Core.Utilities.ValidateXMLAgainstXSD(System.String, System.String, out System.Collections.Generic.IList<System.Object>)
  type: Method
  source:
    id: ValidateXMLAgainstXSD
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1416
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool ValidateXMLAgainstXSD(string xml, string xsd, out IList<object> errorMessages)
    parameters:
    - id: xml
      type: System.String
    - id: xsd
      type: System.String
    - id: errorMessages
      type: System.Collections.Generic.IList{System.Object}
    return:
      type: System.Boolean
    content.vb: Public Shared Function ValidateXMLAgainstXSD(xml As String, xsd As String, ByRef errorMessages As IList(Of Object)) As Boolean
  overload: GRYLibrary.Core.Utilities.ValidateXMLAgainstXSD*
  nameWithType.vb: Utilities.ValidateXMLAgainstXSD(String, String, ByRef IList(Of Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.ValidateXMLAgainstXSD(System.String, System.String, ByRef System.Collections.Generic.IList(Of System.Object))
  name.vb: ValidateXMLAgainstXSD(String, String, ByRef IList(Of Object))
- uid: GRYLibrary.Core.Utilities.ApplyXSLTToXMLXMLWriterDefaultSettings
  commentId: F:GRYLibrary.Core.Utilities.ApplyXSLTToXMLXMLWriterDefaultSettings
  id: ApplyXSLTToXMLXMLWriterDefaultSettings
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ApplyXSLTToXMLXMLWriterDefaultSettings
  nameWithType: Utilities.ApplyXSLTToXMLXMLWriterDefaultSettings
  fullName: GRYLibrary.Core.Utilities.ApplyXSLTToXMLXMLWriterDefaultSettings
  type: Field
  source:
    id: ApplyXSLTToXMLXMLWriterDefaultSettings
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1439
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static readonly XmlWriterSettings ApplyXSLTToXMLXMLWriterDefaultSettings
    return:
      type: System.Xml.XmlWriterSettings
    content.vb: Public Shared ReadOnly ApplyXSLTToXMLXMLWriterDefaultSettings As XmlWriterSettings
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: GRYLibrary.Core.Utilities.ApplyXSLTToXMLXMLWriterDefaultXMLDeclaration
  commentId: F:GRYLibrary.Core.Utilities.ApplyXSLTToXMLXMLWriterDefaultXMLDeclaration
  id: ApplyXSLTToXMLXMLWriterDefaultXMLDeclaration
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ApplyXSLTToXMLXMLWriterDefaultXMLDeclaration
  nameWithType: Utilities.ApplyXSLTToXMLXMLWriterDefaultXMLDeclaration
  fullName: GRYLibrary.Core.Utilities.ApplyXSLTToXMLXMLWriterDefaultXMLDeclaration
  type: Field
  source:
    id: ApplyXSLTToXMLXMLWriterDefaultXMLDeclaration
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1440
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static readonly string ApplyXSLTToXMLXMLWriterDefaultXMLDeclaration
    return:
      type: System.String
    content.vb: Public Shared ReadOnly ApplyXSLTToXMLXMLWriterDefaultXMLDeclaration As String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: GRYLibrary.Core.Utilities.ApplyXSLTToXML(System.String,System.String)
  commentId: M:GRYLibrary.Core.Utilities.ApplyXSLTToXML(System.String,System.String)
  id: ApplyXSLTToXML(System.String,System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ApplyXSLTToXML(String, String)
  nameWithType: Utilities.ApplyXSLTToXML(String, String)
  fullName: GRYLibrary.Core.Utilities.ApplyXSLTToXML(System.String, System.String)
  type: Method
  source:
    id: ApplyXSLTToXML
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1441
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string ApplyXSLTToXML(string xml, string xslt)
    parameters:
    - id: xml
      type: System.String
    - id: xslt
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function ApplyXSLTToXML(xml As String, xslt As String) As String
  overload: GRYLibrary.Core.Utilities.ApplyXSLTToXML*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ApplyXSLTToXML(System.String,System.String,System.String)
  commentId: M:GRYLibrary.Core.Utilities.ApplyXSLTToXML(System.String,System.String,System.String)
  id: ApplyXSLTToXML(System.String,System.String,System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ApplyXSLTToXML(String, String, String)
  nameWithType: Utilities.ApplyXSLTToXML(String, String, String)
  fullName: GRYLibrary.Core.Utilities.ApplyXSLTToXML(System.String, System.String, System.String)
  type: Method
  source:
    id: ApplyXSLTToXML
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1445
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string ApplyXSLTToXML(string xml, string xslt, string xmlDeclaration)
    parameters:
    - id: xml
      type: System.String
    - id: xslt
      type: System.String
    - id: xmlDeclaration
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function ApplyXSLTToXML(xml As String, xslt As String, xmlDeclaration As String) As String
  overload: GRYLibrary.Core.Utilities.ApplyXSLTToXML*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ApplyXSLTToXML(System.String,System.String,System.Xml.XmlWriterSettings)
  commentId: M:GRYLibrary.Core.Utilities.ApplyXSLTToXML(System.String,System.String,System.Xml.XmlWriterSettings)
  id: ApplyXSLTToXML(System.String,System.String,System.Xml.XmlWriterSettings)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ApplyXSLTToXML(String, String, XmlWriterSettings)
  nameWithType: Utilities.ApplyXSLTToXML(String, String, XmlWriterSettings)
  fullName: GRYLibrary.Core.Utilities.ApplyXSLTToXML(System.String, System.String, System.Xml.XmlWriterSettings)
  type: Method
  source:
    id: ApplyXSLTToXML
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1449
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string ApplyXSLTToXML(string xml, string xslt, XmlWriterSettings applyXSLTToXMLXMLWriterDefaultSettings)
    parameters:
    - id: xml
      type: System.String
    - id: xslt
      type: System.String
    - id: applyXSLTToXMLXMLWriterDefaultSettings
      type: System.Xml.XmlWriterSettings
    return:
      type: System.String
    content.vb: Public Shared Function ApplyXSLTToXML(xml As String, xslt As String, applyXSLTToXMLXMLWriterDefaultSettings As XmlWriterSettings) As String
  overload: GRYLibrary.Core.Utilities.ApplyXSLTToXML*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ApplyXSLTToXML(System.String,System.String,System.String,System.Xml.XmlWriterSettings)
  commentId: M:GRYLibrary.Core.Utilities.ApplyXSLTToXML(System.String,System.String,System.String,System.Xml.XmlWriterSettings)
  id: ApplyXSLTToXML(System.String,System.String,System.String,System.Xml.XmlWriterSettings)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ApplyXSLTToXML(String, String, String, XmlWriterSettings)
  nameWithType: Utilities.ApplyXSLTToXML(String, String, String, XmlWriterSettings)
  fullName: GRYLibrary.Core.Utilities.ApplyXSLTToXML(System.String, System.String, System.String, System.Xml.XmlWriterSettings)
  type: Method
  source:
    id: ApplyXSLTToXML
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1453
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string ApplyXSLTToXML(string xml, string xslt, string xmlDeclaration, XmlWriterSettings applyXSLTToXMLXMLWriterDefaultSettings)
    parameters:
    - id: xml
      type: System.String
    - id: xslt
      type: System.String
    - id: xmlDeclaration
      type: System.String
    - id: applyXSLTToXMLXMLWriterDefaultSettings
      type: System.Xml.XmlWriterSettings
    return:
      type: System.String
    content.vb: Public Shared Function ApplyXSLTToXML(xml As String, xslt As String, xmlDeclaration As String, applyXSLTToXMLXMLWriterDefaultSettings As XmlWriterSettings) As String
  overload: GRYLibrary.Core.Utilities.ApplyXSLTToXML*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.FormatXMLFile_DefaultEncoding
  commentId: F:GRYLibrary.Core.Utilities.FormatXMLFile_DefaultEncoding
  id: FormatXMLFile_DefaultEncoding
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: FormatXMLFile_DefaultEncoding
  nameWithType: Utilities.FormatXMLFile_DefaultEncoding
  fullName: GRYLibrary.Core.Utilities.FormatXMLFile_DefaultEncoding
  type: Field
  source:
    id: FormatXMLFile_DefaultEncoding
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1465
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static readonly Encoding FormatXMLFile_DefaultEncoding
    return:
      type: System.Text.Encoding
    content.vb: Public Shared ReadOnly FormatXMLFile_DefaultEncoding As Encoding
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: GRYLibrary.Core.Utilities.FormatXMLFile_DefaultXmlWriterSettings
  commentId: F:GRYLibrary.Core.Utilities.FormatXMLFile_DefaultXmlWriterSettings
  id: FormatXMLFile_DefaultXmlWriterSettings
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: FormatXMLFile_DefaultXmlWriterSettings
  nameWithType: Utilities.FormatXMLFile_DefaultXmlWriterSettings
  fullName: GRYLibrary.Core.Utilities.FormatXMLFile_DefaultXmlWriterSettings
  type: Field
  source:
    id: FormatXMLFile_DefaultXmlWriterSettings
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1466
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static readonly XmlWriterSettings FormatXMLFile_DefaultXmlWriterSettings
    return:
      type: System.Xml.XmlWriterSettings
    content.vb: Public Shared ReadOnly FormatXMLFile_DefaultXmlWriterSettings As XmlWriterSettings
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: GRYLibrary.Core.Utilities.FormatXMLFile(System.String)
  commentId: M:GRYLibrary.Core.Utilities.FormatXMLFile(System.String)
  id: FormatXMLFile(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: FormatXMLFile(String)
  nameWithType: Utilities.FormatXMLFile(String)
  fullName: GRYLibrary.Core.Utilities.FormatXMLFile(System.String)
  type: Method
  source:
    id: FormatXMLFile
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1467
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void FormatXMLFile(string file)
    parameters:
    - id: file
      type: System.String
    content.vb: Public Shared Sub FormatXMLFile(file As String)
  overload: GRYLibrary.Core.Utilities.FormatXMLFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.FormatXMLFile(System.String,System.Text.Encoding)
  commentId: M:GRYLibrary.Core.Utilities.FormatXMLFile(System.String,System.Text.Encoding)
  id: FormatXMLFile(System.String,System.Text.Encoding)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: FormatXMLFile(String, Encoding)
  nameWithType: Utilities.FormatXMLFile(String, Encoding)
  fullName: GRYLibrary.Core.Utilities.FormatXMLFile(System.String, System.Text.Encoding)
  type: Method
  source:
    id: FormatXMLFile
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1471
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void FormatXMLFile(string file, Encoding encoding)
    parameters:
    - id: file
      type: System.String
    - id: encoding
      type: System.Text.Encoding
    content.vb: Public Shared Sub FormatXMLFile(file As String, encoding As Encoding)
  overload: GRYLibrary.Core.Utilities.FormatXMLFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.FormatXMLFile(System.String,System.Xml.XmlWriterSettings)
  commentId: M:GRYLibrary.Core.Utilities.FormatXMLFile(System.String,System.Xml.XmlWriterSettings)
  id: FormatXMLFile(System.String,System.Xml.XmlWriterSettings)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: FormatXMLFile(String, XmlWriterSettings)
  nameWithType: Utilities.FormatXMLFile(String, XmlWriterSettings)
  fullName: GRYLibrary.Core.Utilities.FormatXMLFile(System.String, System.Xml.XmlWriterSettings)
  type: Method
  source:
    id: FormatXMLFile
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1475
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void FormatXMLFile(string file, XmlWriterSettings settings)
    parameters:
    - id: file
      type: System.String
    - id: settings
      type: System.Xml.XmlWriterSettings
    content.vb: Public Shared Sub FormatXMLFile(file As String, settings As XmlWriterSettings)
  overload: GRYLibrary.Core.Utilities.FormatXMLFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.FormatXMLFile(System.String,System.Text.Encoding,System.Xml.XmlWriterSettings)
  commentId: M:GRYLibrary.Core.Utilities.FormatXMLFile(System.String,System.Text.Encoding,System.Xml.XmlWriterSettings)
  id: FormatXMLFile(System.String,System.Text.Encoding,System.Xml.XmlWriterSettings)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: FormatXMLFile(String, Encoding, XmlWriterSettings)
  nameWithType: Utilities.FormatXMLFile(String, Encoding, XmlWriterSettings)
  fullName: GRYLibrary.Core.Utilities.FormatXMLFile(System.String, System.Text.Encoding, System.Xml.XmlWriterSettings)
  type: Method
  source:
    id: FormatXMLFile
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1479
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void FormatXMLFile(string file, Encoding encoding, XmlWriterSettings settings)
    parameters:
    - id: file
      type: System.String
    - id: encoding
      type: System.Text.Encoding
    - id: settings
      type: System.Xml.XmlWriterSettings
    content.vb: Public Shared Sub FormatXMLFile(file As String, encoding As Encoding, settings As XmlWriterSettings)
  overload: GRYLibrary.Core.Utilities.FormatXMLFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.FormatXMLString(System.String)
  commentId: M:GRYLibrary.Core.Utilities.FormatXMLString(System.String)
  id: FormatXMLString(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: FormatXMLString(String)
  nameWithType: Utilities.FormatXMLString(String)
  fullName: GRYLibrary.Core.Utilities.FormatXMLString(System.String)
  type: Method
  source:
    id: FormatXMLString
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1483
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string FormatXMLString(string xmlString)
    parameters:
    - id: xmlString
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function FormatXMLString(xmlString As String) As String
  overload: GRYLibrary.Core.Utilities.FormatXMLString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.FormatXMLString(System.String,System.Xml.XmlWriterSettings)
  commentId: M:GRYLibrary.Core.Utilities.FormatXMLString(System.String,System.Xml.XmlWriterSettings)
  id: FormatXMLString(System.String,System.Xml.XmlWriterSettings)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: FormatXMLString(String, XmlWriterSettings)
  nameWithType: Utilities.FormatXMLString(String, XmlWriterSettings)
  fullName: GRYLibrary.Core.Utilities.FormatXMLString(System.String, System.Xml.XmlWriterSettings)
  type: Method
  source:
    id: FormatXMLString
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1487
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string FormatXMLString(string xmlString, XmlWriterSettings settings)
    parameters:
    - id: xmlString
      type: System.String
    - id: settings
      type: System.Xml.XmlWriterSettings
    return:
      type: System.String
    content.vb: Public Shared Function FormatXMLString(xmlString As String, settings As XmlWriterSettings) As String
  overload: GRYLibrary.Core.Utilities.FormatXMLString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.AddMountPointForVolume(System.Guid,System.String)
  commentId: M:GRYLibrary.Core.Utilities.AddMountPointForVolume(System.Guid,System.String)
  id: AddMountPointForVolume(System.Guid,System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: AddMountPointForVolume(Guid, String)
  nameWithType: Utilities.AddMountPointForVolume(Guid, String)
  fullName: GRYLibrary.Core.Utilities.AddMountPointForVolume(System.Guid, System.String)
  type: Method
  source:
    id: AddMountPointForVolume
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1499
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void AddMountPointForVolume(Guid volumeId, string mountPoint)
    parameters:
    - id: volumeId
      type: System.Guid
    - id: mountPoint
      type: System.String
    content.vb: Public Shared Sub AddMountPointForVolume(volumeId As Guid, mountPoint As String)
  overload: GRYLibrary.Core.Utilities.AddMountPointForVolume*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.GetAvailableVolumeIds
  commentId: M:GRYLibrary.Core.Utilities.GetAvailableVolumeIds
  id: GetAvailableVolumeIds
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GetAvailableVolumeIds()
  nameWithType: Utilities.GetAvailableVolumeIds()
  fullName: GRYLibrary.Core.Utilities.GetAvailableVolumeIds()
  type: Method
  source:
    id: GetAvailableVolumeIds
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1511
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static ISet<Guid> GetAvailableVolumeIds()
    return:
      type: System.Collections.Generic.ISet{System.Guid}
    content.vb: Public Shared Function GetAvailableVolumeIds As ISet(Of Guid)
  overload: GRYLibrary.Core.Utilities.GetAvailableVolumeIds*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.GetAllMountPointsOfAllAvailableVolumes
  commentId: M:GRYLibrary.Core.Utilities.GetAllMountPointsOfAllAvailableVolumes
  id: GetAllMountPointsOfAllAvailableVolumes
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GetAllMountPointsOfAllAvailableVolumes()
  nameWithType: Utilities.GetAllMountPointsOfAllAvailableVolumes()
  fullName: GRYLibrary.Core.Utilities.GetAllMountPointsOfAllAvailableVolumes()
  type: Method
  source:
    id: GetAllMountPointsOfAllAvailableVolumes
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1544
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static ISet<string> GetAllMountPointsOfAllAvailableVolumes()
    return:
      type: System.Collections.Generic.ISet{System.String}
    content.vb: Public Shared Function GetAllMountPointsOfAllAvailableVolumes As ISet(Of String)
  overload: GRYLibrary.Core.Utilities.GetAllMountPointsOfAllAvailableVolumes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.GetMountPoints(System.Guid)
  commentId: M:GRYLibrary.Core.Utilities.GetMountPoints(System.Guid)
  id: GetMountPoints(System.Guid)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GetMountPoints(Guid)
  nameWithType: Utilities.GetMountPoints(Guid)
  fullName: GRYLibrary.Core.Utilities.GetMountPoints(System.Guid)
  type: Method
  source:
    id: GetMountPoints
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1553
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static ISet<string> GetMountPoints(Guid volumeId)
    parameters:
    - id: volumeId
      type: System.Guid
    return:
      type: System.Collections.Generic.ISet{System.String}
    content.vb: Public Shared Function GetMountPoints(volumeId As Guid) As ISet(Of String)
  overload: GRYLibrary.Core.Utilities.GetMountPoints*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.RemoveAllMountPointsOfVolume(System.Guid)
  commentId: M:GRYLibrary.Core.Utilities.RemoveAllMountPointsOfVolume(System.Guid)
  id: RemoveAllMountPointsOfVolume(System.Guid)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: RemoveAllMountPointsOfVolume(Guid)
  nameWithType: Utilities.RemoveAllMountPointsOfVolume(Guid)
  fullName: GRYLibrary.Core.Utilities.RemoveAllMountPointsOfVolume(System.Guid)
  type: Method
  source:
    id: RemoveAllMountPointsOfVolume
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1581
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void RemoveAllMountPointsOfVolume(Guid volumeId)
    parameters:
    - id: volumeId
      type: System.Guid
    content.vb: Public Shared Sub RemoveAllMountPointsOfVolume(volumeId As Guid)
  overload: GRYLibrary.Core.Utilities.RemoveAllMountPointsOfVolume*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.RemoveMountPointOfVolume(System.String)
  commentId: M:GRYLibrary.Core.Utilities.RemoveMountPointOfVolume(System.String)
  id: RemoveMountPointOfVolume(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: RemoveMountPointOfVolume(String)
  nameWithType: Utilities.RemoveMountPointOfVolume(String)
  fullName: GRYLibrary.Core.Utilities.RemoveMountPointOfVolume(System.String)
  type: Method
  source:
    id: RemoveMountPointOfVolume
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1588
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void RemoveMountPointOfVolume(string mountPoint)
    parameters:
    - id: mountPoint
      type: System.String
    content.vb: Public Shared Sub RemoveMountPointOfVolume(mountPoint As String)
  overload: GRYLibrary.Core.Utilities.RemoveMountPointOfVolume*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.GetVolumeIdByMountPoint(System.String)
  commentId: M:GRYLibrary.Core.Utilities.GetVolumeIdByMountPoint(System.String)
  id: GetVolumeIdByMountPoint(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GetVolumeIdByMountPoint(String)
  nameWithType: Utilities.GetVolumeIdByMountPoint(String)
  fullName: GRYLibrary.Core.Utilities.GetVolumeIdByMountPoint(System.String)
  type: Method
  source:
    id: GetVolumeIdByMountPoint
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1600
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static Guid GetVolumeIdByMountPoint(string mountPoint)
    parameters:
    - id: mountPoint
      type: System.String
    return:
      type: System.Guid
    content.vb: Public Shared Function GetVolumeIdByMountPoint(mountPoint As String) As Guid
  overload: GRYLibrary.Core.Utilities.GetVolumeIdByMountPoint*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.NullSafeSetEquals``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})
  commentId: M:GRYLibrary.Core.Utilities.NullSafeSetEquals``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})
  id: NullSafeSetEquals``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: NullSafeSetEquals<T>(ISet<T>, ISet<T>)
  nameWithType: Utilities.NullSafeSetEquals<T>(ISet<T>, ISet<T>)
  fullName: GRYLibrary.Core.Utilities.NullSafeSetEquals<T>(System.Collections.Generic.ISet<T>, System.Collections.Generic.ISet<T>)
  type: Method
  source:
    id: NullSafeSetEquals
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1618
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool NullSafeSetEquals<T>(this ISet<T> this, ISet<T> obj)
    parameters:
    - id: this
      type: System.Collections.Generic.ISet{{T}}
    - id: obj
      type: System.Collections.Generic.ISet{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NullSafeSetEquals(Of T)(this As ISet(Of T), obj As ISet(Of T)) As Boolean
  overload: GRYLibrary.Core.Utilities.NullSafeSetEquals*
  nameWithType.vb: Utilities.NullSafeSetEquals(Of T)(ISet(Of T), ISet(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.NullSafeSetEquals(Of T)(System.Collections.Generic.ISet(Of T), System.Collections.Generic.ISet(Of T))
  name.vb: NullSafeSetEquals(Of T)(ISet(Of T), ISet(Of T))
- uid: GRYLibrary.Core.Utilities.NullSafeListEquals``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})
  commentId: M:GRYLibrary.Core.Utilities.NullSafeListEquals``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})
  id: NullSafeListEquals``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: NullSafeListEquals<T>(IList<T>, IList<T>)
  nameWithType: Utilities.NullSafeListEquals<T>(IList<T>, IList<T>)
  fullName: GRYLibrary.Core.Utilities.NullSafeListEquals<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)
  type: Method
  source:
    id: NullSafeListEquals
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1622
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool NullSafeListEquals<T>(this IList<T> this, IList<T> obj)
    parameters:
    - id: this
      type: System.Collections.Generic.IList{{T}}
    - id: obj
      type: System.Collections.Generic.IList{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NullSafeListEquals(Of T)(this As IList(Of T), obj As IList(Of T)) As Boolean
  overload: GRYLibrary.Core.Utilities.NullSafeListEquals*
  nameWithType.vb: Utilities.NullSafeListEquals(Of T)(IList(Of T), IList(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.NullSafeListEquals(Of T)(System.Collections.Generic.IList(Of T), System.Collections.Generic.IList(Of T))
  name.vb: NullSafeListEquals(Of T)(IList(Of T), IList(Of T))
- uid: GRYLibrary.Core.Utilities.NullSafeEnumerableEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:GRYLibrary.Core.Utilities.NullSafeEnumerableEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: NullSafeEnumerableEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: NullSafeEnumerableEquals<T>(IEnumerable<T>, IEnumerable<T>)
  nameWithType: Utilities.NullSafeEnumerableEquals<T>(IEnumerable<T>, IEnumerable<T>)
  fullName: GRYLibrary.Core.Utilities.NullSafeEnumerableEquals<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    id: NullSafeEnumerableEquals
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1626
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool NullSafeEnumerableEquals<T>(this IEnumerable<T> this, IEnumerable<T> obj)
    parameters:
    - id: this
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: obj
      type: System.Collections.Generic.IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NullSafeEnumerableEquals(Of T)(this As IEnumerable(Of T), obj As IEnumerable(Of T)) As Boolean
  overload: GRYLibrary.Core.Utilities.NullSafeEnumerableEquals*
  nameWithType.vb: Utilities.NullSafeEnumerableEquals(Of T)(IEnumerable(Of T), IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.NullSafeEnumerableEquals(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: NullSafeEnumerableEquals(Of T)(IEnumerable(Of T), IEnumerable(Of T))
- uid: GRYLibrary.Core.Utilities.NullSafeEquals(System.Object,System.Object)
  commentId: M:GRYLibrary.Core.Utilities.NullSafeEquals(System.Object,System.Object)
  id: NullSafeEquals(System.Object,System.Object)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: NullSafeEquals(Object, Object)
  nameWithType: Utilities.NullSafeEquals(Object, Object)
  fullName: GRYLibrary.Core.Utilities.NullSafeEquals(System.Object, System.Object)
  type: Method
  source:
    id: NullSafeEquals
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1646
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool NullSafeEquals(this object this, object obj)
    parameters:
    - id: this
      type: System.Object
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NullSafeEquals(this As Object, obj As Object) As Boolean
  overload: GRYLibrary.Core.Utilities.NullSafeEquals*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.RemoveItemOnlyOnce``1(System.Collections.Generic.IList{``0},``0)
  commentId: M:GRYLibrary.Core.Utilities.RemoveItemOnlyOnce``1(System.Collections.Generic.IList{``0},``0)
  id: RemoveItemOnlyOnce``1(System.Collections.Generic.IList{``0},``0)
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: RemoveItemOnlyOnce<T>(IList<T>, T)
  nameWithType: Utilities.RemoveItemOnlyOnce<T>(IList<T>, T)
  fullName: GRYLibrary.Core.Utilities.RemoveItemOnlyOnce<T>(System.Collections.Generic.IList<T>, T)
  type: Method
  source:
    id: RemoveItemOnlyOnce
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1670
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool RemoveItemOnlyOnce<T>(this IList<T> list, T item)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{T}}
    - id: item
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RemoveItemOnlyOnce(Of T)(list As IList(Of T), item As T) As Boolean
  overload: GRYLibrary.Core.Utilities.RemoveItemOnlyOnce*
  nameWithType.vb: Utilities.RemoveItemOnlyOnce(Of T)(IList(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.RemoveItemOnlyOnce(Of T)(System.Collections.Generic.IList(Of T), T)
  name.vb: RemoveItemOnlyOnce(Of T)(IList(Of T), T)
- uid: GRYLibrary.Core.Utilities.GetTimeFromInternetUtC
  commentId: M:GRYLibrary.Core.Utilities.GetTimeFromInternetUtC
  id: GetTimeFromInternetUtC
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GetTimeFromInternetUtC()
  nameWithType: Utilities.GetTimeFromInternetUtC()
  fullName: GRYLibrary.Core.Utilities.GetTimeFromInternetUtC()
  type: Method
  source:
    id: GetTimeFromInternetUtC
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1683
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static DateTime GetTimeFromInternetUtC()
    return:
      type: System.DateTime
    content.vb: Public Shared Function GetTimeFromInternetUtC As Date
  overload: GRYLibrary.Core.Utilities.GetTimeFromInternetUtC*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.GetTimeFromInternetCurrentTimeZone
  commentId: M:GRYLibrary.Core.Utilities.GetTimeFromInternetCurrentTimeZone
  id: GetTimeFromInternetCurrentTimeZone
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GetTimeFromInternetCurrentTimeZone()
  nameWithType: Utilities.GetTimeFromInternetCurrentTimeZone()
  fullName: GRYLibrary.Core.Utilities.GetTimeFromInternetCurrentTimeZone()
  type: Method
  source:
    id: GetTimeFromInternetCurrentTimeZone
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1687
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static DateTime GetTimeFromInternetCurrentTimeZone()
    return:
      type: System.DateTime
    content.vb: Public Shared Function GetTimeFromInternetCurrentTimeZone As Date
  overload: GRYLibrary.Core.Utilities.GetTimeFromInternetCurrentTimeZone*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.GetTimeFromInternet(System.TimeZoneInfo)
  commentId: M:GRYLibrary.Core.Utilities.GetTimeFromInternet(System.TimeZoneInfo)
  id: GetTimeFromInternet(System.TimeZoneInfo)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GetTimeFromInternet(TimeZoneInfo)
  nameWithType: Utilities.GetTimeFromInternet(TimeZoneInfo)
  fullName: GRYLibrary.Core.Utilities.GetTimeFromInternet(System.TimeZoneInfo)
  type: Method
  source:
    id: GetTimeFromInternet
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1691
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static DateTime GetTimeFromInternet(TimeZoneInfo timezone)
    parameters:
    - id: timezone
      type: System.TimeZoneInfo
    return:
      type: System.DateTime
    content.vb: Public Shared Function GetTimeFromInternet(timezone As TimeZoneInfo) As Date
  overload: GRYLibrary.Core.Utilities.GetTimeFromInternet*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.GetTimeFromInternet(System.TimeZoneInfo,System.String,System.String,System.Int32,System.Int32,System.Int32)
  commentId: M:GRYLibrary.Core.Utilities.GetTimeFromInternet(System.TimeZoneInfo,System.String,System.String,System.Int32,System.Int32,System.Int32)
  id: GetTimeFromInternet(System.TimeZoneInfo,System.String,System.String,System.Int32,System.Int32,System.Int32)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GetTimeFromInternet(TimeZoneInfo, String, String, Int32, Int32, Int32)
  nameWithType: Utilities.GetTimeFromInternet(TimeZoneInfo, String, String, Int32, Int32, Int32)
  fullName: GRYLibrary.Core.Utilities.GetTimeFromInternet(System.TimeZoneInfo, System.String, System.String, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    id: GetTimeFromInternet
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1695
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static DateTime GetTimeFromInternet(TimeZoneInfo timezone, string format, string domain, int port, int begin, int length)
    parameters:
    - id: timezone
      type: System.TimeZoneInfo
    - id: format
      type: System.String
    - id: domain
      type: System.String
    - id: port
      type: System.Int32
    - id: begin
      type: System.Int32
    - id: length
      type: System.Int32
    return:
      type: System.DateTime
    content.vb: Public Shared Function GetTimeFromInternet(timezone As TimeZoneInfo, format As String, domain As String, port As Integer, begin As Integer, length As Integer) As Date
  overload: GRYLibrary.Core.Utilities.GetTimeFromInternet*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ExecuteGitCommand(System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.Boolean)
  commentId: M:GRYLibrary.Core.Utilities.ExecuteGitCommand(System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.Boolean)
  id: ExecuteGitCommand(System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.Boolean)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ExecuteGitCommand(String, String, Boolean, Nullable<Int32>, Boolean)
  nameWithType: Utilities.ExecuteGitCommand(String, String, Boolean, Nullable<Int32>, Boolean)
  fullName: GRYLibrary.Core.Utilities.ExecuteGitCommand(System.String, System.String, System.Boolean, System.Nullable<System.Int32>, System.Boolean)
  type: Method
  source:
    id: ExecuteGitCommand
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1701
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static GitCommandResult ExecuteGitCommand(string repository, string argument, bool throwErrorIfExitCodeIsNotZero = false, int? timeoutInMilliseconds = default(int? ), bool printErrorsAsInformation = false)
    parameters:
    - id: repository
      type: System.String
    - id: argument
      type: System.String
    - id: throwErrorIfExitCodeIsNotZero
      type: System.Boolean
    - id: timeoutInMilliseconds
      type: System.Nullable{System.Int32}
    - id: printErrorsAsInformation
      type: System.Boolean
    return:
      type: GRYLibrary.Core.GitCommandResult
    content.vb: Public Shared Function ExecuteGitCommand(repository As String, argument As String, throwErrorIfExitCodeIsNotZero As Boolean = False, timeoutInMilliseconds As Integer? = Nothing, printErrorsAsInformation As Boolean = False) As GitCommandResult
  overload: GRYLibrary.Core.Utilities.ExecuteGitCommand*
  nameWithType.vb: Utilities.ExecuteGitCommand(String, String, Boolean, Nullable(Of Int32), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.ExecuteGitCommand(System.String, System.String, System.Boolean, System.Nullable(Of System.Int32), System.Boolean)
  name.vb: ExecuteGitCommand(String, String, Boolean, Nullable(Of Int32), Boolean)
- uid: GRYLibrary.Core.Utilities.GitRepositoryContainsObligatoryFiles(System.String,System.Collections.Generic.ISet{System.String}@)
  commentId: M:GRYLibrary.Core.Utilities.GitRepositoryContainsObligatoryFiles(System.String,System.Collections.Generic.ISet{System.String}@)
  id: GitRepositoryContainsObligatoryFiles(System.String,System.Collections.Generic.ISet{System.String}@)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GitRepositoryContainsObligatoryFiles(String, out ISet<String>)
  nameWithType: Utilities.GitRepositoryContainsObligatoryFiles(String, out ISet<String>)
  fullName: GRYLibrary.Core.Utilities.GitRepositoryContainsObligatoryFiles(System.String, out System.Collections.Generic.ISet<System.String>)
  type: Method
  source:
    id: GitRepositoryContainsObligatoryFiles
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1709
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool GitRepositoryContainsObligatoryFiles(string repositoryFolder, out ISet<string> missingFiles)
    parameters:
    - id: repositoryFolder
      type: System.String
    - id: missingFiles
      type: System.Collections.Generic.ISet{System.String}
    return:
      type: System.Boolean
    content.vb: Public Shared Function GitRepositoryContainsObligatoryFiles(repositoryFolder As String, ByRef missingFiles As ISet(Of String)) As Boolean
  overload: GRYLibrary.Core.Utilities.GitRepositoryContainsObligatoryFiles*
  nameWithType.vb: Utilities.GitRepositoryContainsObligatoryFiles(String, ByRef ISet(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.GitRepositoryContainsObligatoryFiles(System.String, ByRef System.Collections.Generic.ISet(Of System.String))
  name.vb: GitRepositoryContainsObligatoryFiles(String, ByRef ISet(Of String))
- uid: GRYLibrary.Core.Utilities.GitRepositoryContainsObligatoryFiles(System.String,System.Collections.Generic.ISet{System.String}@,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Collections.Generic.ISet{System.String}}})
  commentId: M:GRYLibrary.Core.Utilities.GitRepositoryContainsObligatoryFiles(System.String,System.Collections.Generic.ISet{System.String}@,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Collections.Generic.ISet{System.String}}})
  id: GitRepositoryContainsObligatoryFiles(System.String,System.Collections.Generic.ISet{System.String}@,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Collections.Generic.ISet{System.String}}})
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GitRepositoryContainsObligatoryFiles(String, out ISet<String>, IEnumerable<Tuple<String, ISet<String>>>)
  nameWithType: Utilities.GitRepositoryContainsObligatoryFiles(String, out ISet<String>, IEnumerable<Tuple<String, ISet<String>>>)
  fullName: GRYLibrary.Core.Utilities.GitRepositoryContainsObligatoryFiles(System.String, out System.Collections.Generic.ISet<System.String>, System.Collections.Generic.IEnumerable<System.Tuple<System.String, System.Collections.Generic.ISet<System.String>>>)
  type: Method
  source:
    id: GitRepositoryContainsObligatoryFiles
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1717
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool GitRepositoryContainsObligatoryFiles(string repositoryFolder, out ISet<string> missingFiles, IEnumerable<Tuple<string, ISet<string>>> fileLists)
    parameters:
    - id: repositoryFolder
      type: System.String
    - id: missingFiles
      type: System.Collections.Generic.ISet{System.String}
    - id: fileLists
      type: System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Collections.Generic.ISet{System.String}}}
    return:
      type: System.Boolean
    content.vb: Public Shared Function GitRepositoryContainsObligatoryFiles(repositoryFolder As String, ByRef missingFiles As ISet(Of String), fileLists As IEnumerable(Of Tuple(Of String, ISet(Of String)))) As Boolean
  overload: GRYLibrary.Core.Utilities.GitRepositoryContainsObligatoryFiles*
  nameWithType.vb: Utilities.GitRepositoryContainsObligatoryFiles(String, ByRef ISet(Of String), IEnumerable(Of Tuple(Of String, ISet(Of String))))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.GitRepositoryContainsObligatoryFiles(System.String, ByRef System.Collections.Generic.ISet(Of System.String), System.Collections.Generic.IEnumerable(Of System.Tuple(Of System.String, System.Collections.Generic.ISet(Of System.String))))
  name.vb: GitRepositoryContainsObligatoryFiles(String, ByRef ISet(Of String), IEnumerable(Of Tuple(Of String, ISet(Of String))))
- uid: GRYLibrary.Core.Utilities.AtLeastOneFileExistsInFolder(System.String,System.Collections.Generic.IEnumerable{System.String},System.String@)
  commentId: M:GRYLibrary.Core.Utilities.AtLeastOneFileExistsInFolder(System.String,System.Collections.Generic.IEnumerable{System.String},System.String@)
  id: AtLeastOneFileExistsInFolder(System.String,System.Collections.Generic.IEnumerable{System.String},System.String@)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: AtLeastOneFileExistsInFolder(String, IEnumerable<String>, out String)
  nameWithType: Utilities.AtLeastOneFileExistsInFolder(String, IEnumerable<String>, out String)
  fullName: GRYLibrary.Core.Utilities.AtLeastOneFileExistsInFolder(System.String, System.Collections.Generic.IEnumerable<System.String>, out System.String)
  type: Method
  source:
    id: AtLeastOneFileExistsInFolder
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1729
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool AtLeastOneFileExistsInFolder(string repositoryFolder, IEnumerable<string> files, out string foundFile)
    parameters:
    - id: repositoryFolder
      type: System.String
    - id: files
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: foundFile
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function AtLeastOneFileExistsInFolder(repositoryFolder As String, files As IEnumerable(Of String), ByRef foundFile As String) As Boolean
  overload: GRYLibrary.Core.Utilities.AtLeastOneFileExistsInFolder*
  nameWithType.vb: Utilities.AtLeastOneFileExistsInFolder(String, IEnumerable(Of String), ByRef String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.AtLeastOneFileExistsInFolder(System.String, System.Collections.Generic.IEnumerable(Of System.String), ByRef System.String)
  name.vb: AtLeastOneFileExistsInFolder(String, IEnumerable(Of String), ByRef String)
- uid: GRYLibrary.Core.Utilities.IsInGitSubmodule(System.String)
  commentId: M:GRYLibrary.Core.Utilities.IsInGitSubmodule(System.String)
  id: IsInGitSubmodule(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: IsInGitSubmodule(String)
  nameWithType: Utilities.IsInGitSubmodule(String)
  fullName: GRYLibrary.Core.Utilities.IsInGitSubmodule(System.String)
  type: Method
  source:
    id: IsInGitSubmodule
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1742
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool IsInGitSubmodule(string repositoryFolder)
    parameters:
    - id: repositoryFolder
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsInGitSubmodule(repositoryFolder As String) As Boolean
  overload: GRYLibrary.Core.Utilities.IsInGitSubmodule*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.GetGitBaseRepositoryPath(System.String)
  commentId: M:GRYLibrary.Core.Utilities.GetGitBaseRepositoryPath(System.String)
  id: GetGitBaseRepositoryPath(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GetGitBaseRepositoryPath(String)
  nameWithType: Utilities.GetGitBaseRepositoryPath(String)
  fullName: GRYLibrary.Core.Utilities.GetGitBaseRepositoryPath(System.String)
  type: Method
  source:
    id: GetGitBaseRepositoryPath
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1746
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string GetGitBaseRepositoryPath(string repositoryFolder)
    parameters:
    - id: repositoryFolder
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function GetGitBaseRepositoryPath(repositoryFolder As String) As String
  overload: GRYLibrary.Core.Utilities.GetGitBaseRepositoryPath*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.IsGitRepository(System.String)
  commentId: M:GRYLibrary.Core.Utilities.IsGitRepository(System.String)
  id: IsGitRepository(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: IsGitRepository(String)
  nameWithType: Utilities.IsGitRepository(String)
  fullName: GRYLibrary.Core.Utilities.IsGitRepository(System.String)
  type: Method
  source:
    id: IsGitRepository
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1762
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool IsGitRepository(string folder)
    parameters:
    - id: folder
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsGitRepository(folder As String) As Boolean
  overload: GRYLibrary.Core.Utilities.IsGitRepository*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.GitCommit(System.String,System.String,System.Boolean@)
  commentId: M:GRYLibrary.Core.Utilities.GitCommit(System.String,System.String,System.Boolean@)
  id: GitCommit(System.String,System.String,System.Boolean@)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GitCommit(String, String, out Boolean)
  nameWithType: Utilities.GitCommit(String, String, out Boolean)
  fullName: GRYLibrary.Core.Utilities.GitCommit(System.String, System.String, out System.Boolean)
  type: Method
  source:
    id: GitCommit
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1774
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  summary: "\nCommits all staged and unstaged changes in <code data-dev-comment-type=\"paramref\" class=\"paramref\">repository</code> (excluding uncommitted changes in submodules).\n"
  example: []
  syntax:
    content: public static string GitCommit(string repository, string commitMessage, out bool commitWasCreated)
    parameters:
    - id: repository
      type: System.String
      description: Repository where changes should be committed
    - id: commitMessage
      type: System.String
      description: Message for the commit
    - id: commitWasCreated
      type: System.Boolean
      description: Will be set to true if and only if really a commit was created. Will be set to false if and only if there are no changes to get committed.
    return:
      type: System.String
      description: Returns the commit-id of the currently checked out commit. This returns the id of the new created commit if there were changes which were committed by this function.
    content.vb: Public Shared Function GitCommit(repository As String, commitMessage As String, ByRef commitWasCreated As Boolean) As String
  overload: GRYLibrary.Core.Utilities.GitCommit*
  nameWithType.vb: Utilities.GitCommit(String, String, ByRef Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.GitCommit(System.String, System.String, ByRef System.Boolean)
  name.vb: GitCommit(String, String, ByRef Boolean)
- uid: GRYLibrary.Core.Utilities.GetLastGitCommitId(System.String,System.String)
  commentId: M:GRYLibrary.Core.Utilities.GetLastGitCommitId(System.String,System.String)
  id: GetLastGitCommitId(System.String,System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GetLastGitCommitId(String, String)
  nameWithType: Utilities.GetLastGitCommitId(String, String)
  fullName: GRYLibrary.Core.Utilities.GetLastGitCommitId(System.String, System.String)
  type: Method
  source:
    id: GetLastGitCommitId
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1786
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  example: []
  syntax:
    content: public static string GetLastGitCommitId(string repositoryFolder, string revision = "HEAD")
    parameters:
    - id: repositoryFolder
      type: System.String
    - id: revision
      type: System.String
    return:
      type: System.String
      description: Returns the commit-id of the given <code data-dev-comment-type="paramref" class="paramref">revision</code>.
    content.vb: Public Shared Function GetLastGitCommitId(repositoryFolder As String, revision As String = "HEAD") As String
  overload: GRYLibrary.Core.Utilities.GetLastGitCommitId*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.GitFetch(System.String,System.String,System.Boolean)
  commentId: M:GRYLibrary.Core.Utilities.GitFetch(System.String,System.String,System.Boolean)
  id: GitFetch(System.String,System.String,System.Boolean)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GitFetch(String, String, Boolean)
  nameWithType: Utilities.GitFetch(String, String, Boolean)
  fullName: GRYLibrary.Core.Utilities.GitFetch(System.String, System.String, System.Boolean)
  type: Method
  source:
    id: GitFetch
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1790
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static void GitFetch(string repository, string remoteName = "--all", bool printErrorsAsInformation = true)
    parameters:
    - id: repository
      type: System.String
    - id: remoteName
      type: System.String
    - id: printErrorsAsInformation
      type: System.Boolean
    content.vb: Public Shared Sub GitFetch(repository As String, remoteName As String = "--all", printErrorsAsInformation As Boolean = True)
  overload: GRYLibrary.Core.Utilities.GitFetch*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.GitRepositoryHasUnstagedChanges(System.String)
  commentId: M:GRYLibrary.Core.Utilities.GitRepositoryHasUnstagedChanges(System.String)
  id: GitRepositoryHasUnstagedChanges(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GitRepositoryHasUnstagedChanges(String)
  nameWithType: Utilities.GitRepositoryHasUnstagedChanges(String)
  fullName: GRYLibrary.Core.Utilities.GitRepositoryHasUnstagedChanges(System.String)
  type: Method
  source:
    id: GitRepositoryHasUnstagedChanges
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1795
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool GitRepositoryHasUnstagedChanges(string repository)
    parameters:
    - id: repository
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function GitRepositoryHasUnstagedChanges(repository As String) As Boolean
  overload: GRYLibrary.Core.Utilities.GitRepositoryHasUnstagedChanges*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.GitRepositoryHaNewUntrackedFiles(System.String)
  commentId: M:GRYLibrary.Core.Utilities.GitRepositoryHaNewUntrackedFiles(System.String)
  id: GitRepositoryHaNewUntrackedFiles(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GitRepositoryHaNewUntrackedFiles(String)
  nameWithType: Utilities.GitRepositoryHaNewUntrackedFiles(String)
  fullName: GRYLibrary.Core.Utilities.GitRepositoryHaNewUntrackedFiles(System.String)
  type: Method
  source:
    id: GitRepositoryHaNewUntrackedFiles
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1808
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool GitRepositoryHaNewUntrackedFiles(string repository)
    parameters:
    - id: repository
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function GitRepositoryHaNewUntrackedFiles(repository As String) As Boolean
  overload: GRYLibrary.Core.Utilities.GitRepositoryHaNewUntrackedFiles*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.GitRepositoryHasUnstagedChangesOfTrackedFiles(System.String)
  commentId: M:GRYLibrary.Core.Utilities.GitRepositoryHasUnstagedChangesOfTrackedFiles(System.String)
  id: GitRepositoryHasUnstagedChangesOfTrackedFiles(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GitRepositoryHasUnstagedChangesOfTrackedFiles(String)
  nameWithType: Utilities.GitRepositoryHasUnstagedChangesOfTrackedFiles(String)
  fullName: GRYLibrary.Core.Utilities.GitRepositoryHasUnstagedChangesOfTrackedFiles(System.String)
  type: Method
  source:
    id: GitRepositoryHasUnstagedChangesOfTrackedFiles
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1813
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool GitRepositoryHasUnstagedChangesOfTrackedFiles(string repository)
    parameters:
    - id: repository
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function GitRepositoryHasUnstagedChangesOfTrackedFiles(repository As String) As Boolean
  overload: GRYLibrary.Core.Utilities.GitRepositoryHasUnstagedChangesOfTrackedFiles*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.GitRepositoryHasStagedChanges(System.String)
  commentId: M:GRYLibrary.Core.Utilities.GitRepositoryHasStagedChanges(System.String)
  id: GitRepositoryHasStagedChanges(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GitRepositoryHasStagedChanges(String)
  nameWithType: Utilities.GitRepositoryHasStagedChanges(String)
  fullName: GRYLibrary.Core.Utilities.GitRepositoryHasStagedChanges(System.String)
  type: Method
  source:
    id: GitRepositoryHasStagedChanges
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1818
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool GitRepositoryHasStagedChanges(string repository)
    parameters:
    - id: repository
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function GitRepositoryHasStagedChanges(repository As String) As Boolean
  overload: GRYLibrary.Core.Utilities.GitRepositoryHasStagedChanges*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.GitRepositoryHasUncommittedChanges(System.String)
  commentId: M:GRYLibrary.Core.Utilities.GitRepositoryHasUncommittedChanges(System.String)
  id: GitRepositoryHasUncommittedChanges(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GitRepositoryHasUncommittedChanges(String)
  nameWithType: Utilities.GitRepositoryHasUncommittedChanges(String)
  fullName: GRYLibrary.Core.Utilities.GitRepositoryHasUncommittedChanges(System.String)
  type: Method
  source:
    id: GitRepositoryHasUncommittedChanges
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1836
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool GitRepositoryHasUncommittedChanges(string repository)
    parameters:
    - id: repository
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function GitRepositoryHasUncommittedChanges(repository As String) As Boolean
  overload: GRYLibrary.Core.Utilities.GitRepositoryHasUncommittedChanges*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.GetAmountOfCommitsInGitRepository(System.String,System.String)
  commentId: M:GRYLibrary.Core.Utilities.GetAmountOfCommitsInGitRepository(System.String,System.String)
  id: GetAmountOfCommitsInGitRepository(System.String,System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GetAmountOfCommitsInGitRepository(String, String)
  nameWithType: Utilities.GetAmountOfCommitsInGitRepository(String, String)
  fullName: GRYLibrary.Core.Utilities.GetAmountOfCommitsInGitRepository(System.String, System.String)
  type: Method
  source:
    id: GetAmountOfCommitsInGitRepository
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1848
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static int GetAmountOfCommitsInGitRepository(string repositoryFolder, string revision = "HEAD")
    parameters:
    - id: repositoryFolder
      type: System.String
    - id: revision
      type: System.String
    return:
      type: System.Int32
    content.vb: Public Shared Function GetAmountOfCommitsInGitRepository(repositoryFolder As String, revision As String = "HEAD") As Integer
  overload: GRYLibrary.Core.Utilities.GetAmountOfCommitsInGitRepository*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.GetCurrentGitRepositoryBranch(System.String)
  commentId: M:GRYLibrary.Core.Utilities.GetCurrentGitRepositoryBranch(System.String)
  id: GetCurrentGitRepositoryBranch(System.String)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GetCurrentGitRepositoryBranch(String)
  nameWithType: Utilities.GetCurrentGitRepositoryBranch(String)
  fullName: GRYLibrary.Core.Utilities.GetCurrentGitRepositoryBranch(System.String)
  type: Method
  source:
    id: GetCurrentGitRepositoryBranch
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1852
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static string GetCurrentGitRepositoryBranch(string repositoryFolder)
    parameters:
    - id: repositoryFolder
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function GetCurrentGitRepositoryBranch(repositoryFolder As String) As String
  overload: GRYLibrary.Core.Utilities.GetCurrentGitRepositoryBranch*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.ToSerializableDictionary``2(System.Collections.Generic.IDictionary{``0,``1})
  commentId: M:GRYLibrary.Core.Utilities.ToSerializableDictionary``2(System.Collections.Generic.IDictionary{``0,``1})
  id: ToSerializableDictionary``2(System.Collections.Generic.IDictionary{``0,``1})
  isExtensionMethod: true
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: ToSerializableDictionary<TKey, TValue>(IDictionary<TKey, TValue>)
  nameWithType: Utilities.ToSerializableDictionary<TKey, TValue>(IDictionary<TKey, TValue>)
  fullName: GRYLibrary.Core.Utilities.ToSerializableDictionary<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>)
  type: Method
  source:
    id: ToSerializableDictionary
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1856
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static SerializableDictionary<TKey, TValue> ToSerializableDictionary<TKey, TValue>(this IDictionary<TKey, TValue> dictionary)
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
    typeParameters:
    - id: TKey
    - id: TValue
    return:
      type: GRYLibrary.Core.XMLSerializer.SerializableDictionary{{TKey},{TValue}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToSerializableDictionary(Of TKey, TValue)(dictionary As IDictionary(Of TKey, TValue)) As SerializableDictionary(Of TKey, TValue)
  overload: GRYLibrary.Core.Utilities.ToSerializableDictionary*
  nameWithType.vb: Utilities.ToSerializableDictionary(Of TKey, TValue)(IDictionary(Of TKey, TValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GRYLibrary.Core.Utilities.ToSerializableDictionary(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue))
  name.vb: ToSerializableDictionary(Of TKey, TValue)(IDictionary(Of TKey, TValue))
- uid: GRYLibrary.Core.Utilities.IsDefault(System.Object)
  commentId: M:GRYLibrary.Core.Utilities.IsDefault(System.Object)
  id: IsDefault(System.Object)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: IsDefault(Object)
  nameWithType: Utilities.IsDefault(Object)
  fullName: GRYLibrary.Core.Utilities.IsDefault(System.Object)
  type: Method
  source:
    id: IsDefault
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1866
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static bool IsDefault(object object)
    parameters:
    - id: object
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsDefault(object As Object) As Boolean
  overload: GRYLibrary.Core.Utilities.IsDefault*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GRYLibrary.Core.Utilities.GetDefault(System.Type)
  commentId: M:GRYLibrary.Core.Utilities.GetDefault(System.Type)
  id: GetDefault(System.Type)
  parent: GRYLibrary.Core.Utilities
  langs:
  - csharp
  - vb
  name: GetDefault(Type)
  nameWithType: Utilities.GetDefault(Type)
  fullName: GRYLibrary.Core.Utilities.GetDefault(System.Type)
  type: Method
  source:
    id: GetDefault
    path: C:\Dev\Projects\Common\gryLibraryBuild\Submodules\gryLibrary\GRYLibrary\Core\Utilities.cs
    startLine: 1877
  assemblies:
  - GRYLibrary
  namespace: GRYLibrary.Core
  syntax:
    content: public static object GetDefault(Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Object
    content.vb: Public Shared Function GetDefault(type As Type) As Object
  overload: GRYLibrary.Core.Utilities.GetDefault*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: GRYLibrary.Core
  commentId: N:GRYLibrary.Core
  name: GRYLibrary.Core
  nameWithType: GRYLibrary.Core
  fullName: GRYLibrary.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: GRYLibrary.Core.Utilities.Shuffle*
  commentId: Overload:GRYLibrary.Core.Utilities.Shuffle
  name: Shuffle
  nameWithType: Utilities.Shuffle
  fullName: GRYLibrary.Core.Utilities.Shuffle
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: GRYLibrary.Core.Utilities.EqualsIgnoringOrder*
  commentId: Overload:GRYLibrary.Core.Utilities.EqualsIgnoringOrder
  name: EqualsIgnoringOrder
  nameWithType: Utilities.EqualsIgnoringOrder
  fullName: GRYLibrary.Core.Utilities.EqualsIgnoringOrder
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.Utilities.GetPropertiesWhichHaveGetterAndSetter*
  commentId: Overload:GRYLibrary.Core.Utilities.GetPropertiesWhichHaveGetterAndSetter
  name: GetPropertiesWhichHaveGetterAndSetter
  nameWithType: Utilities.GetPropertiesWhichHaveGetterAndSetter
  fullName: GRYLibrary.Core.Utilities.GetPropertiesWhichHaveGetterAndSetter
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<PropertyInfo>
  nameWithType: IEnumerable<PropertyInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo>
  nameWithType.vb: IEnumerable(Of PropertyInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.PropertyInfo)
  name.vb: IEnumerable(Of PropertyInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.Utilities.GetFilesOfFolderRecursively*
  commentId: Overload:GRYLibrary.Core.Utilities.GetFilesOfFolderRecursively
  name: GetFilesOfFolderRecursively
  nameWithType: Utilities.GetFilesOfFolderRecursively
  fullName: GRYLibrary.Core.Utilities.GetFilesOfFolderRecursively
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.Utilities.NoOperation*
  commentId: Overload:GRYLibrary.Core.Utilities.NoOperation
  name: NoOperation
  nameWithType: Utilities.NoOperation
  fullName: GRYLibrary.Core.Utilities.NoOperation
- uid: GRYLibrary.Core.Utilities.ReplaceUnderscoresInFolderTransitively*
  commentId: Overload:GRYLibrary.Core.Utilities.ReplaceUnderscoresInFolderTransitively
  name: ReplaceUnderscoresInFolderTransitively
  nameWithType: Utilities.ReplaceUnderscoresInFolderTransitively
  fullName: GRYLibrary.Core.Utilities.ReplaceUnderscoresInFolderTransitively
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.Utilities.ReplaceUnderscores*
  commentId: Overload:GRYLibrary.Core.Utilities.ReplaceUnderscores
  name: ReplaceUnderscores
  nameWithType: Utilities.ReplaceUnderscores
  fullName: GRYLibrary.Core.Utilities.ReplaceUnderscores
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: GRYLibrary.Core.Utilities.ObjectIsEnumerable*
  commentId: Overload:GRYLibrary.Core.Utilities.ObjectIsEnumerable
  name: ObjectIsEnumerable
  nameWithType: Utilities.ObjectIsEnumerable
  fullName: GRYLibrary.Core.Utilities.ObjectIsEnumerable
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: GRYLibrary.Core.Utilities.TypeIsEnumerable*
  commentId: Overload:GRYLibrary.Core.Utilities.TypeIsEnumerable
  name: TypeIsEnumerable
  nameWithType: Utilities.TypeIsEnumerable
  fullName: GRYLibrary.Core.Utilities.TypeIsEnumerable
- uid: GRYLibrary.Core.Utilities.ObjectToEnumerable*
  commentId: Overload:GRYLibrary.Core.Utilities.ObjectToEnumerable
  name: ObjectToEnumerable
  nameWithType: Utilities.ObjectToEnumerable
  fullName: GRYLibrary.Core.Utilities.ObjectToEnumerable
- uid: GRYLibrary.Core.Utilities.ObjectToEnumerableGeneric*
  commentId: Overload:GRYLibrary.Core.Utilities.ObjectToEnumerableGeneric
  name: ObjectToEnumerableGeneric
  nameWithType: Utilities.ObjectToEnumerableGeneric
  fullName: GRYLibrary.Core.Utilities.ObjectToEnumerableGeneric
- uid: GRYLibrary.Core.Utilities.EnumerableEquals*
  commentId: Overload:GRYLibrary.Core.Utilities.EnumerableEquals
  name: EnumerableEquals
  nameWithType: Utilities.EnumerableEquals
  fullName: GRYLibrary.Core.Utilities.EnumerableEquals
- uid: System.Collections.Generic.IEqualityComparer{{T}}
  commentId: T:System.Collections.Generic.IEqualityComparer{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.Utilities.ObjectIsList*
  commentId: Overload:GRYLibrary.Core.Utilities.ObjectIsList
  name: ObjectIsList
  nameWithType: Utilities.ObjectIsList
  fullName: GRYLibrary.Core.Utilities.ObjectIsList
- uid: GRYLibrary.Core.Utilities.TypeIsList*
  commentId: Overload:GRYLibrary.Core.Utilities.TypeIsList
  name: TypeIsList
  nameWithType: Utilities.TypeIsList
  fullName: GRYLibrary.Core.Utilities.TypeIsList
- uid: GRYLibrary.Core.Utilities.ObjectToList*
  commentId: Overload:GRYLibrary.Core.Utilities.ObjectToList
  name: ObjectToList
  nameWithType: Utilities.ObjectToList
  fullName: GRYLibrary.Core.Utilities.ObjectToList
- uid: System.Collections.Generic.ISet`1
  commentId: T:System.Collections.Generic.ISet`1
  isExternal: true
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullName.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.Utilities.ObjectIsSet*
  commentId: Overload:GRYLibrary.Core.Utilities.ObjectIsSet
  name: ObjectIsSet
  nameWithType: Utilities.ObjectIsSet
  fullName: GRYLibrary.Core.Utilities.ObjectIsSet
- uid: GRYLibrary.Core.Utilities.TypeIsSet*
  commentId: Overload:GRYLibrary.Core.Utilities.TypeIsSet
  name: TypeIsSet
  nameWithType: Utilities.TypeIsSet
  fullName: GRYLibrary.Core.Utilities.TypeIsSet
- uid: GRYLibrary.Core.Utilities.ObjectIsKeyValuePair*
  commentId: Overload:GRYLibrary.Core.Utilities.ObjectIsKeyValuePair
  name: ObjectIsKeyValuePair
  nameWithType: Utilities.ObjectIsKeyValuePair
  fullName: GRYLibrary.Core.Utilities.ObjectIsKeyValuePair
- uid: GRYLibrary.Core.Utilities.TypeIsKeyValuePair*
  commentId: Overload:GRYLibrary.Core.Utilities.TypeIsKeyValuePair
  name: TypeIsKeyValuePair
  nameWithType: Utilities.TypeIsKeyValuePair
  fullName: GRYLibrary.Core.Utilities.TypeIsKeyValuePair
- uid: GRYLibrary.Core.Utilities.ObjectToKeyValuePair*
  commentId: Overload:GRYLibrary.Core.Utilities.ObjectToKeyValuePair
  name: ObjectToKeyValuePair
  nameWithType: Utilities.ObjectToKeyValuePair
  fullName: GRYLibrary.Core.Utilities.ObjectToKeyValuePair
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.KeyValuePair{``0,``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.Utilities.ObjectToSet*
  commentId: Overload:GRYLibrary.Core.Utilities.ObjectToSet
  name: ObjectToSet
  nameWithType: Utilities.ObjectToSet
  fullName: GRYLibrary.Core.Utilities.ObjectToSet
- uid: System.Collections.Generic.ISet{{T}}
  commentId: T:System.Collections.Generic.ISet{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ISet`1
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullName.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.Utilities.SequanceEqual*
  commentId: Overload:GRYLibrary.Core.Utilities.SequanceEqual
  name: SequanceEqual
  nameWithType: Utilities.SequanceEqual
  fullName: GRYLibrary.Core.Utilities.SequanceEqual
- uid: GRYLibrary.Core.Utilities.SetEquals*
  commentId: Overload:GRYLibrary.Core.Utilities.SetEquals
  name: SetEquals
  nameWithType: Utilities.SetEquals
  fullName: GRYLibrary.Core.Utilities.SetEquals
- uid: GRYLibrary.Core.Utilities.ObjectIsDictionary*
  commentId: Overload:GRYLibrary.Core.Utilities.ObjectIsDictionary
  name: ObjectIsDictionary
  nameWithType: Utilities.ObjectIsDictionary
  fullName: GRYLibrary.Core.Utilities.ObjectIsDictionary
- uid: GRYLibrary.Core.Utilities.TypeIsDictionary*
  commentId: Overload:GRYLibrary.Core.Utilities.TypeIsDictionary
  name: TypeIsDictionary
  nameWithType: Utilities.TypeIsDictionary
  fullName: GRYLibrary.Core.Utilities.TypeIsDictionary
- uid: GRYLibrary.Core.Utilities.ObjectToDictionary*
  commentId: Overload:GRYLibrary.Core.Utilities.ObjectToDictionary
  name: ObjectToDictionary
  nameWithType: Utilities.ObjectToDictionary
  fullName: GRYLibrary.Core.Utilities.ObjectToDictionary
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.IDictionary{``0,``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.Utilities.DictionaryEquals*
  commentId: Overload:GRYLibrary.Core.Utilities.DictionaryEquals
  name: DictionaryEquals
  nameWithType: Utilities.DictionaryEquals
  fullName: GRYLibrary.Core.Utilities.DictionaryEquals
- uid: System.Collections.Generic.IEqualityComparer{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: T:System.Collections.Generic.IEqualityComparer{System.Collections.Generic.KeyValuePair{``0,``1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<KeyValuePair<TKey, TValue>>
  nameWithType: IEqualityComparer<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEqualityComparer<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: IEqualityComparer(Of KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: IEqualityComparer(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.Utilities.IsAssignableFrom*
  commentId: Overload:GRYLibrary.Core.Utilities.IsAssignableFrom
  name: IsAssignableFrom
  nameWithType: Utilities.IsAssignableFrom
  fullName: GRYLibrary.Core.Utilities.IsAssignableFrom
- uid: GRYLibrary.Core.Utilities.TypeComparerIgnoringGenerics*
  commentId: Overload:GRYLibrary.Core.Utilities.TypeComparerIgnoringGenerics
  name: TypeComparerIgnoringGenerics
  nameWithType: Utilities.TypeComparerIgnoringGenerics
  fullName: GRYLibrary.Core.Utilities.TypeComparerIgnoringGenerics
- uid: System.Collections.Generic.IEqualityComparer{System.Type}
  commentId: T:System.Collections.Generic.IEqualityComparer{System.Type}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<Type>
  nameWithType: IEqualityComparer<Type>
  fullName: System.Collections.Generic.IEqualityComparer<System.Type>
  nameWithType.vb: IEqualityComparer(Of Type)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of System.Type)
  name.vb: IEqualityComparer(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.Utilities.ReplaceUnderscoresInFile*
  commentId: Overload:GRYLibrary.Core.Utilities.ReplaceUnderscoresInFile
  name: ReplaceUnderscoresInFile
  nameWithType: Utilities.ReplaceUnderscoresInFile
  fullName: GRYLibrary.Core.Utilities.ReplaceUnderscoresInFile
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  commentId: N:System.Text
  isExternal: true
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: GRYLibrary.Core.Utilities.WriteToConsoleAsASCIITable*
  commentId: Overload:GRYLibrary.Core.Utilities.WriteToConsoleAsASCIITable
  name: WriteToConsoleAsASCIITable
  nameWithType: Utilities.WriteToConsoleAsASCIITable
  fullName: GRYLibrary.Core.Utilities.WriteToConsoleAsASCIITable
- uid: System.Collections.Generic.IList{System.Collections.Generic.IList{System.String}}
  commentId: T:System.Collections.Generic.IList{System.Collections.Generic.IList{System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IList<String>>
  nameWithType: IList<IList<String>>
  fullName: System.Collections.Generic.IList<System.Collections.Generic.IList<System.String>>
  nameWithType.vb: IList(Of IList(Of String))
  fullName.vb: System.Collections.Generic.IList(Of System.Collections.Generic.IList(Of System.String))
  name.vb: IList(Of IList(Of String))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.Utilities.EnumerableOfEnumerableToJaggedArray*
  commentId: Overload:GRYLibrary.Core.Utilities.EnumerableOfEnumerableToJaggedArray
  name: EnumerableOfEnumerableToJaggedArray
  nameWithType: Utilities.EnumerableOfEnumerableToJaggedArray
  fullName: GRYLibrary.Core.Utilities.EnumerableOfEnumerableToJaggedArray
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IEnumerable<T>>
  nameWithType: IEnumerable<IEnumerable<T>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>>
  nameWithType.vb: IEnumerable(Of IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of T))
  name.vb: IEnumerable(Of IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}[][]'
  isExternal: true
  name: T[][]
  nameWithType: T[][]
  fullName: T[][]
  nameWithType.vb: T()()
  fullName.vb: T()()
  name.vb: T()()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: GRYLibrary.Core.Utilities.JaggedArrayToTwoDimensionalArray*
  commentId: Overload:GRYLibrary.Core.Utilities.JaggedArrayToTwoDimensionalArray
  name: JaggedArrayToTwoDimensionalArray
  nameWithType: Utilities.JaggedArrayToTwoDimensionalArray
  fullName: GRYLibrary.Core.Utilities.JaggedArrayToTwoDimensionalArray
- uid: '{T}[,]'
  isExternal: true
  name: T[,]
  nameWithType: T[,]
  fullName: T[,]
  nameWithType.vb: T(,)
  fullName.vb: T(,)
  name.vb: T(,)
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[,]'
    nameWithType: '[,]'
    fullName: '[,]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: (,)
    nameWithType: (,)
    fullName: (,)
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: GRYLibrary.Core.Utilities.IncrementGuid*
  commentId: Overload:GRYLibrary.Core.Utilities.IncrementGuid
  name: IncrementGuid
  nameWithType: Utilities.IncrementGuid
  fullName: GRYLibrary.Core.Utilities.IncrementGuid
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Numerics.BigInteger
  commentId: T:System.Numerics.BigInteger
  parent: System.Numerics
  isExternal: true
  name: BigInteger
  nameWithType: BigInteger
  fullName: System.Numerics.BigInteger
- uid: System.Numerics
  commentId: N:System.Numerics
  isExternal: true
  name: System.Numerics
  nameWithType: System.Numerics
  fullName: System.Numerics
- uid: GRYLibrary.Core.Utilities.JaggedArrayToEnumerableOfEnumerable*
  commentId: Overload:GRYLibrary.Core.Utilities.JaggedArrayToEnumerableOfEnumerable
  name: JaggedArrayToEnumerableOfEnumerable
  nameWithType: Utilities.JaggedArrayToEnumerableOfEnumerable
  fullName: GRYLibrary.Core.Utilities.JaggedArrayToEnumerableOfEnumerable
- uid: GRYLibrary.Core.Utilities.TwoDimensionalArrayToJaggedArray*
  commentId: Overload:GRYLibrary.Core.Utilities.TwoDimensionalArrayToJaggedArray
  name: TwoDimensionalArrayToJaggedArray
  nameWithType: Utilities.TwoDimensionalArrayToJaggedArray
  fullName: GRYLibrary.Core.Utilities.TwoDimensionalArrayToJaggedArray
- uid: GRYLibrary.Core.Utilities.EnsureFileExists*
  commentId: Overload:GRYLibrary.Core.Utilities.EnsureFileExists
  name: EnsureFileExists
  nameWithType: Utilities.EnsureFileExists
  fullName: GRYLibrary.Core.Utilities.EnsureFileExists
- uid: GRYLibrary.Core.Utilities.EnsureDirectoryExists*
  commentId: Overload:GRYLibrary.Core.Utilities.EnsureDirectoryExists
  name: EnsureDirectoryExists
  nameWithType: Utilities.EnsureDirectoryExists
  fullName: GRYLibrary.Core.Utilities.EnsureDirectoryExists
- uid: GRYLibrary.Core.Utilities.DurationToUserFriendlyString*
  commentId: Overload:GRYLibrary.Core.Utilities.DurationToUserFriendlyString
  name: DurationToUserFriendlyString
  nameWithType: Utilities.DurationToUserFriendlyString
  fullName: GRYLibrary.Core.Utilities.DurationToUserFriendlyString
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: GRYLibrary.Core.Utilities.EnsureDirectoryDoesNotExist*
  commentId: Overload:GRYLibrary.Core.Utilities.EnsureDirectoryDoesNotExist
  name: EnsureDirectoryDoesNotExist
  nameWithType: Utilities.EnsureDirectoryDoesNotExist
  fullName: GRYLibrary.Core.Utilities.EnsureDirectoryDoesNotExist
- uid: GRYLibrary.Core.Utilities.EnsureFileDoesNotExist*
  commentId: Overload:GRYLibrary.Core.Utilities.EnsureFileDoesNotExist
  name: EnsureFileDoesNotExist
  nameWithType: Utilities.EnsureFileDoesNotExist
  fullName: GRYLibrary.Core.Utilities.EnsureFileDoesNotExist
- uid: GRYLibrary.Core.Utilities.TypeArrayToString*
  commentId: Overload:GRYLibrary.Core.Utilities.TypeArrayToString
  name: TypeArrayToString
  nameWithType: Utilities.TypeArrayToString
  fullName: GRYLibrary.Core.Utilities.TypeArrayToString
- uid: System.Type[]
  isExternal: true
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: GRYLibrary.Core.Utilities.CopyFolderAcrossVolumes*
  commentId: Overload:GRYLibrary.Core.Utilities.CopyFolderAcrossVolumes
  name: CopyFolderAcrossVolumes
  nameWithType: Utilities.CopyFolderAcrossVolumes
  fullName: GRYLibrary.Core.Utilities.CopyFolderAcrossVolumes
- uid: GRYLibrary.Core.Utilities.DeleteAllEmptyFolderTransitively*
  commentId: Overload:GRYLibrary.Core.Utilities.DeleteAllEmptyFolderTransitively
  name: DeleteAllEmptyFolderTransitively
  nameWithType: Utilities.DeleteAllEmptyFolderTransitively
  fullName: GRYLibrary.Core.Utilities.DeleteAllEmptyFolderTransitively
- uid: GRYLibrary.Core.Utilities.MoveFolderAcrossVolumes*
  commentId: Overload:GRYLibrary.Core.Utilities.MoveFolderAcrossVolumes
  name: MoveFolderAcrossVolumes
  nameWithType: Utilities.MoveFolderAcrossVolumes
  fullName: GRYLibrary.Core.Utilities.MoveFolderAcrossVolumes
- uid: GRYLibrary.Core.Utilities.DeleteFolder*
  commentId: Overload:GRYLibrary.Core.Utilities.DeleteFolder
  name: DeleteFolder
  nameWithType: Utilities.DeleteFolder
  fullName: GRYLibrary.Core.Utilities.DeleteFolder
- uid: GRYLibrary.Core.Utilities.TwoDimensionalArrayToString*
  commentId: Overload:GRYLibrary.Core.Utilities.TwoDimensionalArrayToString
  name: TwoDimensionalArrayToString
  nameWithType: Utilities.TwoDimensionalArrayToString
  fullName: GRYLibrary.Core.Utilities.TwoDimensionalArrayToString
- uid: GRYLibrary.Core.Utilities.TwoDimensionalArrayEquals*
  commentId: Overload:GRYLibrary.Core.Utilities.TwoDimensionalArrayEquals
  name: TwoDimensionalArrayEquals
  nameWithType: Utilities.TwoDimensionalArrayEquals
  fullName: GRYLibrary.Core.Utilities.TwoDimensionalArrayEquals
- uid: GRYLibrary.Core.Utilities.DeleteContentOfFolder*
  commentId: Overload:GRYLibrary.Core.Utilities.DeleteContentOfFolder
  name: DeleteContentOfFolder
  nameWithType: Utilities.DeleteContentOfFolder
  fullName: GRYLibrary.Core.Utilities.DeleteContentOfFolder
- uid: GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes*
  commentId: Overload:GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes
  name: MoveContentOfFoldersAcrossVolumes
  nameWithType: Utilities.MoveContentOfFoldersAcrossVolumes
  fullName: GRYLibrary.Core.Utilities.MoveContentOfFoldersAcrossVolumes
- uid: GRYLibrary.Core.FileSelector
  commentId: T:GRYLibrary.Core.FileSelector
  parent: GRYLibrary.Core
  name: FileSelector
  nameWithType: FileSelector
  fullName: GRYLibrary.Core.FileSelector
- uid: System.Func{System.String,System.Boolean}
  commentId: T:System.Func{System.String,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<String, Boolean>
  nameWithType: Func<String, Boolean>
  fullName: System.Func<System.String, System.Boolean>
  nameWithType.vb: Func(Of String, Boolean)
  fullName.vb: System.Func(Of System.String, System.Boolean)
  name.vb: Func(Of String, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.Exception}
  commentId: T:System.Action{System.Exception}
  parent: System
  definition: System.Action`1
  name: Action<Exception>
  nameWithType: Action<Exception>
  fullName: System.Action<System.Exception>
  nameWithType.vb: Action(Of Exception)
  fullName.vb: System.Action(Of System.Exception)
  name.vb: Action(Of Exception)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.Utilities.ForEachFileAndDirectoryTransitively*
  commentId: Overload:GRYLibrary.Core.Utilities.ForEachFileAndDirectoryTransitively
  name: ForEachFileAndDirectoryTransitively
  nameWithType: Utilities.ForEachFileAndDirectoryTransitively
  fullName: GRYLibrary.Core.Utilities.ForEachFileAndDirectoryTransitively
- uid: System.Action{System.String,System.Object}
  commentId: T:System.Action{System.String,System.Object}
  parent: System
  definition: System.Action`2
  name: Action<String, Object>
  nameWithType: Action<String, Object>
  fullName: System.Action<System.String, System.Object>
  nameWithType.vb: Action(Of String, Object)
  fullName.vb: System.Action(Of System.String, System.Object)
  name.vb: Action(Of String, Object)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.Utilities.RemoveContentOfFolder*
  commentId: Overload:GRYLibrary.Core.Utilities.RemoveContentOfFolder
  name: RemoveContentOfFolder
  nameWithType: Utilities.RemoveContentOfFolder
  fullName: GRYLibrary.Core.Utilities.RemoveContentOfFolder
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.Utilities.RunAllConcurrentAndReturnAllResults*
  commentId: Overload:GRYLibrary.Core.Utilities.RunAllConcurrentAndReturnAllResults
  name: RunAllConcurrentAndReturnAllResults
  nameWithType: Utilities.RunAllConcurrentAndReturnAllResults
  fullName: GRYLibrary.Core.Utilities.RunAllConcurrentAndReturnAllResults
- uid: System.Collections.Generic.ISet{System.Func{{T}}}
  commentId: T:System.Collections.Generic.ISet{System.Func{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ISet`1
  name: ISet<Func<T>>
  nameWithType: ISet<Func<T>>
  fullName: System.Collections.Generic.ISet<System.Func<T>>
  nameWithType.vb: ISet(Of Func(Of T))
  fullName.vb: System.Collections.Generic.ISet(Of System.Func(Of T))
  name.vb: ISet(Of Func(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ISet{System.Tuple{System.Func{{T}},{T},System.Exception}}
  commentId: T:System.Collections.Generic.ISet{System.Tuple{System.Func{``0},``0,System.Exception}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ISet`1
  name: ISet<Tuple<Func<T>, T, Exception>>
  nameWithType: ISet<Tuple<Func<T>, T, Exception>>
  fullName: System.Collections.Generic.ISet<System.Tuple<System.Func<T>, T, System.Exception>>
  nameWithType.vb: ISet(Of Tuple(Of Func(Of T), T, Exception))
  fullName.vb: System.Collections.Generic.ISet(Of System.Tuple(Of System.Func(Of T), T, System.Exception))
  name.vb: ISet(Of Tuple(Of Func(Of T), T, Exception))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.ThreadStart
  commentId: T:System.Threading.ThreadStart
  parent: System.Threading
  isExternal: true
  name: ThreadStart
  nameWithType: ThreadStart
  fullName: System.Threading.ThreadStart
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: GRYLibrary.Core.Utilities.RunAllConcurrentAndReturnFirstResult*
  commentId: Overload:GRYLibrary.Core.Utilities.RunAllConcurrentAndReturnFirstResult
  name: RunAllConcurrentAndReturnFirstResult
  nameWithType: Utilities.RunAllConcurrentAndReturnFirstResult
  fullName: GRYLibrary.Core.Utilities.RunAllConcurrentAndReturnFirstResult
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: GRYLibrary.Core.Utilities.ToCaseInsensitiveSet*
  commentId: Overload:GRYLibrary.Core.Utilities.ToCaseInsensitiveSet
  name: ToCaseInsensitiveSet
  nameWithType: Utilities.ToCaseInsensitiveSet
  fullName: GRYLibrary.Core.Utilities.ToCaseInsensitiveSet
- uid: System.Collections.Generic.ISet{System.String}
  commentId: T:System.Collections.Generic.ISet{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ISet`1
  name: ISet<String>
  nameWithType: ISet<String>
  fullName: System.Collections.Generic.ISet<System.String>
  nameWithType.vb: ISet(Of String)
  fullName.vb: System.Collections.Generic.ISet(Of System.String)
  name.vb: ISet(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.Utilities.ToDynamic*
  commentId: Overload:GRYLibrary.Core.Utilities.ToDynamic
  name: ToDynamic
  nameWithType: Utilities.ToDynamic
  fullName: GRYLibrary.Core.Utilities.ToDynamic
- uid: GRYLibrary.Core.Utilities.DeepClone*
  commentId: Overload:GRYLibrary.Core.Utilities.DeepClone
  name: DeepClone
  nameWithType: Utilities.DeepClone
  fullName: GRYLibrary.Core.Utilities.DeepClone
- uid: GRYLibrary.Core.Utilities.GetTotalFreeSpace*
  commentId: Overload:GRYLibrary.Core.Utilities.GetTotalFreeSpace
  name: GetTotalFreeSpace
  nameWithType: Utilities.GetTotalFreeSpace
  fullName: GRYLibrary.Core.Utilities.GetTotalFreeSpace
- uid: GRYLibrary.Core.Utilities.PersistToDisk*
  commentId: Overload:GRYLibrary.Core.Utilities.PersistToDisk
  name: PersistToDisk
  nameWithType: Utilities.PersistToDisk
  fullName: GRYLibrary.Core.Utilities.PersistToDisk
- uid: GRYLibrary.Core.SimpleObjectPersistence{{T}}
  commentId: T:GRYLibrary.Core.SimpleObjectPersistence{``0}
  parent: GRYLibrary.Core
  definition: GRYLibrary.Core.SimpleObjectPersistence`1
  name: SimpleObjectPersistence<T>
  nameWithType: SimpleObjectPersistence<T>
  fullName: GRYLibrary.Core.SimpleObjectPersistence<T>
  nameWithType.vb: SimpleObjectPersistence(Of T)
  fullName.vb: GRYLibrary.Core.SimpleObjectPersistence(Of T)
  name.vb: SimpleObjectPersistence(Of T)
  spec.csharp:
  - uid: GRYLibrary.Core.SimpleObjectPersistence`1
    name: SimpleObjectPersistence
    nameWithType: SimpleObjectPersistence
    fullName: GRYLibrary.Core.SimpleObjectPersistence
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: GRYLibrary.Core.SimpleObjectPersistence`1
    name: SimpleObjectPersistence
    nameWithType: SimpleObjectPersistence
    fullName: GRYLibrary.Core.SimpleObjectPersistence
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.SimpleObjectPersistence`1
  commentId: T:GRYLibrary.Core.SimpleObjectPersistence`1
  parent: GRYLibrary.Core
  name: SimpleObjectPersistence<T>
  nameWithType: SimpleObjectPersistence<T>
  fullName: GRYLibrary.Core.SimpleObjectPersistence<T>
  nameWithType.vb: SimpleObjectPersistence(Of T)
  fullName.vb: GRYLibrary.Core.SimpleObjectPersistence(Of T)
  name.vb: SimpleObjectPersistence(Of T)
  spec.csharp:
  - uid: GRYLibrary.Core.SimpleObjectPersistence`1
    name: SimpleObjectPersistence
    nameWithType: SimpleObjectPersistence
    fullName: GRYLibrary.Core.SimpleObjectPersistence
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: GRYLibrary.Core.SimpleObjectPersistence`1
    name: SimpleObjectPersistence
    nameWithType: SimpleObjectPersistence
    fullName: GRYLibrary.Core.SimpleObjectPersistence
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.Utilities.LoadFromDisk*
  commentId: Overload:GRYLibrary.Core.Utilities.LoadFromDisk
  name: LoadFromDisk
  nameWithType: Utilities.LoadFromDisk
  fullName: GRYLibrary.Core.Utilities.LoadFromDisk
- uid: GRYLibrary.Core.Utilities.GetCommandLineArguments*
  commentId: Overload:GRYLibrary.Core.Utilities.GetCommandLineArguments
  name: GetCommandLineArguments
  nameWithType: Utilities.GetCommandLineArguments
  fullName: GRYLibrary.Core.Utilities.GetCommandLineArguments
- uid: GRYLibrary.Core.Utilities.ToPascalCase*
  commentId: Overload:GRYLibrary.Core.Utilities.ToPascalCase
  name: ToPascalCase
  nameWithType: Utilities.ToPascalCase
  fullName: GRYLibrary.Core.Utilities.ToPascalCase
- uid: GRYLibrary.Core.Utilities.ToCamelCase*
  commentId: Overload:GRYLibrary.Core.Utilities.ToCamelCase
  name: ToCamelCase
  nameWithType: Utilities.ToCamelCase
  fullName: GRYLibrary.Core.Utilities.ToCamelCase
- uid: GRYLibrary.Core.Utilities.IsHexString*
  commentId: Overload:GRYLibrary.Core.Utilities.IsHexString
  name: IsHexString
  nameWithType: Utilities.IsHexString
  fullName: GRYLibrary.Core.Utilities.IsHexString
- uid: GRYLibrary.Core.Utilities.IsHexDigit*
  commentId: Overload:GRYLibrary.Core.Utilities.IsHexDigit
  name: IsHexDigit
  nameWithType: Utilities.IsHexDigit
  fullName: GRYLibrary.Core.Utilities.IsHexDigit
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: GRYLibrary.Core.Utilities.IsAllUpper*
  commentId: Overload:GRYLibrary.Core.Utilities.IsAllUpper
  name: IsAllUpper
  nameWithType: Utilities.IsAllUpper
  fullName: GRYLibrary.Core.Utilities.IsAllUpper
- uid: GRYLibrary.Core.Utilities.IsAllLower*
  commentId: Overload:GRYLibrary.Core.Utilities.IsAllLower
  name: IsAllLower
  nameWithType: Utilities.IsAllLower
  fullName: GRYLibrary.Core.Utilities.IsAllLower
- uid: GRYLibrary.Core.Utilities.IsNegative*
  commentId: Overload:GRYLibrary.Core.Utilities.IsNegative
  name: IsNegative
  nameWithType: Utilities.IsNegative
  fullName: GRYLibrary.Core.Utilities.IsNegative
- uid: GRYLibrary.Core.Utilities.IsPositive*
  commentId: Overload:GRYLibrary.Core.Utilities.IsPositive
  name: IsPositive
  nameWithType: Utilities.IsPositive
  fullName: GRYLibrary.Core.Utilities.IsPositive
- uid: GRYLibrary.Core.Utilities.ToOnlyFirstCharToUpper*
  commentId: Overload:GRYLibrary.Core.Utilities.ToOnlyFirstCharToUpper
  name: ToOnlyFirstCharToUpper
  nameWithType: Utilities.ToOnlyFirstCharToUpper
  fullName: GRYLibrary.Core.Utilities.ToOnlyFirstCharToUpper
- uid: GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryWordToUpper*
  commentId: Overload:GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryWordToUpper
  name: ToOnlyFirstCharOfEveryWordToUpper
  nameWithType: Utilities.ToOnlyFirstCharOfEveryWordToUpper
  fullName: GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryWordToUpper
- uid: GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryWordOrPartialWordToUpper*
  commentId: Overload:GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryWordOrPartialWordToUpper
  name: ToOnlyFirstCharOfEveryWordOrPartialWordToUpper
  nameWithType: Utilities.ToOnlyFirstCharOfEveryWordOrPartialWordToUpper
  fullName: GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryWordOrPartialWordToUpper
- uid: GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryNewLetterSequenceToUpper*
  commentId: Overload:GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryNewLetterSequenceToUpper
  name: ToOnlyFirstCharOfEveryNewLetterSequenceToUpper
  nameWithType: Utilities.ToOnlyFirstCharOfEveryNewLetterSequenceToUpper
  fullName: GRYLibrary.Core.Utilities.ToOnlyFirstCharOfEveryNewLetterSequenceToUpper
- uid: System.Func{System.Char,System.Boolean}
  commentId: T:System.Func{System.Char,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<Char, Boolean>
  nameWithType: Func<Char, Boolean>
  fullName: System.Func<System.Char, System.Boolean>
  nameWithType.vb: Func(Of Char, Boolean)
  fullName.vb: System.Func(Of System.Char, System.Boolean)
  name.vb: Func(Of Char, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.Utilities.FileEndsWithEmptyLine*
  commentId: Overload:GRYLibrary.Core.Utilities.FileEndsWithEmptyLine
  name: FileEndsWithEmptyLine
  nameWithType: Utilities.FileEndsWithEmptyLine
  fullName: GRYLibrary.Core.Utilities.FileEndsWithEmptyLine
- uid: GRYLibrary.Core.Utilities.FileIsEmpty*
  commentId: Overload:GRYLibrary.Core.Utilities.FileIsEmpty
  name: FileIsEmpty
  nameWithType: Utilities.FileIsEmpty
  fullName: GRYLibrary.Core.Utilities.FileIsEmpty
- uid: GRYLibrary.Core.Utilities.AppendFileDoesNotNeedNewLineCharacter*
  commentId: Overload:GRYLibrary.Core.Utilities.AppendFileDoesNotNeedNewLineCharacter
  name: AppendFileDoesNotNeedNewLineCharacter
  nameWithType: Utilities.AppendFileDoesNotNeedNewLineCharacter
  fullName: GRYLibrary.Core.Utilities.AppendFileDoesNotNeedNewLineCharacter
- uid: GRYLibrary.Core.Utilities.AppendFileDoesNeedNewLineCharacter*
  commentId: Overload:GRYLibrary.Core.Utilities.AppendFileDoesNeedNewLineCharacter
  name: AppendFileDoesNeedNewLineCharacter
  nameWithType: Utilities.AppendFileDoesNeedNewLineCharacter
  fullName: GRYLibrary.Core.Utilities.AppendFileDoesNeedNewLineCharacter
- uid: GRYLibrary.Core.Utilities.IsRelativePath*
  commentId: Overload:GRYLibrary.Core.Utilities.IsRelativePath
  name: IsRelativePath
  nameWithType: Utilities.IsRelativePath
  fullName: GRYLibrary.Core.Utilities.IsRelativePath
- uid: GRYLibrary.Core.Utilities.IsAbsolutePath*
  commentId: Overload:GRYLibrary.Core.Utilities.IsAbsolutePath
  name: IsAbsolutePath
  nameWithType: Utilities.IsAbsolutePath
  fullName: GRYLibrary.Core.Utilities.IsAbsolutePath
- uid: GRYLibrary.Core.Utilities.GetAbsolutePath*
  commentId: Overload:GRYLibrary.Core.Utilities.GetAbsolutePath
  name: GetAbsolutePath
  nameWithType: Utilities.GetAbsolutePath
  fullName: GRYLibrary.Core.Utilities.GetAbsolutePath
- uid: GRYLibrary.Core.Utilities.DirectoryIsEmpty*
  commentId: Overload:GRYLibrary.Core.Utilities.DirectoryIsEmpty
  name: DirectoryIsEmpty
  nameWithType: Utilities.DirectoryIsEmpty
  fullName: GRYLibrary.Core.Utilities.DirectoryIsEmpty
- uid: GRYLibrary.Core.Utilities.DirectoryDoesNotContainFiles*
  commentId: Overload:GRYLibrary.Core.Utilities.DirectoryDoesNotContainFiles
  name: DirectoryDoesNotContainFiles
  nameWithType: Utilities.DirectoryDoesNotContainFiles
  fullName: GRYLibrary.Core.Utilities.DirectoryDoesNotContainFiles
- uid: GRYLibrary.Core.Utilities.DirectoryDoesNotContainFolder*
  commentId: Overload:GRYLibrary.Core.Utilities.DirectoryDoesNotContainFolder
  name: DirectoryDoesNotContainFolder
  nameWithType: Utilities.DirectoryDoesNotContainFolder
  fullName: GRYLibrary.Core.Utilities.DirectoryDoesNotContainFolder
- uid: GRYLibrary.Core.Utilities.StringToByteArray*
  commentId: Overload:GRYLibrary.Core.Utilities.StringToByteArray
  name: StringToByteArray
  nameWithType: Utilities.StringToByteArray
  fullName: GRYLibrary.Core.Utilities.StringToByteArray
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: GRYLibrary.Core.Utilities.GetHexValue*
  commentId: Overload:GRYLibrary.Core.Utilities.GetHexValue
  name: GetHexValue
  nameWithType: Utilities.GetHexValue
  fullName: GRYLibrary.Core.Utilities.GetHexValue
- uid: GRYLibrary.Core.Utilities.ClearFile*
  commentId: Overload:GRYLibrary.Core.Utilities.ClearFile
  name: ClearFile
  nameWithType: Utilities.ClearFile
  fullName: GRYLibrary.Core.Utilities.ClearFile
- uid: GRYLibrary.Core.Utilities.EnsurePathStartsWithSlash*
  commentId: Overload:GRYLibrary.Core.Utilities.EnsurePathStartsWithSlash
  name: EnsurePathStartsWithSlash
  nameWithType: Utilities.EnsurePathStartsWithSlash
  fullName: GRYLibrary.Core.Utilities.EnsurePathStartsWithSlash
- uid: GRYLibrary.Core.Utilities.EnsurePathStartsWithBackslash*
  commentId: Overload:GRYLibrary.Core.Utilities.EnsurePathStartsWithBackslash
  name: EnsurePathStartsWithBackslash
  nameWithType: Utilities.EnsurePathStartsWithBackslash
  fullName: GRYLibrary.Core.Utilities.EnsurePathStartsWithBackslash
- uid: GRYLibrary.Core.Utilities.EnsurePathStartsWithoutSlash*
  commentId: Overload:GRYLibrary.Core.Utilities.EnsurePathStartsWithoutSlash
  name: EnsurePathStartsWithoutSlash
  nameWithType: Utilities.EnsurePathStartsWithoutSlash
  fullName: GRYLibrary.Core.Utilities.EnsurePathStartsWithoutSlash
- uid: GRYLibrary.Core.Utilities.EnsurePathStartsWithoutBackslash*
  commentId: Overload:GRYLibrary.Core.Utilities.EnsurePathStartsWithoutBackslash
  name: EnsurePathStartsWithoutBackslash
  nameWithType: Utilities.EnsurePathStartsWithoutBackslash
  fullName: GRYLibrary.Core.Utilities.EnsurePathStartsWithoutBackslash
- uid: GRYLibrary.Core.Utilities.EnsurePathEndsWithSlash*
  commentId: Overload:GRYLibrary.Core.Utilities.EnsurePathEndsWithSlash
  name: EnsurePathEndsWithSlash
  nameWithType: Utilities.EnsurePathEndsWithSlash
  fullName: GRYLibrary.Core.Utilities.EnsurePathEndsWithSlash
- uid: GRYLibrary.Core.Utilities.EnsurePathEndsWithBackslash*
  commentId: Overload:GRYLibrary.Core.Utilities.EnsurePathEndsWithBackslash
  name: EnsurePathEndsWithBackslash
  nameWithType: Utilities.EnsurePathEndsWithBackslash
  fullName: GRYLibrary.Core.Utilities.EnsurePathEndsWithBackslash
- uid: GRYLibrary.Core.Utilities.EnsurePathEndsWithoutSlash*
  commentId: Overload:GRYLibrary.Core.Utilities.EnsurePathEndsWithoutSlash
  name: EnsurePathEndsWithoutSlash
  nameWithType: Utilities.EnsurePathEndsWithoutSlash
  fullName: GRYLibrary.Core.Utilities.EnsurePathEndsWithoutSlash
- uid: GRYLibrary.Core.Utilities.EnsurePathEndsWithoutBackslash*
  commentId: Overload:GRYLibrary.Core.Utilities.EnsurePathEndsWithoutBackslash
  name: EnsurePathEndsWithoutBackslash
  nameWithType: Utilities.EnsurePathEndsWithoutBackslash
  fullName: GRYLibrary.Core.Utilities.EnsurePathEndsWithoutBackslash
- uid: GRYLibrary.Core.Utilities.EnsurePathStartsWithoutSlashOrBackslash*
  commentId: Overload:GRYLibrary.Core.Utilities.EnsurePathStartsWithoutSlashOrBackslash
  name: EnsurePathStartsWithoutSlashOrBackslash
  nameWithType: Utilities.EnsurePathStartsWithoutSlashOrBackslash
  fullName: GRYLibrary.Core.Utilities.EnsurePathStartsWithoutSlashOrBackslash
- uid: GRYLibrary.Core.Utilities.EnsurePathSEndsWithoutSlashOrBackslash*
  commentId: Overload:GRYLibrary.Core.Utilities.EnsurePathSEndsWithoutSlashOrBackslash
  name: EnsurePathSEndsWithoutSlashOrBackslash
  nameWithType: Utilities.EnsurePathSEndsWithoutSlashOrBackslash
  fullName: GRYLibrary.Core.Utilities.EnsurePathSEndsWithoutSlashOrBackslash
- uid: GRYLibrary.Core.Utilities.StartsWith*
  commentId: Overload:GRYLibrary.Core.Utilities.StartsWith
  name: StartsWith
  nameWithType: Utilities.StartsWith
  fullName: GRYLibrary.Core.Utilities.StartsWith
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: GRYLibrary.Core.Utilities.ByteArrayToHexString*
  commentId: Overload:GRYLibrary.Core.Utilities.ByteArrayToHexString
  name: ByteArrayToHexString
  nameWithType: Utilities.ByteArrayToHexString
  fullName: GRYLibrary.Core.Utilities.ByteArrayToHexString
- uid: GRYLibrary.Core.Utilities.HexStringToByteArray*
  commentId: Overload:GRYLibrary.Core.Utilities.HexStringToByteArray
  name: HexStringToByteArray
  nameWithType: Utilities.HexStringToByteArray
  fullName: GRYLibrary.Core.Utilities.HexStringToByteArray
- uid: GRYLibrary.Core.Utilities.IntegerToHexString*
  commentId: Overload:GRYLibrary.Core.Utilities.IntegerToHexString
  name: IntegerToHexString
  nameWithType: Utilities.IntegerToHexString
  fullName: GRYLibrary.Core.Utilities.IntegerToHexString
- uid: GRYLibrary.Core.Utilities.HexStringToInteger*
  commentId: Overload:GRYLibrary.Core.Utilities.HexStringToInteger
  name: HexStringToInteger
  nameWithType: Utilities.HexStringToInteger
  fullName: GRYLibrary.Core.Utilities.HexStringToInteger
- uid: GRYLibrary.Core.Utilities.Concat*
  commentId: Overload:GRYLibrary.Core.Utilities.Concat
  name: Concat
  nameWithType: Utilities.Concat
  fullName: GRYLibrary.Core.Utilities.Concat
- uid: GRYLibrary.Core.Utilities.StringToBoolean*
  commentId: Overload:GRYLibrary.Core.Utilities.StringToBoolean
  name: StringToBoolean
  nameWithType: Utilities.StringToBoolean
  fullName: GRYLibrary.Core.Utilities.StringToBoolean
- uid: GRYLibrary.Core.Utilities.Assert*
  commentId: Overload:GRYLibrary.Core.Utilities.Assert
  name: Assert
  nameWithType: Utilities.Assert
  fullName: GRYLibrary.Core.Utilities.Assert
- uid: GRYLibrary.Core.Utilities.ReadCSVFile*
  commentId: Overload:GRYLibrary.Core.Utilities.ReadCSVFile
  name: ReadCSVFile
  nameWithType: Utilities.ReadCSVFile
  fullName: GRYLibrary.Core.Utilities.ReadCSVFile
- uid: System.String[,]
  isExternal: true
  name: String[,]
  nameWithType: String[,]
  fullName: System.String[,]
  nameWithType.vb: String(,)
  fullName.vb: System.String(,)
  name.vb: String(,)
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[,]'
    nameWithType: '[,]'
    fullName: '[,]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: (,)
    nameWithType: (,)
    fullName: (,)
- uid: GRYLibrary.Core.Utilities.RunWithTimeout*
  commentId: Overload:GRYLibrary.Core.Utilities.RunWithTimeout
  name: RunWithTimeout
  nameWithType: Utilities.RunWithTimeout
  fullName: GRYLibrary.Core.Utilities.RunWithTimeout
- uid: GRYLibrary.Core.Utilities.ResolveToFullPath*
  commentId: Overload:GRYLibrary.Core.Utilities.ResolveToFullPath
  name: ResolveToFullPath
  nameWithType: Utilities.ResolveToFullPath
  fullName: GRYLibrary.Core.Utilities.ResolveToFullPath
- uid: GRYLibrary.Core.Utilities.ValidateXMLAgainstXSD*
  commentId: Overload:GRYLibrary.Core.Utilities.ValidateXMLAgainstXSD
  name: ValidateXMLAgainstXSD
  nameWithType: Utilities.ValidateXMLAgainstXSD
  fullName: GRYLibrary.Core.Utilities.ValidateXMLAgainstXSD
- uid: System.Collections.Generic.IList{System.Object}
  commentId: T:System.Collections.Generic.IList{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Object>
  nameWithType: IList<Object>
  fullName: System.Collections.Generic.IList<System.Object>
  nameWithType.vb: IList(Of Object)
  fullName.vb: System.Collections.Generic.IList(Of System.Object)
  name.vb: IList(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlWriterSettings
  commentId: T:System.Xml.XmlWriterSettings
  parent: System.Xml
  isExternal: true
  name: XmlWriterSettings
  nameWithType: XmlWriterSettings
  fullName: System.Xml.XmlWriterSettings
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: GRYLibrary.Core.Utilities.ApplyXSLTToXML*
  commentId: Overload:GRYLibrary.Core.Utilities.ApplyXSLTToXML
  name: ApplyXSLTToXML
  nameWithType: Utilities.ApplyXSLTToXML
  fullName: GRYLibrary.Core.Utilities.ApplyXSLTToXML
- uid: GRYLibrary.Core.Utilities.FormatXMLFile*
  commentId: Overload:GRYLibrary.Core.Utilities.FormatXMLFile
  name: FormatXMLFile
  nameWithType: Utilities.FormatXMLFile
  fullName: GRYLibrary.Core.Utilities.FormatXMLFile
- uid: GRYLibrary.Core.Utilities.FormatXMLString*
  commentId: Overload:GRYLibrary.Core.Utilities.FormatXMLString
  name: FormatXMLString
  nameWithType: Utilities.FormatXMLString
  fullName: GRYLibrary.Core.Utilities.FormatXMLString
- uid: GRYLibrary.Core.Utilities.AddMountPointForVolume*
  commentId: Overload:GRYLibrary.Core.Utilities.AddMountPointForVolume
  name: AddMountPointForVolume
  nameWithType: Utilities.AddMountPointForVolume
  fullName: GRYLibrary.Core.Utilities.AddMountPointForVolume
- uid: GRYLibrary.Core.Utilities.GetAvailableVolumeIds*
  commentId: Overload:GRYLibrary.Core.Utilities.GetAvailableVolumeIds
  name: GetAvailableVolumeIds
  nameWithType: Utilities.GetAvailableVolumeIds
  fullName: GRYLibrary.Core.Utilities.GetAvailableVolumeIds
- uid: System.Collections.Generic.ISet{System.Guid}
  commentId: T:System.Collections.Generic.ISet{System.Guid}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ISet`1
  name: ISet<Guid>
  nameWithType: ISet<Guid>
  fullName: System.Collections.Generic.ISet<System.Guid>
  nameWithType.vb: ISet(Of Guid)
  fullName.vb: System.Collections.Generic.ISet(Of System.Guid)
  name.vb: ISet(Of Guid)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.Utilities.GetAllMountPointsOfAllAvailableVolumes*
  commentId: Overload:GRYLibrary.Core.Utilities.GetAllMountPointsOfAllAvailableVolumes
  name: GetAllMountPointsOfAllAvailableVolumes
  nameWithType: Utilities.GetAllMountPointsOfAllAvailableVolumes
  fullName: GRYLibrary.Core.Utilities.GetAllMountPointsOfAllAvailableVolumes
- uid: GRYLibrary.Core.Utilities.GetMountPoints*
  commentId: Overload:GRYLibrary.Core.Utilities.GetMountPoints
  name: GetMountPoints
  nameWithType: Utilities.GetMountPoints
  fullName: GRYLibrary.Core.Utilities.GetMountPoints
- uid: GRYLibrary.Core.Utilities.RemoveAllMountPointsOfVolume*
  commentId: Overload:GRYLibrary.Core.Utilities.RemoveAllMountPointsOfVolume
  name: RemoveAllMountPointsOfVolume
  nameWithType: Utilities.RemoveAllMountPointsOfVolume
  fullName: GRYLibrary.Core.Utilities.RemoveAllMountPointsOfVolume
- uid: GRYLibrary.Core.Utilities.RemoveMountPointOfVolume*
  commentId: Overload:GRYLibrary.Core.Utilities.RemoveMountPointOfVolume
  name: RemoveMountPointOfVolume
  nameWithType: Utilities.RemoveMountPointOfVolume
  fullName: GRYLibrary.Core.Utilities.RemoveMountPointOfVolume
- uid: GRYLibrary.Core.Utilities.GetVolumeIdByMountPoint*
  commentId: Overload:GRYLibrary.Core.Utilities.GetVolumeIdByMountPoint
  name: GetVolumeIdByMountPoint
  nameWithType: Utilities.GetVolumeIdByMountPoint
  fullName: GRYLibrary.Core.Utilities.GetVolumeIdByMountPoint
- uid: GRYLibrary.Core.Utilities.NullSafeSetEquals*
  commentId: Overload:GRYLibrary.Core.Utilities.NullSafeSetEquals
  name: NullSafeSetEquals
  nameWithType: Utilities.NullSafeSetEquals
  fullName: GRYLibrary.Core.Utilities.NullSafeSetEquals
- uid: GRYLibrary.Core.Utilities.NullSafeListEquals*
  commentId: Overload:GRYLibrary.Core.Utilities.NullSafeListEquals
  name: NullSafeListEquals
  nameWithType: Utilities.NullSafeListEquals
  fullName: GRYLibrary.Core.Utilities.NullSafeListEquals
- uid: GRYLibrary.Core.Utilities.NullSafeEnumerableEquals*
  commentId: Overload:GRYLibrary.Core.Utilities.NullSafeEnumerableEquals
  name: NullSafeEnumerableEquals
  nameWithType: Utilities.NullSafeEnumerableEquals
  fullName: GRYLibrary.Core.Utilities.NullSafeEnumerableEquals
- uid: GRYLibrary.Core.Utilities.NullSafeEquals*
  commentId: Overload:GRYLibrary.Core.Utilities.NullSafeEquals
  name: NullSafeEquals
  nameWithType: Utilities.NullSafeEquals
  fullName: GRYLibrary.Core.Utilities.NullSafeEquals
- uid: GRYLibrary.Core.Utilities.RemoveItemOnlyOnce*
  commentId: Overload:GRYLibrary.Core.Utilities.RemoveItemOnlyOnce
  name: RemoveItemOnlyOnce
  nameWithType: Utilities.RemoveItemOnlyOnce
  fullName: GRYLibrary.Core.Utilities.RemoveItemOnlyOnce
- uid: GRYLibrary.Core.Utilities.GetTimeFromInternetUtC*
  commentId: Overload:GRYLibrary.Core.Utilities.GetTimeFromInternetUtC
  name: GetTimeFromInternetUtC
  nameWithType: Utilities.GetTimeFromInternetUtC
  fullName: GRYLibrary.Core.Utilities.GetTimeFromInternetUtC
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: GRYLibrary.Core.Utilities.GetTimeFromInternetCurrentTimeZone*
  commentId: Overload:GRYLibrary.Core.Utilities.GetTimeFromInternetCurrentTimeZone
  name: GetTimeFromInternetCurrentTimeZone
  nameWithType: Utilities.GetTimeFromInternetCurrentTimeZone
  fullName: GRYLibrary.Core.Utilities.GetTimeFromInternetCurrentTimeZone
- uid: GRYLibrary.Core.Utilities.GetTimeFromInternet*
  commentId: Overload:GRYLibrary.Core.Utilities.GetTimeFromInternet
  name: GetTimeFromInternet
  nameWithType: Utilities.GetTimeFromInternet
  fullName: GRYLibrary.Core.Utilities.GetTimeFromInternet
- uid: System.TimeZoneInfo
  commentId: T:System.TimeZoneInfo
  parent: System
  isExternal: true
  name: TimeZoneInfo
  nameWithType: TimeZoneInfo
  fullName: System.TimeZoneInfo
- uid: GRYLibrary.Core.Utilities.ExecuteGitCommand*
  commentId: Overload:GRYLibrary.Core.Utilities.ExecuteGitCommand
  name: ExecuteGitCommand
  nameWithType: Utilities.ExecuteGitCommand
  fullName: GRYLibrary.Core.Utilities.ExecuteGitCommand
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.GitCommandResult
  commentId: T:GRYLibrary.Core.GitCommandResult
  parent: GRYLibrary.Core
  name: GitCommandResult
  nameWithType: GitCommandResult
  fullName: GRYLibrary.Core.GitCommandResult
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.Utilities.GitRepositoryContainsObligatoryFiles*
  commentId: Overload:GRYLibrary.Core.Utilities.GitRepositoryContainsObligatoryFiles
  name: GitRepositoryContainsObligatoryFiles
  nameWithType: Utilities.GitRepositoryContainsObligatoryFiles
  fullName: GRYLibrary.Core.Utilities.GitRepositoryContainsObligatoryFiles
- uid: System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Collections.Generic.ISet{System.String}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Collections.Generic.ISet{System.String}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Tuple<String, ISet<String>>>
  nameWithType: IEnumerable<Tuple<String, ISet<String>>>
  fullName: System.Collections.Generic.IEnumerable<System.Tuple<System.String, System.Collections.Generic.ISet<System.String>>>
  nameWithType.vb: IEnumerable(Of Tuple(Of String, ISet(Of String)))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Tuple(Of System.String, System.Collections.Generic.ISet(Of System.String)))
  name.vb: IEnumerable(Of Tuple(Of String, ISet(Of String)))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.Utilities.AtLeastOneFileExistsInFolder*
  commentId: Overload:GRYLibrary.Core.Utilities.AtLeastOneFileExistsInFolder
  name: AtLeastOneFileExistsInFolder
  nameWithType: Utilities.AtLeastOneFileExistsInFolder
  fullName: GRYLibrary.Core.Utilities.AtLeastOneFileExistsInFolder
- uid: GRYLibrary.Core.Utilities.IsInGitSubmodule*
  commentId: Overload:GRYLibrary.Core.Utilities.IsInGitSubmodule
  name: IsInGitSubmodule
  nameWithType: Utilities.IsInGitSubmodule
  fullName: GRYLibrary.Core.Utilities.IsInGitSubmodule
- uid: GRYLibrary.Core.Utilities.GetGitBaseRepositoryPath*
  commentId: Overload:GRYLibrary.Core.Utilities.GetGitBaseRepositoryPath
  name: GetGitBaseRepositoryPath
  nameWithType: Utilities.GetGitBaseRepositoryPath
  fullName: GRYLibrary.Core.Utilities.GetGitBaseRepositoryPath
- uid: GRYLibrary.Core.Utilities.IsGitRepository*
  commentId: Overload:GRYLibrary.Core.Utilities.IsGitRepository
  name: IsGitRepository
  nameWithType: Utilities.IsGitRepository
  fullName: GRYLibrary.Core.Utilities.IsGitRepository
- uid: GRYLibrary.Core.Utilities.GitCommit*
  commentId: Overload:GRYLibrary.Core.Utilities.GitCommit
  name: GitCommit
  nameWithType: Utilities.GitCommit
  fullName: GRYLibrary.Core.Utilities.GitCommit
- uid: GRYLibrary.Core.Utilities.GetLastGitCommitId*
  commentId: Overload:GRYLibrary.Core.Utilities.GetLastGitCommitId
  name: GetLastGitCommitId
  nameWithType: Utilities.GetLastGitCommitId
  fullName: GRYLibrary.Core.Utilities.GetLastGitCommitId
- uid: GRYLibrary.Core.Utilities.GitFetch*
  commentId: Overload:GRYLibrary.Core.Utilities.GitFetch
  name: GitFetch
  nameWithType: Utilities.GitFetch
  fullName: GRYLibrary.Core.Utilities.GitFetch
- uid: GRYLibrary.Core.Utilities.GitRepositoryHasUnstagedChanges*
  commentId: Overload:GRYLibrary.Core.Utilities.GitRepositoryHasUnstagedChanges
  name: GitRepositoryHasUnstagedChanges
  nameWithType: Utilities.GitRepositoryHasUnstagedChanges
  fullName: GRYLibrary.Core.Utilities.GitRepositoryHasUnstagedChanges
- uid: GRYLibrary.Core.Utilities.GitRepositoryHaNewUntrackedFiles*
  commentId: Overload:GRYLibrary.Core.Utilities.GitRepositoryHaNewUntrackedFiles
  name: GitRepositoryHaNewUntrackedFiles
  nameWithType: Utilities.GitRepositoryHaNewUntrackedFiles
  fullName: GRYLibrary.Core.Utilities.GitRepositoryHaNewUntrackedFiles
- uid: GRYLibrary.Core.Utilities.GitRepositoryHasUnstagedChangesOfTrackedFiles*
  commentId: Overload:GRYLibrary.Core.Utilities.GitRepositoryHasUnstagedChangesOfTrackedFiles
  name: GitRepositoryHasUnstagedChangesOfTrackedFiles
  nameWithType: Utilities.GitRepositoryHasUnstagedChangesOfTrackedFiles
  fullName: GRYLibrary.Core.Utilities.GitRepositoryHasUnstagedChangesOfTrackedFiles
- uid: GRYLibrary.Core.Utilities.GitRepositoryHasStagedChanges*
  commentId: Overload:GRYLibrary.Core.Utilities.GitRepositoryHasStagedChanges
  name: GitRepositoryHasStagedChanges
  nameWithType: Utilities.GitRepositoryHasStagedChanges
  fullName: GRYLibrary.Core.Utilities.GitRepositoryHasStagedChanges
- uid: GRYLibrary.Core.Utilities.GitRepositoryHasUncommittedChanges*
  commentId: Overload:GRYLibrary.Core.Utilities.GitRepositoryHasUncommittedChanges
  name: GitRepositoryHasUncommittedChanges
  nameWithType: Utilities.GitRepositoryHasUncommittedChanges
  fullName: GRYLibrary.Core.Utilities.GitRepositoryHasUncommittedChanges
- uid: GRYLibrary.Core.Utilities.GetAmountOfCommitsInGitRepository*
  commentId: Overload:GRYLibrary.Core.Utilities.GetAmountOfCommitsInGitRepository
  name: GetAmountOfCommitsInGitRepository
  nameWithType: Utilities.GetAmountOfCommitsInGitRepository
  fullName: GRYLibrary.Core.Utilities.GetAmountOfCommitsInGitRepository
- uid: GRYLibrary.Core.Utilities.GetCurrentGitRepositoryBranch*
  commentId: Overload:GRYLibrary.Core.Utilities.GetCurrentGitRepositoryBranch
  name: GetCurrentGitRepositoryBranch
  nameWithType: Utilities.GetCurrentGitRepositoryBranch
  fullName: GRYLibrary.Core.Utilities.GetCurrentGitRepositoryBranch
- uid: GRYLibrary.Core.Utilities.ToSerializableDictionary*
  commentId: Overload:GRYLibrary.Core.Utilities.ToSerializableDictionary
  name: ToSerializableDictionary
  nameWithType: Utilities.ToSerializableDictionary
  fullName: GRYLibrary.Core.Utilities.ToSerializableDictionary
- uid: GRYLibrary.Core.XMLSerializer.SerializableDictionary{{TKey},{TValue}}
  commentId: T:GRYLibrary.Core.XMLSerializer.SerializableDictionary{``0,``1}
  parent: GRYLibrary.Core.XMLSerializer
  definition: GRYLibrary.Core.XMLSerializer.SerializableDictionary`2
  name: SerializableDictionary<TKey, TValue>
  nameWithType: SerializableDictionary<TKey, TValue>
  fullName: GRYLibrary.Core.XMLSerializer.SerializableDictionary<TKey, TValue>
  nameWithType.vb: SerializableDictionary(Of TKey, TValue)
  fullName.vb: GRYLibrary.Core.XMLSerializer.SerializableDictionary(Of TKey, TValue)
  name.vb: SerializableDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: GRYLibrary.Core.XMLSerializer.SerializableDictionary`2
    name: SerializableDictionary
    nameWithType: SerializableDictionary
    fullName: GRYLibrary.Core.XMLSerializer.SerializableDictionary
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: GRYLibrary.Core.XMLSerializer.SerializableDictionary`2
    name: SerializableDictionary
    nameWithType: SerializableDictionary
    fullName: GRYLibrary.Core.XMLSerializer.SerializableDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.XMLSerializer.SerializableDictionary`2
  commentId: T:GRYLibrary.Core.XMLSerializer.SerializableDictionary`2
  name: SerializableDictionary<TKey, TValue>
  nameWithType: SerializableDictionary<TKey, TValue>
  fullName: GRYLibrary.Core.XMLSerializer.SerializableDictionary<TKey, TValue>
  nameWithType.vb: SerializableDictionary(Of TKey, TValue)
  fullName.vb: GRYLibrary.Core.XMLSerializer.SerializableDictionary(Of TKey, TValue)
  name.vb: SerializableDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: GRYLibrary.Core.XMLSerializer.SerializableDictionary`2
    name: SerializableDictionary
    nameWithType: SerializableDictionary
    fullName: GRYLibrary.Core.XMLSerializer.SerializableDictionary
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: GRYLibrary.Core.XMLSerializer.SerializableDictionary`2
    name: SerializableDictionary
    nameWithType: SerializableDictionary
    fullName: GRYLibrary.Core.XMLSerializer.SerializableDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: GRYLibrary.Core.XMLSerializer
  commentId: N:GRYLibrary.Core.XMLSerializer
  name: GRYLibrary.Core.XMLSerializer
  nameWithType: GRYLibrary.Core.XMLSerializer
  fullName: GRYLibrary.Core.XMLSerializer
- uid: GRYLibrary.Core.Utilities.IsDefault*
  commentId: Overload:GRYLibrary.Core.Utilities.IsDefault
  name: IsDefault
  nameWithType: Utilities.IsDefault
  fullName: GRYLibrary.Core.Utilities.IsDefault
- uid: GRYLibrary.Core.Utilities.GetDefault*
  commentId: Overload:GRYLibrary.Core.Utilities.GetDefault
  name: GetDefault
  nameWithType: Utilities.GetDefault
  fullName: GRYLibrary.Core.Utilities.GetDefault
